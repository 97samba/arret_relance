[{"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js":"1","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js":"2","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js":"3","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js":"4","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js":"5","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js":"6","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js":"7","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js":"8","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js":"9","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js":"10","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js":"11","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js":"12","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js":"13","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js":"14","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js":"15","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js":"16","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js":"17","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js":"18","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js":"19","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js":"20","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js":"21","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js":"22","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js":"23","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js":"24","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js":"25","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js":"26","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js":"27","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Checker.js":"28","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Log.js":"29","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\IIS.js":"30","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Rename.js":"31","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Disk.js":"32","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\ServerField.js":"33","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\PathField.js":"34","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ValidationsDialog.js":"35","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Condition.js":"36","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Automator.js":"37","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Env.js":"38","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\SSAViewer.js":"39"},{"size":449,"mtime":1618580424144,"results":"40","hashOfConfig":"41"},{"size":1873,"mtime":1628068664908,"results":"42","hashOfConfig":"41"},{"size":20083,"mtime":1628499422747,"results":"43","hashOfConfig":"41"},{"size":5406,"mtime":1628497398578,"results":"44","hashOfConfig":"41"},{"size":8115,"mtime":1628501308532,"results":"45","hashOfConfig":"41"},{"size":2385,"mtime":1624892602131,"results":"46","hashOfConfig":"41"},{"size":79,"mtime":1627482281369,"results":"47","hashOfConfig":"41"},{"size":135,"mtime":1618569284110,"results":"48","hashOfConfig":"41"},{"size":6248,"mtime":1628269377256,"results":"49","hashOfConfig":"41"},{"size":15185,"mtime":1628001481061,"results":"50","hashOfConfig":"41"},{"size":7215,"mtime":1628172846937,"results":"51","hashOfConfig":"41"},{"size":5231,"mtime":1628263748832,"results":"52","hashOfConfig":"41"},{"size":990,"mtime":1626857509947,"results":"53","hashOfConfig":"41"},{"size":10991,"mtime":1628170344910,"results":"54","hashOfConfig":"41"},{"size":6255,"mtime":1628263707462,"results":"55","hashOfConfig":"41"},{"size":6367,"mtime":1627997923894,"results":"56","hashOfConfig":"41"},{"size":11201,"mtime":1628172622716,"results":"57","hashOfConfig":"41"},{"size":6909,"mtime":1627997878255,"results":"58","hashOfConfig":"41"},{"size":9437,"mtime":1628496846193,"results":"59","hashOfConfig":"41"},{"size":71,"mtime":1618846144628,"results":"60","hashOfConfig":"41"},{"size":1799,"mtime":1624892303391,"results":"61","hashOfConfig":"41"},{"size":3450,"mtime":1624909157700,"results":"62","hashOfConfig":"41"},{"size":3298,"mtime":1624898525760,"results":"63","hashOfConfig":"41"},{"size":10118,"mtime":1628083187169,"results":"64","hashOfConfig":"41"},{"size":6820,"mtime":1624897275857,"results":"65","hashOfConfig":"41"},{"size":4994,"mtime":1628157800926,"results":"66","hashOfConfig":"41"},{"size":8747,"mtime":1628063030136,"results":"67","hashOfConfig":"41"},{"size":3190,"mtime":1627894510273,"results":"68","hashOfConfig":"41"},{"size":8775,"mtime":1627997916229,"results":"69","hashOfConfig":"41"},{"size":8845,"mtime":1627997970917,"results":"70","hashOfConfig":"41"},{"size":8591,"mtime":1627997898601,"results":"71","hashOfConfig":"41"},{"size":8490,"mtime":1627997931856,"results":"72","hashOfConfig":"41"},{"size":1164,"mtime":1626429358383,"results":"73","hashOfConfig":"41"},{"size":1481,"mtime":1627913427725,"results":"74","hashOfConfig":"41"},{"size":5313,"mtime":1628082148027,"results":"75","hashOfConfig":"41"},{"size":8884,"mtime":1627482610723,"results":"76","hashOfConfig":"41"},{"size":304,"mtime":1626982521069,"results":"77","hashOfConfig":"41"},{"size":132,"mtime":1628263769192,"results":"78","hashOfConfig":"41"},{"size":4467,"mtime":1628498792988,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"175tmnb",{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"82"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"82"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"82"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"82"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"82"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"82"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"82"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"82"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js",[],["184","185"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js",["186"],"import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Create from \"./Pages/Create\";\r\nimport DashBoard from \"./Pages/DashBoard\";\r\nimport Manage from \"./Pages/Manage\";\r\nimport Settings from \"./Pages/Settings\";\r\nimport Layout from \"./Components/Layout\";\r\nimport { createMuiTheme, ThemeProvider, Typography } from \"@material-ui/core\";\r\nimport Modify from \"./Pages/Modify\";\r\nimport ViewItem from \"./Pages/ViewItem\";\r\nimport TestSSA from \"./Pages/Automator\";\r\n\r\nconst theme = createMuiTheme({\r\n    typography: {\r\n        fontFamily: \"Quicksand\",\r\n        fontWeightLight: 400,\r\n        fontWeightRegular: 500,\r\n        fontWeightMedium: 600,\r\n        fontWeightBold: 1000,\r\n    },\r\n});\r\n\r\nfunction App() {\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <Router>\r\n                <Layout>\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <DashBoard />\r\n                        </Route>\r\n\r\n                        <Route path=\"/create\">\r\n                            <Create />\r\n                        </Route>\r\n\r\n                        <Route path=\"/manage\">\r\n                            <Manage />\r\n                        </Route>\r\n\r\n                        <Route path=\"/settings\">\r\n                            <Settings />\r\n                        </Route>\r\n                        <Route path=\"/modify\">\r\n                            <Modify />\r\n                        </Route>\r\n                        <Route path=\"/view\">\r\n                            <ViewItem />\r\n                        </Route>\r\n                        <Route path=\"/Automator\">\r\n                            <TestSSA />\r\n                        </Route>\r\n                    </Switch>\r\n                </Layout>\r\n            </Router>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js",["187","188","189","190"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js",["191","192","193","194","195","196"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js",["197"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js",["198","199","200"],"import {\r\n    Button,\r\n    Container,\r\n    makeStyles,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Grid,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n    Autorenew,\r\n    Code,\r\n    Description,\r\n    Http,\r\n    KeyboardArrowRight,\r\n    Save,\r\n    Search,\r\n    SettingsSharp,\r\n    Storage,\r\n    Web,\r\n    AccountTree,\r\n    WrapText,\r\n    CallSplit,\r\n} from \"@material-ui/icons\";\r\nimport Service from \"./Actions/Service\";\r\nimport Database from \"./Actions/Database\";\r\nimport Process from \"./Actions/Process\";\r\nimport ARScript from \"./Actions/ARScript\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SpeedDial from \"@material-ui/lab/SpeedDial\";\r\nimport { SpeedDialAction, SpeedDialIcon } from \"@material-ui/lab\";\r\nimport ActionContext from \"../Context/ActionContext\";\r\nimport Link from \"./Actions/Link\";\r\nimport WebAction from \"./Actions/WebAction\";\r\nimport Command from \"./Actions/Command\";\r\nimport Log from \"./Actions/Log\";\r\nimport PoolIIS from \"./Actions/IIS\";\r\nimport Rename from \"./Actions/Rename\";\r\nimport Disk from \"./Actions/Disk\";\r\nimport Condition from \"./Actions/Condition\";\r\n\r\nconst cardWidth = 850;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // width : cardWidth,\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}));\r\nconst ARCard = ({\r\n    name,\r\n    actions,\r\n    SetActions,\r\n    type,\r\n    AddServer,\r\n    generateJson,\r\n    verification,\r\n    informations,\r\n    setInformations,\r\n    titleError,\r\n    cardType,\r\n}) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [index, setIndex] = useState(actions.length);\r\n    const [pingedServers, setPingedServers] = useState([{ name: \"sw11203\", joined: false }]);\r\n    const [errorText, setErrorText] = useState(\"\");\r\n\r\n    var second = actions.length;\r\n\r\n    useEffect(() => {}, []);\r\n\r\n    const addAction = (_type) => {\r\n        const newState = [\r\n            ...actions,\r\n            {\r\n                index: second,\r\n                type: _type,\r\n                action: type,\r\n                informations: {},\r\n                options: {\r\n                    block: true,\r\n                    prod: true,\r\n                    hprod: true,\r\n                    inte: true,\r\n                    dev: true,\r\n                },\r\n            },\r\n        ];\r\n        console.log(\"new state \", newState);\r\n\r\n        SetActions(newState);\r\n        setIndex(index + 1);\r\n        second++;\r\n    };\r\n\r\n    const deleteAction = (actionID) => {\r\n        console.log(\r\n            \"deleting \",\r\n            actions.filter((action) => action.index === actionID)\r\n        );\r\n\r\n        const newState = actions.filter((action) => action.index !== actionID);\r\n        var i;\r\n\r\n        for (i = 0; i < newState.length; i++) {\r\n            newState[i].index = i;\r\n        }\r\n\r\n        setIndex(newState.length);\r\n\r\n        //newState.map(action => console.log(action))\r\n\r\n        SetActions(newState);\r\n\r\n        //console.log(\"index \", index)\r\n    };\r\n\r\n    const duplicateAction = (actionID) => {\r\n        var actionToDuplicateIndex = actionID;\r\n        var clone = actions[actionToDuplicateIndex];\r\n\r\n        console.log(\r\n            \"action to duplicate\",\r\n            clone,\r\n            \"index \",\r\n            actionToDuplicateIndex,\r\n            \" actionId \",\r\n            actionID\r\n        );\r\n\r\n        var newClone = { ...clone, action: \"status\", duplicated: \"duplicated\" };\r\n        actionToDuplicateIndex = actionToDuplicateIndex + 1;\r\n        console.log(\"before splice \", actions);\r\n\r\n        actions.splice(actionToDuplicateIndex, 0, newClone);\r\n\r\n        console.log(\"new array \", actions);\r\n\r\n        for (var i = 0; i < actions.length; i++) {\r\n            actions[i].index = i;\r\n            //console.log(actions[i].server)\r\n        }\r\n        console.log(\"after array \", actions);\r\n\r\n        //newState.map(action => console.log(action))\r\n\r\n        SetActions(actions);\r\n        setIndex(actions.length);\r\n    };\r\n\r\n    const saveData = (object) => {\r\n        const result = actions.filter((e) => e.index === object.index);\r\n\r\n        if (result.length > 0) {\r\n            const index = actions.findIndex((e) => e.index === object.index);\r\n\r\n            console.log(\"Changement\", actions[index]);\r\n\r\n            actions.splice(index, 1, object);\r\n\r\n            SetActions(actions);\r\n        } else {\r\n            console.log(\"Nouvelle entrée\");\r\n            const newState = [...actions, object];\r\n            SetActions(newState);\r\n        }\r\n    };\r\n\r\n    const validateDocument = () => {\r\n        if (actions.length > 0) {\r\n            !titleError\r\n                ? setInformations({ ...informations, open: true })\r\n                : setErrorText(\"Veuillez changer le nom du SSA SVP\");\r\n        }\r\n    };\r\n\r\n    const iconsAction = [\r\n        {\r\n            icon: <Http />,\r\n            name: \"Vérifier Url\",\r\n            type: \"link\",\r\n            action: () => addAction(\"link\"),\r\n        },\r\n        {\r\n            icon: <Web />,\r\n            name: \"Action Web\",\r\n            type: \"webAction\",\r\n            action: () => addAction(\"webAction\"),\r\n        },\r\n        {\r\n            icon: <CallSplit />,\r\n            name: \"Créer une condition\",\r\n            type: \"condition\",\r\n            action: () => addAction(\"condition\"),\r\n        },\r\n        {\r\n            icon: <SettingsSharp />,\r\n            name: \"Service\",\r\n            type: \"service\",\r\n            action: () => addAction(\"service\"),\r\n        },\r\n        {\r\n            icon: <Autorenew />,\r\n            name: \"Processus\",\r\n            type: \"process\",\r\n            action: () => addAction(\"process\"),\r\n        },\r\n        {\r\n            icon: <Description />,\r\n            name: \"Script\",\r\n            type: \"script\",\r\n            action: () => addAction(\"script\"),\r\n        },\r\n        {\r\n            icon: <Storage />,\r\n            name: \"Base de données\",\r\n            type: \"database\",\r\n            action: () => addAction(\"database\"),\r\n        },\r\n        {\r\n            icon: <Code />,\r\n            name: \"Commande\",\r\n            type: \"command\",\r\n            action: () => addAction(\"command\"),\r\n        },\r\n        {\r\n            icon: <Search />,\r\n            name: \"Rechercher un Log\",\r\n            type: \"log\",\r\n            action: () => addAction(\"log\"),\r\n        },\r\n        {\r\n            icon: <Save />,\r\n            name: \"Vérifier Disque(s)\",\r\n            type: \"disk\",\r\n            action: () => addAction(\"disk\"),\r\n        },\r\n        {\r\n            icon: <AccountTree />,\r\n            name: \"Pool IIS\",\r\n            type: \"IIS\",\r\n            action: () => addAction(\"IIS\"),\r\n        },\r\n        {\r\n            icon: <WrapText />,\r\n            name: \"Renommer un fichier\",\r\n            type: \"rename\",\r\n            action: () => addAction(\"rename\"),\r\n        },\r\n    ];\r\n    return (\r\n        <Container>\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    title={name}\r\n                    subheader=\"Windows\"\r\n                    action={\r\n                        (cardType === \"POS\" || cardType === \"STOP\") && (\r\n                            <Button\r\n                                color=\"secondary\"\r\n                                variant=\"contained\"\r\n                                onClick={validateDocument}\r\n                                endIcon={<KeyboardArrowRight />}\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        )\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    {titleError ? (\r\n                        <Typography style={{ color: \"red\", marginTop: 10 }}>{errorText}</Typography>\r\n                    ) : null}\r\n                    <ActionContext.Provider\r\n                        value={{\r\n                            actions,\r\n                            deleteAction,\r\n                            duplicateAction,\r\n                            saveData,\r\n                            AddServer,\r\n                            setPingedServers,\r\n                            pingedServers,\r\n                            verification,\r\n                            cardType,\r\n                        }}\r\n                    >\r\n                        <form noValidate autoComplete=\"on\">\r\n                            {actions.map((item, index) =>\r\n                                item.type === \"service\" ? (\r\n                                    <Service\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"script\" ? (\r\n                                    <ARScript key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"database\" ? (\r\n                                    <Database\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"process\" ? (\r\n                                    <Process\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"link\" ? (\r\n                                    <Link key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"webAction\" ? (\r\n                                    <WebAction key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"command\" ? (\r\n                                    <Command key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"log\" ? (\r\n                                    <Log\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"IIS\" ? (\r\n                                    <PoolIIS\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"rename\" ? (\r\n                                    <Rename\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"disk\" ? (\r\n                                    <Disk key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"condition\" ? (\r\n                                    <Condition\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        verified={actions[index - 1]}\r\n                                    />\r\n                                ) : null\r\n                            )}\r\n                            <Grid\r\n                                container\r\n                                direction=\"row\"\r\n                                justify=\"space-between\"\r\n                                style={{ marginTop: 20 }}\r\n                            >\r\n                                <Grid item>\r\n                                    <SpeedDial\r\n                                        ariaLabel=\"SpeedDial\"\r\n                                        icon={<SpeedDialIcon onClick={() => setOpen(!open)} />}\r\n                                        open={open}\r\n                                        direction=\"right\"\r\n                                        onMouseEnter={() => setOpen(true)}\r\n                                    >\r\n                                        {\r\n                                            //si c'est une POS donc status\r\n                                            type !== \"status\"\r\n                                                ? iconsAction\r\n                                                      .filter(\r\n                                                          (icon) =>\r\n                                                              icon.type != \"webAction\" &&\r\n                                                              icon.type != \"condition\"\r\n                                                      )\r\n                                                      .map((action) => (\r\n                                                          <SpeedDialAction\r\n                                                              key={action.name}\r\n                                                              icon={action.icon}\r\n                                                              tooltipTitle={action.name}\r\n                                                              tooltipPlacement=\"down\"\r\n                                                              onClick={action.action}\r\n                                                          />\r\n                                                      ))\r\n                                                : iconsAction.map((action) => (\r\n                                                      <SpeedDialAction\r\n                                                          key={action.name}\r\n                                                          icon={action.icon}\r\n                                                          tooltipTitle={action.name}\r\n                                                          tooltipPlacement=\"down\"\r\n                                                          onClick={action.action}\r\n                                                      />\r\n                                                  ))\r\n                                        }\r\n                                    </SpeedDial>\r\n                                </Grid>\r\n                                <Typography variant=\"caption\" style={{ marginTop: 10 }}>\r\n                                    {informations.prenom} {informations.nom}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </form>\r\n                    </ActionContext.Provider>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ARCard;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js",["201","202","203","204","205"],"import { Box, Button, Drawer, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { DataGrid, GridOverlay } from \"@material-ui/data-grid\";\r\nimport { Add, Delete } from \"@material-ui/icons\";\r\n\r\nconst drawerWidthRight = 280;\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return {\r\n        root: {},\r\n        navRight: {\r\n            width: drawerWidthRight,\r\n            //display:'none'\r\n        },\r\n        drawerPaperRight: {\r\n            width: drawerWidthRight,\r\n            backgroundColor: \"#FFFFF\",\r\n            borderLeft: \"0px\",\r\n        },\r\n    };\r\n});\r\n\r\nconst RightNav = ({ ServerRow, saveRows }) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [selectedRow, SetSelectedRow] = useState();\r\n    const columns = [\r\n        {\r\n            field: \"prod\",\r\n            headerName: \"prod\",\r\n            width: 90,\r\n            editable: true,\r\n            sortable: false,\r\n        },\r\n        {\r\n            field: \"hprod\",\r\n            headerName: \"hprod\",\r\n            width: 90,\r\n            editable: true,\r\n            sortable: false,\r\n        },\r\n        {\r\n            field: \"dev\",\r\n            headerName: \"IPP2\",\r\n            width: 90,\r\n            editable: true,\r\n            sortable: false,\r\n        },\r\n    ];\r\n\r\n    /*\r\n    useEffect(() => {\r\n      const timer = setInterval(() => {\r\n        setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 20));\r\n      }, 400);\r\n  \r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }, []);\r\n    */\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCellchange = (cell) => {\r\n        console.log(\"Changing the \", cell);\r\n\r\n        const editedServers = ServerRow.map((row) => {\r\n            if (row.id === cell.id) {\r\n                row = { ...row, [cell.field]: cell.props.value };\r\n                return row;\r\n            }\r\n            return row;\r\n        });\r\n        saveRows(editedServers);\r\n        console.log(\"edited \", editedServers);\r\n    };\r\n\r\n    const addRow = () => {\r\n        const newRow = {\r\n            id: ServerRow.length,\r\n            prod: \"definir\",\r\n            hprod: \"\",\r\n            dev: \"\",\r\n            name: \"\",\r\n            auto: false,\r\n        };\r\n\r\n        saveRows([...ServerRow, newRow]);\r\n        console.log(\"new row\");\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        const newstate = ServerRow.filter((row) => row.id !== selectedRow);\r\n        console.log(\"New tab \" + newstate);\r\n        selectedRow != undefined && saveRows(newstate);\r\n        SetSelectedRow(undefined);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Drawer\r\n                elevation={0}\r\n                variant=\"permanent\"\r\n                anchor=\"right\"\r\n                classes={{ paper: classes.drawerPaperRight }}\r\n                className={classes.navRight}\r\n            >\r\n                <Box>\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>Variables</Typography>\r\n                    </Box>\r\n\r\n                    <div style={{ height: 300, width: \"100%\" }}>\r\n                        <DataGrid\r\n                            rows={ServerRow}\r\n                            columns={columns}\r\n                            hideFooter\r\n                            disableColumnMenu\r\n                            rowHeight={40}\r\n                            headerHeight={40}\r\n                            onEditCellChangeCommitted={(cell) => handleCellchange(cell)}\r\n                            onRowClick={(e) => SetSelectedRow(e.id)}\r\n                            onCellClick={(e) => console.log(\"Cell \", e)}\r\n                        />\r\n                    </div>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" mt={1} m={2}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            endIcon={<Add />}\r\n                            onClick={addRow}\r\n                        >\r\n                            Ajouter\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            endIcon={<Delete />}\r\n                            onClick={deleteRow}\r\n                            disabled={selectedRow == undefined}\r\n                        >\r\n                            Supprimer\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n\r\n                <Box>\r\n                    {/**\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            Vérification Active\r\n                        </Typography>\r\n                    </Box>\r\n                    \r\n                    <Grid container spacing={1} alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\">\r\n                                <Computer color=\"primary\" />\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Ping : SW11203</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Divider style={{ margin: \"10px \" }} />\r\n                    <Grid container alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\" >\r\n                                <Settings color=\"primary\" />\r\n\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Service : BITS</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                     */}\r\n                </Box>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RightNav;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js",["206"],"import { Button, CardActionArea, makeStyles } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\nimport { Avatar, Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { useHistory } from \"react-router\";\r\nimport ENV from \"../../Env\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n        flexGrow: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n}));\r\nconst ListSSA = ({ ssa, fromExcel, setLoading }) => {\r\n    const url = ENV.SERVER_API_URI;\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        //console.log(ssa)\r\n    });\r\n\r\n    const visitPOS = (ssa) => {\r\n        const futureState = fromExcel ? ssa : { name: ssa.name, id: ssa._id };\r\n        history.push({\r\n            pathname: \"/create\",\r\n            state: futureState,\r\n            fromExcel: fromExcel,\r\n        });\r\n    };\r\n\r\n    const testSSA = (ssa) => {};\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root} elevation={0.5}>\r\n                <CardActionArea\r\n                    onClick={() => {\r\n                        setLoading(true);\r\n                        visitPOS(ssa);\r\n                    }}\r\n                >\r\n                    <CardContent>\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item xs={1} md={1} sm={1}>\r\n                                <Avatar>\r\n                                    {ssa.name.split(\"_\").length > 1\r\n                                        ? ssa.name.split(\"_\")[1][0].toUpperCase()\r\n                                        : ssa.name[0].toUpperCase()}\r\n                                </Avatar>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={3} md={3} sm={3}>\r\n                                <Typography> {ssa.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={1} sm={1}>\r\n                                <Typography>\r\n                                    {\" \"}\r\n                                    {ssa.Arret.length} - {ssa.Relance.length}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}>\r\n                                <Typography> {ssa.auteur}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}>\r\n                                <Typography> {new Date(ssa.createdAt).toLocaleString()}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={3} sm={2}>\r\n                                <Grid\r\n                                    spacing={1}\r\n                                    container\r\n                                    justify=\"space-around\"\r\n                                    alignContent=\"center\"\r\n                                >\r\n                                    <Grid item md={5}>\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            color=\"default\"\r\n                                            onClick={() => visitPOS(ssa)}\r\n                                        >\r\n                                            PARPRE/POS\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item md={4}>\r\n                                        {!fromExcel ? (\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => testSSA(ssa)}\r\n                                            >\r\n                                                Tester\r\n                                            </Button>\r\n                                        ) : (\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => testSSA(ssa)}\r\n                                            >\r\n                                                Importer\r\n                                            </Button>\r\n                                        )}\r\n                                    </Grid>\r\n                                    <Grid item md={3}>\r\n                                        <Button>\r\n                                            <Delete color=\"secondary\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListSSA;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js",["207"],"import { Box, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport { SupervisedUserCircle } from \"@material-ui/icons\";\r\n\r\n//Le nombre de ssa dans Céphée\r\nconst totalDocument = 728;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nconst DashboardCard = ({ name, icon, documentNumber }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Paper className={classes.root} elevation={1}>\r\n                <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box mr={1}>{icon}</Box>\r\n                    <Typography>{name}</Typography>\r\n                </Box>\r\n                <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Typography variant=\"h5\">\r\n                        {documentNumber} / {totalDocument}\r\n                    </Typography>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardCard;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js",["208","209","210","211","212","213"],"import {\r\n    Avatar,\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n    FormControlLabel,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Web } from \"@material-ui/icons\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport ClickDialog from \"../Creation/ClickDialog\";\r\nimport ConnectionDialog from \"../Creation/ConnectionDialog\";\r\nimport FormDialog from \"../Creation/FormDialog\";\r\nimport DisconnectDialog from \"../Creation/isconnectialog\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    dropDown: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst WebAction = ({ index, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [anchorEl, setAnchor] = useState(null);\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext);\r\n    const [state, setState] = useState(initialSTate);\r\n    const [actionType, setActionType] = useState(\"connection\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [informations, setInformations] = useState({});\r\n    const [optionDialog, setOptionDialog] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    const handleClick = (event) => {\r\n        setAnchor(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchor(null);\r\n    };\r\n    const reduire = () => {};\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        if (initialSTate.informations.type) {\r\n            console.log(\"action type \", initialSTate.informations.type);\r\n            setActionType(initialSTate.informations.type);\r\n        }\r\n        setInformations(initialSTate.informations);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n    const formatUrl = (url) => {\r\n        if (url.startsWith(\"http\")) {\r\n            console.log(\"url est bonne\");\r\n            return url;\r\n        } else {\r\n            console.log(\"error url\");\r\n            return \"http://\" + url;\r\n        }\r\n    };\r\n\r\n    const showDialog = () => {\r\n        setOpenDialog(true);\r\n    };\r\n\r\n    const closeDialog = () => {\r\n        setOpenDialog(false);\r\n    };\r\n\r\n    const saveInformations = () => {\r\n        if (state.url === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"webAction\",\r\n            url: state.url,\r\n            informations: {\r\n                ...informations,\r\n                navigator: informations.navigator || \"Chrome\",\r\n                navigatorMode: informations.navigatorMode || \"normal\",\r\n            },\r\n            options: options,\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\">\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Web color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item md={6} xl={6}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"url\"\r\n                            color=\"primary\"\r\n                            label=\"Lien\"\r\n                            value={state.url}\r\n                            onChange={(e) => setState({ ...state, url: e.target.value })}\r\n                            onBlur={() => {\r\n                                saveInformations();\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} xl={2}>\r\n                        <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                value={actionType}\r\n                                onChange={(e) => {\r\n                                    setActionType(e.target.value);\r\n                                    setInformations({ ...informations, type: e.target.value });\r\n                                    saveInformations();\r\n                                }}\r\n                            >\r\n                                <MenuItem value=\"connection\">Connexion</MenuItem>\r\n                                <MenuItem value=\"logOut\">Déconnexion</MenuItem>\r\n                                <MenuItem value=\"click\">Click</MenuItem>\r\n                                <MenuItem value=\"form\">Remplir champ(s)</MenuItem>\r\n                                <MenuItem value=\"verify\">Vérifier un contenu</MenuItem>\r\n                                <MenuItem value=\"visit\">Visite simple</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item md={2}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            {actionType === \"visit\" ? (\r\n                                <FormControlLabel\r\n                                    control={\r\n                                        <Checkbox\r\n                                            key=\"ScreenShot\"\r\n                                            name=\"ScreenShot\"\r\n                                            checked={informations.capture || true}\r\n                                            onClick={(e) => {\r\n                                                setInformations({\r\n                                                    capture: e.target.checked,\r\n                                                    type: actionType,\r\n                                                });\r\n                                                saveInformations();\r\n                                            }}\r\n                                        />\r\n                                    }\r\n                                    label=\"ScreenShot\"\r\n                                />\r\n                            ) : (\r\n                                <FormControl>\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={showDialog}\r\n                                    >\r\n                                        options\r\n                                    </Button>\r\n                                </FormControl>\r\n                            )}\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    {openDialog && actionType === \"connection\" ? (\r\n                        /**Dialog connexion */\r\n\r\n                        <ConnectionDialog\r\n                            informations={informations}\r\n                            setInformations={setInformations}\r\n                            closeDialog={closeDialog}\r\n                            openDialog={openDialog}\r\n                            saveInformations={saveInformations}\r\n                        />\r\n                    ) : actionType === \"logOut\" ? (\r\n                        /**Dialog deconnexion */\r\n                        <DisconnectDialog\r\n                            informations={informations}\r\n                            setInformations={setInformations}\r\n                            closeDialog={closeDialog}\r\n                            openDialog={openDialog}\r\n                            saveInformations={saveInformations}\r\n                        />\r\n                    ) : actionType === \"click\" ? (\r\n                        /**Dialog clicke */\r\n\r\n                        <ClickDialog\r\n                            informations={informations}\r\n                            setInformations={setInformations}\r\n                            closeDialog={closeDialog}\r\n                            openDialog={openDialog}\r\n                            saveInformations={saveInformations}\r\n                        />\r\n                    ) : /**Dialog remplir */\r\n                    actionType === \"form\" ? (\r\n                        <FormDialog\r\n                            informations={informations}\r\n                            setInformations={setInformations}\r\n                            closeDialog={closeDialog}\r\n                            openDialog={openDialog}\r\n                            saveInformations={saveInformations}\r\n                        />\r\n                    ) : (\r\n                        <FormDialog\r\n                            informations={informations}\r\n                            setInformations={setInformations}\r\n                            closeDialog={closeDialog}\r\n                            openDialog={openDialog}\r\n                            saveInformations={saveInformations}\r\n                        />\r\n                    )}\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />{\" \"}\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={optionDialog}\r\n                                    setOpenDialog={setOptionDialog}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default WebAction;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js",["214","215","216","217"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Http } from \"@material-ui/icons\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport ENV from \"../../Env\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    dropDown: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Link = ({ index, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext);\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [urlState, setUrlState] = useState(\"UP\");\r\n    const [navigationMode, setnavigationMode] = useState(\"normal\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [options, setOptions] = useState(initialSTate.options);\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n    }, []);\r\n    const formatUrl = (url) => {\r\n        if (url.startsWith(\"http\") || url.length < 4) {\r\n            //console.log(\"url est bonne\");\r\n            return url;\r\n        } else {\r\n            //console.log(\"error url\");\r\n            return \"http://\" + url;\r\n        }\r\n    };\r\n\r\n    const testConnection = async (e) => {\r\n        const formatedUrl = formatUrl(e.target.value);\r\n        setState({ ...state, url: formatedUrl });\r\n\r\n        if (e.target.value !== \"\") {\r\n            // console.log(\"accessing \", formatedUrl);\r\n\r\n            await fetch(`${ENV.SERVER_API_URI}/PARPRE/link?url=${formatedUrl}`)\r\n                .then((res) => res.json())\r\n                .then((result) => console.log(result.result))\r\n                .then(() => saveInformations());\r\n        }\r\n    };\r\n\r\n    const saveInformations = () => {\r\n        if (state.url === undefined) {\r\n            return;\r\n        }\r\n        saveData({\r\n            index: index,\r\n            type: \"link\",\r\n            url: state.url,\r\n            informations: {\r\n                urlState: urlState,\r\n                navigationMode: navigationMode,\r\n            },\r\n            options: { ...options, os: \"windows\" },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\">\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Http color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item md={6} xl={6}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"url\"\r\n                            value={state.url}\r\n                            color=\"primary\"\r\n                            label=\"Lien\"\r\n                            onChange={(e) => setState({ ...state, url: formatUrl(e.target.value) })}\r\n                            onBlur={(e) => {\r\n                                //testConnection(e);\r\n                                saveInformations();\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Etat du site</InputLabel>\r\n                            <Select\r\n                                value={urlState}\r\n                                onChange={(e) => setUrlState(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"Down\">Down</MenuItem>\r\n                                <MenuItem value=\"UP\">UP</MenuItem>\r\n                                <MenuItem value=\"whitePage\">Page blanche</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} xl={2}>\r\n                        <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Navigation</InputLabel>\r\n                            <Select\r\n                                value={navigationMode}\r\n                                onChange={(e) => setnavigationMode(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"Privée\">Privée</MenuItem>\r\n                                <MenuItem value=\"normal\">Normal</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Link;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js",["218","219","220","221","222"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Description } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport { testPath, testPing } from \"../Checker\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport PathField from \"../Fields/PathField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst ARScript = ({ index, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [path, setPath] = useState(\"\");\r\n    //true donc erreur donc rouge\r\n    const [scriptError, setScriptError] = useState(\"false\");\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(async () => {\r\n        setState(initialSTate);\r\n        setOptions({ ...options, os: \"windows\" });\r\n\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            verification && testPath(initialSTate.path, initialSTate.server, setScriptError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            verification && testPath(state.path, state.server, setScriptError);\r\n        }\r\n    }, [verification]);\r\n    const saveInformations = () => {\r\n        if (path === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n        saveData({\r\n            index: index,\r\n            type: \"script\",\r\n            server: state.server,\r\n            path: path,\r\n            options: options,\r\n\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n\r\n    const pathProps = {\r\n        index: index,\r\n        className: classes.fields,\r\n        serverError: serverError,\r\n        path: path != \"\" ? path : initialSTate.path,\r\n        type: \"Script\",\r\n        scriptError: scriptError,\r\n        server: state.server,\r\n        setScriptError: setScriptError,\r\n        setPath: setPath,\r\n        setScriptError: setScriptError,\r\n        saveInformations: saveInformations,\r\n        verification: verification,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item sm={1} md={1} xl={1}>\r\n                        <Box my=\"auto\" display=\"flex\" justifyContent=\"center\">\r\n                            <Description color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                                //serverError === false && checker.testPath(e.target.value,state.server,setScriptError)\r\n                            }}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            label={serverError ? \"Injoignable\" : \"Serveur\"}\r\n                            error={verification ? serverError : false}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={8} md={8} xl={8}>\r\n                        <PathField props={pathProps} />\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />{\" \"}\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ARScript;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js",["223","224","225","226"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Storage } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nconst Database = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [status, setStatus] = useState(type);\r\n    const [databaseType, setDatabaseType] = useState(\"MSSQL\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    //true donc erreur donc rouge\r\n    const [databaseError, setDatabaseError] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase());\r\n            setOptions(initialSTate.options);\r\n        }\r\n\r\n        initialSTate.databaseType !== undefined\r\n            ? setDatabaseType(initialSTate.databaseType)\r\n            : setDatabaseType(\"MSSQL\");\r\n    }, []);\r\n\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        let result;\r\n        if (status === \"status\") {\r\n            type === \"stop\" ? (result = \"stopped\") : (result = \"running\");\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"database\",\r\n            server: state.server,\r\n            name: state.name,\r\n            action: status,\r\n            databaseType: databaseType,\r\n            options: options,\r\n\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Storage color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            label=\"Serveur\"\r\n                            error={verification ? serverError : false}\r\n                            onChange={(e) => {\r\n                                setState({ ...state, server: e.target.value });\r\n                                e.target.value.toLocaleLowerCase().startsWith(\"sw\") ||\r\n                                e.target.value.length < 2\r\n                                    ? setDatabaseType(\"MSSQL\")\r\n                                    : setDatabaseType(\"Oracle\");\r\n                            }}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server &&\r\n                                        state.server.split(\"\").length > 20 &&\r\n                                        state.server.split(\"\").length < 65\r\n                                            ? 13\r\n                                            : state.server && state.server.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel\r\n                                error={\r\n                                    state.server &&\r\n                                    !state.server.startsWith(\"sw\") &&\r\n                                    state.server !== \"localhost\" &&\r\n                                    status === \"status\"\r\n                                }\r\n                            >\r\n                                {state.server &&\r\n                                !state.server.startsWith(\"sw\") &&\r\n                                state.server !== \"localhost\" &&\r\n                                status === \"status\"\r\n                                    ? \"Linux unsupported\"\r\n                                    : \"Action\"}\r\n                            </InputLabel>\r\n                            <Select\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                                error={\r\n                                    state.server &&\r\n                                    !state.server.startsWith(\"sw\") &&\r\n                                    state.server !== \"localhost\" &&\r\n                                    status === \"status\"\r\n                                }\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem\r\n                                    disabled={\r\n                                        state.server &&\r\n                                        !state.server.startsWith(\"sw\") &&\r\n                                        state.server !== \"localhost\"\r\n                                    }\r\n                                    value=\"status\"\r\n                                >\r\n                                    Status\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <TextField\r\n                            autoComplete=\"false\"\r\n                            className={classes.fields}\r\n                            value={state.name}\r\n                            id=\"DBName\"\r\n                            color=\"primary\"\r\n                            label={\r\n                                databaseError\r\n                                    ? \"Instance non retrouvée\"\r\n                                    : serverError && state.name !== \"\"\r\n                                    ? \"Instance non testée\"\r\n                                    : \"Instance\"\r\n                            }\r\n                            error={databaseError}\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select\r\n                                value={databaseType}\r\n                                onChange={(e) => setDatabaseType(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"MSSQL\">MSSQL</MenuItem>\r\n                                <MenuItem value=\"MONGODB\">MONGODB</MenuItem>\r\n                                <MenuItem value=\"Oracle\">Oracle</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Database;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js",["227","228"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Autorenew } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Process = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState(initialSTate);\r\n    const [status, setStatus] = useState(initialSTate.action);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n        setOptions({ ...options, os: \"windows\" });\r\n\r\n        setStatus(initialSTate.action);\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"process\",\r\n            server: state.server,\r\n            name: state.name,\r\n            action: status,\r\n            options: options,\r\n\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Autorenew color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\">Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} md={6} xl={6}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"processus\"\r\n                            value={state.name}\r\n                            color=\"primary\"\r\n                            label=\"Processus\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Process;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js",["229","230"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js",["231"],"import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport {  Comment, Delete, FileCopy, MoreVert } from \"@material-ui/icons\";\r\nimport {  useState } from \"react\";\r\n\r\nconst OptionMenu = ({index,deleteAction,duplicateAction, setOpenDialog}) => {\r\n\r\n    const [anchorEl, setAnchor] = useState(null)\r\n\r\n    const handleClick = (event) =>{\r\n        setAnchor(event.currentTarget)\r\n    }\r\n\r\n    const handleClose= () => {\r\n        setAnchor(null)\r\n    }\r\n\r\n    const showDialog = () =>{\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () =>{\r\n        setOpenDialog(false);\r\n    }\r\n    \r\n\r\n    return ( \r\n        <div>\r\n            <IconButton onClick={handleClick}>\r\n                <MoreVert />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n\r\n                <MenuItem onClick={() => {\r\n\r\n                    deleteAction(index)\r\n                    setAnchor(null)\r\n                    \r\n                    }} >\r\n                    \r\n                    <Delete />Supprimer\r\n                \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {\r\n                        \r\n                        handleClose()\r\n                        duplicateAction(index)\r\n                    }\r\n                } \r\n                >\r\n                    <FileCopy /> Dupliquer\r\n                        \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {showDialog(); handleClose()}} >\r\n                    <Comment /> Options\r\n\r\n                </MenuItem>\r\n            </Menu>\r\n            \r\n\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default OptionMenu;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js",["232"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, Link, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst DisconnectDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"logOut\" })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Déconnexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser le lien de déconnection ou le sélecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Link />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOut}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"logout\"\r\n                                        label=\"lien de déconnexion\"\r\n                                        autoComplete={false}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, logOut: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOutSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"logOut-selector\"\r\n                                        label=\"ou sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, logOutSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default DisconnectDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js",["233"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, IconButton, TextField } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst FormDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({...informations, type:\"form\"})\r\n        console.log(\"updated de dialog form\")\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Remplir un ou des champs </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser le lien de déconnection ou le sélecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.field}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        label=\"Valeur\"\r\n                                        autoComplete={true}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, field: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.fieldSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        label=\"sélecteur\"\r\n                                        autoComplete\r\n                                        onChange={(e) => (setInformations({ ...informations, fieldSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <IconButton>\r\n                                <Add />\r\n                            </IconButton>\r\n\r\n                        </Box>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js",["234","235","236"],"import {\r\n    Button,\r\n    Checkbox,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Divider,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Select,\r\n    Slider,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { FormControl } from \"@material-ui/core\";\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst OptionDialog = ({ options, saveInfos, setOptions, openDialog, setOpenDialog }) => {\r\n    useEffect(() => {\r\n        setOptions({ ...options, timeOut: timeOut });\r\n    }, []);\r\n\r\n    const [block, setBlock] = useState(true);\r\n    const [timeOut, setTimeOut] = useState(0);\r\n    const marks = [\r\n        {\r\n            value: 0,\r\n            label: \"0 s\",\r\n        },\r\n        {\r\n            value: 5,\r\n            label: \"5 s\",\r\n        },\r\n        {\r\n            value: 10,\r\n            label: \"10 s\",\r\n        },\r\n        {\r\n            value: 20,\r\n            label: \"20 s\",\r\n        },\r\n        {\r\n            value: 30,\r\n            label: \"30 s\",\r\n        },\r\n        {\r\n            value: 40,\r\n            label: \"40 s\",\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={() => {\r\n                    setOpenDialog(false);\r\n                    saveInfos();\r\n                }}\r\n                fullWidth\r\n            >\r\n                <DialogTitle id=\"dialog-option\">Options </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Personnaliser votre éxécution en fonction des environnements.\r\n                    </DialogContentText>\r\n                    <Grid container spacing={2} direction=\"column\">\r\n                        <Grid item>\r\n                            <Grid container>\r\n                                <Grid item>\r\n                                    <Typography>Environnement :</Typography>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <FormGroup row>\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    key=\"prod\"\r\n                                                    name=\"prod\"\r\n                                                    checked={options.prod}\r\n                                                    onClick={(e) =>\r\n                                                        setOptions({\r\n                                                            ...options,\r\n                                                            prod: e.target.checked,\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Production\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    key=\"hprod\"\r\n                                                    name=\"hprod\"\r\n                                                    checked={options.hprod}\r\n                                                    onClick={(e) =>\r\n                                                        setOptions({\r\n                                                            ...options,\r\n                                                            hprod: e.target.checked,\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Validation\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    key=\"prod\"\r\n                                                    name=\"prod\"\r\n                                                    checked={options.inte}\r\n                                                    onClick={(e) =>\r\n                                                        setOptions({\r\n                                                            ...options,\r\n                                                            inte: e.target.checked,\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Intégration\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={\r\n                                                <Checkbox\r\n                                                    key=\"prod\"\r\n                                                    name=\"prod\"\r\n                                                    checked={options.dev}\r\n                                                    onClick={(e) =>\r\n                                                        setOptions({\r\n                                                            ...options,\r\n                                                            dev: e.target.checked,\r\n                                                        })\r\n                                                    }\r\n                                                />\r\n                                            }\r\n                                            label=\"Développement\"\r\n                                        />\r\n                                    </FormGroup>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Divider orientation=\"horizontal\" light />\r\n\r\n                        <Grid item>\r\n                            <Grid container alignItems=\"flex-end\" direction=\"row\" spacing={2}>\r\n                                <Grid item md={6}>\r\n                                    <Typography>Systéme d'exploitation</Typography>\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <FormControl style={{ width: \"100%\" }}>\r\n                                        <InputLabel>OS</InputLabel>\r\n\r\n                                        <Select\r\n                                            value={options.os || \"null\"}\r\n                                            label=\"OS\"\r\n                                            fullWidth\r\n                                            onChange={(e) => {\r\n                                                setOptions({ ...options, os: e.target.value });\r\n                                            }}\r\n                                        >\r\n                                            <MenuItem value=\"linux\">Linux</MenuItem>\r\n                                            <MenuItem value=\"windows\">Windows</MenuItem>\r\n                                            <MenuItem value=\"null\">Non défini</MenuItem>\r\n                                        </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider orientation=\"horizontal\" light style={{ marginTop: 10 }} />\r\n\r\n                        <Grid item>\r\n                            <Grid container alignItems=\"center\" direction=\"row\" spacing={2}>\r\n                                <Grid item md={6}>\r\n                                    <Typography>Sleep :</Typography>\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <Slider\r\n                                            defaultValue={0}\r\n                                            value={timeOut}\r\n                                            aria-labelledby=\"continuous-slider\"\r\n                                            max={40}\r\n                                            //step={2}\r\n                                            marks={marks}\r\n                                            onChange={(e, value) => setTimeOut(value)}\r\n                                        />\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        <Divider orientation=\"horizontal\" light />\r\n\r\n                        <Grid item>\r\n                            <Grid container alignItems=\"center\" direction=\"row\" spacing={2}>\r\n                                <Grid item md={6}>\r\n                                    <Typography>Resultat attendu :</Typography>\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <TextField\r\n                                        label=\"Résultat\"\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                    ></TextField>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button>Confirmer</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OptionDialog;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js",["237"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\r\nimport { AccountCircle, ArrowRight, Lock } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n\r\nconst ConnectionDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"connection\" })\r\n        console.log(\"updated de dialog\")\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title' >Connexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\"\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <AccountCircle />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.login}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"login\"\r\n                                        label=\"Login\"\r\n                                        onChange={(e) => (setInformations({ ...informations, login: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.loginSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"login-selector\"\r\n                                        label=\"sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, loginSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Lock />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        value={informations.password}\r\n                                        margin=\"dense\"\r\n                                        id=\"password\"\r\n                                        label=\"Mot de passe\"\r\n                                        type=\"password\"\r\n                                        onChange={(e) => (setInformations({ ...informations, password: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.passwordSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"password-selector\"\r\n                                        label=\"sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, passwordSelector: e.target.value }))}\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Box>\r\n\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth >\r\n                                    <InputLabel>Navigateur</InputLabel>\r\n                                    <Select value={informations.navigator || \"Chrome\"} onChange={(e) => setInformations({ ...informations, navigator: e.target.value })}>\r\n                                        <MenuItem value=\"Chrome\" >Chrome</MenuItem>\r\n                                        <MenuItem value=\"Firefox\">Firefox</MenuItem>\r\n                                        <MenuItem value=\"Edge\">Edge</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel>Mode de Navigation</InputLabel>\r\n                                    <Select value={informations.navigatorMode || \"normal\"} onChange={(e) => (setInformations({ ...informations, navigatorMode: e.target.value }))}>\r\n                                        <MenuItem value=\"normal\" >Normal</MenuItem>\r\n                                        <MenuItem value=\"private\">privé</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConnectionDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js",["238"],"import {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Grid,\r\n    TextField,\r\n} from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ClickDialog = ({\r\n    informations,\r\n    setInformations,\r\n    saveInformations,\r\n    openDialog,\r\n    closeDialog,\r\n}) => {\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"click\" });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Dialog open={openDialog} onClose={closeDialog} fullWidth onBlur={saveInformations}>\r\n                <DialogTitle id=\"dialog-title\">Effectuer un Click </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à\r\n                        automatiser, Inspecter\" puis click droit sur l'élément html et \"copy\r\n                        selector\". Ici préciser les coordonnées ou le sélecteur.\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid container item spacing={2}>\r\n                                    <Box display=\"flex\" justifyContent=\"inline-block\">\r\n                                        <TextField\r\n                                            value={informations.x}\r\n                                            variant=\"outlined\"\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-x\"\r\n                                            label=\"coordonnées X\"\r\n                                            autoComplete={false}\r\n                                            onChange={(e) =>\r\n                                                setInformations({\r\n                                                    ...informations,\r\n                                                    x: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                        <TextField\r\n                                            value={informations.y}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-y\"\r\n                                            label=\"coordonnées Y\"\r\n                                            autoComplete={false}\r\n                                            onChange={(e) =>\r\n                                                setInformations({\r\n                                                    ...informations,\r\n                                                    y: e.target.value,\r\n                                                })\r\n                                            }\r\n                                        />\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item>\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.clickSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"click-selector\"\r\n                                        label=\"Ou selecteur\"\r\n                                        onChange={(e) =>\r\n                                            setInformations({\r\n                                                ...informations,\r\n                                                clickSelector: e.target.value,\r\n                                            })\r\n                                        }\r\n                                        autoFocus\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button\r\n                        onclick={() => {\r\n                            closeDialog();\r\n                            saveInformations();\r\n                        }}\r\n                    >\r\n                        Confirmer\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ClickDialog;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js",["239","240","241","242"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Code } from \"@material-ui/icons\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        //marginRight:theme.spacing(2),\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nconst Command = ({ index, initialSTate }) => {\r\n    //css\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    //l'état du server\r\n    const [pingState, setPingState] = useState(\"ko\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n        }\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n        }\r\n    }, [verification]);\r\n\r\n    //context pour sauvegarder l'état dans le parent\r\n\r\n    const saveInformations = () => {\r\n        if (state.server === undefined || state.name === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"command\",\r\n            server: state.server,\r\n            name: state.name,\r\n            login: state.login,\r\n            result: state.result,\r\n            options: options,\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Code color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.server}\r\n                            id={`server- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Serveur\"\r\n                            error={verification ? serverError : false}\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server &&\r\n                                        state.server.split(\"\").length > 20 &&\r\n                                        state.server.split(\"\").length < 65\r\n                                            ? 13\r\n                                            : state.server && state.server.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.login}\r\n                            id={`login- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Login\"\r\n                            onChange={(e) => setState({ ...state, login: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.login && state.login.split(\"\").length > 60\r\n                                            ? 14\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={5} xl={5}>\r\n                        <TextField\r\n                            value={state.name}\r\n                            className={classes.fields}\r\n                            id={`command- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Commande\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            error={state.name === \"\"}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name &&\r\n                                        state.name.split(\"\").length > 40 &&\r\n                                        state.name.split(\"\").length < 65\r\n                                            ? 14\r\n                                            : state.name && state.name.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.result}\r\n                            id={`result- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Résultat\"\r\n                            onChange={(e) => setState({ ...state, result: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={2} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Command;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Checker.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Log.js",["243","244","245","246","247","248"],"import {\r\n    Avatar,\r\n    Box,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Search } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPath, testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Log = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState(initialSTate);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n    const [scriptError, setScriptError] = useState(\"false\");\r\n    const [path, setPath] = useState(\"\");\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    useEffect(() => {\r\n        setOptions({ ...options, os: \"windows\" });\r\n\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            verification && testPath(initialSTate.path, initialSTate.server, setScriptError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            verification && testPath(state.path, initialSTate.server, setScriptError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"log\",\r\n            server: state.server,\r\n            name: state.name,\r\n            path: path,\r\n            options: options,\r\n\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Search color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4} sm={4} md={4} xl={4}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"log\"\r\n                            value={state.name}\r\n                            color=\"primary\"\r\n                            label=\"Log\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name &&\r\n                                        state.name.split(\"\").length > 35 &&\r\n                                        state.name.split(\"\").length < 50\r\n                                            ? 13\r\n                                            : state.name && state.name.split(\"\").length > 50\r\n                                            ? 12\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4} sm={4} md={4} xl={4}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, path: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification &&\r\n                                    testPath(e.target.value, state.server, setScriptError);\r\n                            }}\r\n                            value={state.path}\r\n                            className={classes.fields}\r\n                            id=\"Path\"\r\n                            color=\"primary\"\r\n                            label={\r\n                                scriptError === \"true\"\r\n                                    ? \"Fichier non retrouvé sur le serveur\"\r\n                                    : scriptError === \"dossier\"\r\n                                    ? \"Dossier ? \"\r\n                                    : \"Path\"\r\n                            }\r\n                            error={\r\n                                (state.path === \"\" ||\r\n                                    scriptError === \"true\" ||\r\n                                    scriptError === \"dossier\") &&\r\n                                verification\r\n                            }\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.path &&\r\n                                        state.path.split(\"\").length > 35 &&\r\n                                        state.path.split(\"\").length < 50\r\n                                            ? 13\r\n                                            : state.path && state.path.split(\"\").length > 50\r\n                                            ? 12\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Log;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\IIS.js",["249","250","251"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { AccountTree } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nconst PoolIIS = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [status, setStatus] = useState(type);\r\n    const [elementType, setElementType] = useState(\"pool\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    //true donc erreur donc rouge\r\n    const [elementError, setElementError] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions({ ...options, os: \"windows\" });\r\n\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase());\r\n            setOptions(initialSTate.options);\r\n        }\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"IIS\",\r\n            server: state.server,\r\n            name: state.name,\r\n            elementType: elementType,\r\n            action: status,\r\n            options: options,\r\n\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <AccountTree color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            label=\"Serveur\"\r\n                            error={verification ? serverError : false}\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server &&\r\n                                        state.server.split(\"\").length > 20 &&\r\n                                        state.server.split(\"\").length < 65\r\n                                            ? 13\r\n                                            : state.server && state.server.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\">Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <TextField\r\n                            autoComplete=\"false\"\r\n                            className={classes.fields}\r\n                            value={state.name}\r\n                            id=\"DBName\"\r\n                            color=\"primary\"\r\n                            label={\r\n                                elementError ? \"Pool ou Site Web non retrouvé\" : \"Pool ou Site Web\"\r\n                            }\r\n                            error={elementError}\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select\r\n                                value={elementType}\r\n                                onChange={(e) => setElementType(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"pool\">Pool</MenuItem>\r\n                                <MenuItem value=\"site\">Site</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PoolIIS;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Rename.js",["252","253","254","255","256","257","258"],"import {\r\n    Avatar,\r\n    Box,\r\n    Grid,\r\n    Inpabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { WrapText } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport PathField from \"../Fields/PathField\";\r\nimport { testPing, testPath } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Rename = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState(initialSTate);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n    const [scriptError, setScriptError] = useState(\"false\");\r\n    const [path, setPath] = useState(\"\");\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"rename\",\r\n            server: state.server,\r\n            name: state.name,\r\n            path: path,\r\n            options: options,\r\n\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <WrapText color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                testPing(e.target.value, setServerError);\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"fileName\"\r\n                            value={state.name}\r\n                            color=\"primary\"\r\n                            label=\"Nouveau Nom\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name &&\r\n                                        state.name.split(\"\").length > 35 &&\r\n                                        state.name.split(\"\").length < 50\r\n                                            ? 13\r\n                                            : state.name && state.name.split(\"\").length > 50\r\n                                            ? 12\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} md={6} xl={6}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, path: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification &&\r\n                                    testPath(e.target.value, state.server, setScriptError);\r\n                            }}\r\n                            value={state.path}\r\n                            className={classes.fields}\r\n                            id=\"Path\"\r\n                            color=\"primary\"\r\n                            label={\r\n                                scriptError === \"true\"\r\n                                    ? \"Fichier non retrouvé sur le serveur\"\r\n                                    : scriptError === \"dossier\"\r\n                                    ? \"Dossier ? \"\r\n                                    : \"Path\"\r\n                            }\r\n                            error={\r\n                                (state.path === \"\" ||\r\n                                    scriptError === \"true\" ||\r\n                                    scriptError === \"dossier\") &&\r\n                                verification\r\n                            }\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.path &&\r\n                                        state.path.split(\"\").length > 35 &&\r\n                                        state.path.split(\"\").length < 50\r\n                                            ? 13\r\n                                            : state.path && state.path.split(\"\").length > 50\r\n                                            ? 12\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rename;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Disk.js",["259","260","261","262","263","264","265","266","267"],"import {\r\n    Avatar,\r\n    Box,\r\n    Chip,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n    Button,\r\n    Menu,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Autorenew, Save, Search } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport checker, { testDisk, testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Disk = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n    const [diskError, setDiskError] = useState(false);\r\n    const [diskMenuAnchor, setDiskMenuAnchor] = useState(null);\r\n    const [diskSelection, setDiskSelection] = useState([]);\r\n    const openDiskMenu = Boolean(diskMenuAnchor);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions({ ...options, os: \"windows\" });\r\n\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testDisk(initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.server === undefined) {\r\n            return;\r\n        }\r\n        console.log(\"Saving Informations \", state.disks);\r\n        saveData({\r\n            index: index,\r\n            type: \"disk\",\r\n            server: state.server,\r\n            disks: state.disks,\r\n            options: options,\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        setDiskMenuAnchor(e.currentTarget);\r\n    };\r\n\r\n    const saveDisks = (e) => {\r\n        var notFound = e.target.value\r\n            .split(\" \")\r\n            .filter((element) => !diskSelection.includes(element.toUpperCase()));\r\n        // console.log(\"not found \", notFound.length);\r\n        notFound.length > 0 ? setDiskError(true) : setDiskError(false);\r\n\r\n        saveInformations();\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Save color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                setOptions({\r\n                                    ...options,\r\n                                    os: e.target.value.toLowerCase().startsWith(\"sw\")\r\n                                        ? \"windows\"\r\n                                        : \"linux\",\r\n                                });\r\n                                saveInformations();\r\n                                if (e.target.value) {\r\n                                    verification && testPing(e.target.value, setServerError);\r\n                                    verification && testDisk(e.target.value, setDiskSelection);\r\n                                }\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={3} md={3} xl={3}>\r\n                        <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleClick}>\r\n                            Voir les disques ({diskSelection.length})\r\n                        </Button>\r\n                        <Menu\r\n                            id=\"diskMenu\"\r\n                            open={openDiskMenu}\r\n                            anchorEl={diskMenuAnchor}\r\n                            onBlur={saveInformations}\r\n                            style={{ minWidth: 200 }}\r\n                            onClose={() => setDiskMenuAnchor(null)}\r\n                        >\r\n                            {diskSelection.length ? (\r\n                                diskSelection.map((disk, index) => (\r\n                                    <MenuItem key={index} style={{ minWidth: 200 }}>\r\n                                        {disk}\r\n                                    </MenuItem>\r\n                                ))\r\n                            ) : (\r\n                                <MenuItem> Veuillez renseigner le serveur SVP</MenuItem>\r\n                            )}\r\n                        </Menu>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5} sm={5} md={5} xl={5}>\r\n                        <TextField\r\n                            id=\"disksNames\"\r\n                            label={\r\n                                diskError\r\n                                    ? \"Erreur sur les disques, vérifier SVP\"\r\n                                    : \"Disques à verifier\"\r\n                            }\r\n                            value={state.disks}\r\n                            error={diskError}\r\n                            color=\"primary\"\r\n                            onChange={(e) => setState({ ...state, disks: e.target.value })}\r\n                            className={classes.fields}\r\n                            helperText=\"Lettres(s) uniquement, séparées par un espace ;)\"\r\n                            onBlur={saveDisks}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Disk;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\ServerField.js",["268"],"import { useEffect } from \"react\";\r\nimport { TextField } from \"@material-ui/core\"\r\nimport checker from \"../Checker\";\r\n\r\n\r\nconst ServerField = ({ NameClass, server, setServer, index, saveInformations, initialServer, serverError, setServerError,verification }) => {\r\n\r\n\r\n    useEffect(() => {\r\n        if (initialServer && (server === \"\" || server === undefined)&& verification) {\r\n            checker.ping(initialServer, setServerError)\r\n        }\r\n        if (server) {\r\n            //checker.ping(server, setServerError)\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                className={NameClass}\r\n                color=\"primary\"\r\n                value={server}\r\n                id={`server-${index}`}\r\n                error={serverError}\r\n                label={serverError ? 'Injoignable' : 'Serveur'}\r\n                onChange={(e) => setServer(e.target.value)}\r\n\r\n                onBlur={(e) => {\r\n                    saveInformations()\r\n                    checker.ping(e.target.value, setServerError)\r\n\r\n                }\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ServerField;",["269","270"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\PathField.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ValidationsDialog.js",["271"],"import {\r\n    Box,\r\n    Button,\r\n    CircularProgress,\r\n    Dialog,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { Done, Save } from \"@material-ui/icons\";\r\nimport { useState } from \"react\";\r\n\r\nconst ValidationDialog = ({ informations, setInformations, generateJson }) => {\r\n    const [generating, setGenerating] = useState(false);\r\n    const [buttonText, setButtonText] = useState(\"Début du traitement\");\r\n\r\n    const handleGenerate = async () => {\r\n        setGenerating(true);\r\n        setButtonText(\"Début du traitement\");\r\n        if (informations.nom !== \"\" && informations.prenom !== \"\") {\r\n            var state = await generateJson();\r\n            setButtonText(\"Enregistrement de la PARPRE\");\r\n            await new Promise((res) => setTimeout(res, 1500));\r\n            setButtonText(\"Enregistrement de la POS\");\r\n            await new Promise((res) => setTimeout(res, 1500));\r\n            setButtonText(\"Création du script d'arrét/Relance\");\r\n            await new Promise((res) => setTimeout(res, 2000));\r\n            setButtonText(\"Enregistré\");\r\n            //console.log(\"state \", state);\r\n            setGenerating(false);\r\n            await new Promise((res) => setTimeout(res, 3000));\r\n            setInformations({ ...informations, open: false });\r\n            //window.open(\"http://www.google.com\", \"__blank\", \"noopener\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={informations.open}\r\n                onClose={() => !generating && setInformations({ ...informations, open: false })}\r\n            >\r\n                <DialogTitle>Informations du Transformers</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Version Transformers : 2.0.4 --- EBO 01/01/2021\r\n                    </DialogContentText>\r\n\r\n                    <Typography style={{ marginBottom: 10, fontWeight: \"bold\" }}>Auteur</Typography>\r\n                    <Grid container spacing={2} direction=\"row\">\r\n                        <Grid item md={6}>\r\n                            <TextField\r\n                                label=\"Prénom\"\r\n                                fullWidth\r\n                                value={informations.prenom}\r\n                                color=\"primary\"\r\n                                onChange={(e) =>\r\n                                    setInformations({\r\n                                        ...informations,\r\n                                        prenom: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={6}>\r\n                            <TextField\r\n                                label=\"Nom\"\r\n                                value={informations.nom}\r\n                                fullWidth\r\n                                color=\"primary\"\r\n                                onChange={(e) =>\r\n                                    setInformations({\r\n                                        ...informations,\r\n                                        nom: e.target.value,\r\n                                    })\r\n                                }\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Box m={4} display=\"flex\" justifyContent=\"center\" flexDirection=\"row\">\r\n                        <Button\r\n                            color=\"primary\"\r\n                            disabled={\r\n                                informations.nom === \"\" || informations.prenom === \"\" || generating\r\n                            }\r\n                            variant=\"contained\"\r\n                            endIcon={<Save />}\r\n                            onClick={handleGenerate}\r\n                        >\r\n                            {generating ? \"En cours\" : \"Générer\"}\r\n                        </Button>\r\n                    </Box>\r\n                    {generating || buttonText === \"Enregistré\" ? (\r\n                        <Box m={4} display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n                            <Typography style={{ marginRight: 10 }}>{buttonText}</Typography>\r\n\r\n                            {buttonText === \"Enregistré\" ? (\r\n                                <Done color=\"primary\" />\r\n                            ) : (\r\n                                <CircularProgress size={20} />\r\n                            )}\r\n                        </Box>\r\n                    ) : (\r\n                        <Typography></Typography>\r\n                    )}\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\r\n                        <Typography style={{ fontSize: 10, marginRight: 10 }}>\r\n                            Sfr SN_2.0.4\r\n                        </Typography>\r\n                        <Typography>\r\n                            {new Date().toLocaleString()} - {informations.prenom} {informations.nom}\r\n                        </Typography>\r\n                    </Box>\r\n                </DialogContent>\r\n            </Dialog>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ValidationDialog;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Condition.js",["272","273","274","275","276","277","278","279"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { CallSplit } from \"@material-ui/icons\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Condition = ({ index, initialSTate, verified }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext);\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    //const [recieved, setRecieved] = useState({ ...verified });\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const [type, setType] = useState(\"If\");\r\n    const [action, setAction] = useState(\"\");\r\n    const [sortie, setSortie] = useState(\"\");\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        verified ? setAction(verified.type) : setAction(\"\");\r\n    }, []);\r\n\r\n    const saveInformations = () => {\r\n        if (state.out) {\r\n            saveData({\r\n                index: index,\r\n                type: \"condition\",\r\n                out: state.out,\r\n                type: type,\r\n            });\r\n        }\r\n    };\r\n\r\n    const ActionType = [\r\n        {\r\n            name: \"Vérifier Url\",\r\n            type: \"link\",\r\n            console: [\"ok\", \"ko\", \"PAGE_BLANCHE\"],\r\n        },\r\n        {\r\n            name: \"Action Web\",\r\n            type: \"webAction\",\r\n            console: [\"ok\", \"erreur\"],\r\n        },\r\n        {\r\n            name: \"Service\",\r\n            type: \"service\",\r\n            console: [\"running\", \"stopped\"],\r\n        },\r\n        {\r\n            name: \"Processus\",\r\n            type: \"process\",\r\n            console: [\"running\", \"stopped\"],\r\n        },\r\n        {\r\n            name: \"Script\",\r\n            type: \"script\",\r\n        },\r\n        {\r\n            name: \"Base de données\",\r\n            type: \"database\",\r\n            console: [\"ok\", \"ko\", \"autre erreur\"],\r\n        },\r\n        {\r\n            name: \"Commande\",\r\n            type: \"command\",\r\n        },\r\n        {\r\n            name: \"Log\",\r\n            type: \"log\",\r\n            console: [\"ok\", \"ko\"],\r\n        },\r\n        {\r\n            name: \"Disque\",\r\n            type: \"disk\",\r\n            console: [\"ok\", \"ko\"],\r\n        },\r\n        {\r\n            name: \"Pool ou Site IIS\",\r\n            type: \"IIS\",\r\n            console: [\"running\", \"stopped\"],\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div id={\"condition-\" + index} style={{ marginLeft: -15 }}>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item sm={1} md={1} xl={1}>\r\n                        <Box my=\"auto\" display=\"flex\" justifyContent=\"center\">\r\n                            <CallSplit color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item sm={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select\r\n                                value={type}\r\n                                onChange={(e) => setType(e.target.value)}\r\n                                fullWidth\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"If\">If</MenuItem>\r\n                                <MenuItem value=\"Else\">Else</MenuItem>\r\n                                <MenuItem value=\"fi\">End If</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item sm={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action Précedente</InputLabel>\r\n                            <Select\r\n                                value={action}\r\n                                onChange={(e) => setAction(e.target.value)}\r\n                                fullWidth\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                {ActionType.map((action) => (\r\n                                    <MenuItem value={action.type}>{action.name}</MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item sm={3} md={3} xl={3}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, out: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                            }}\r\n                            value={verified.name || verified.path}\r\n                            className={classes.fields}\r\n                            id=\"sortie\"\r\n                            color=\"primary\"\r\n                            label={\"Nom \" + action}\r\n                        />\r\n                    </Grid>\r\n                    {verified.type === \"script\" || verified.type === \"command\" ? (\r\n                        <Grid item sm={2} md={2} xl={2}>\r\n                            <TextField\r\n                                onChange={(e) => setState({ ...state, out: e.target.value })}\r\n                                onBlur={(e) => {\r\n                                    saveInformations();\r\n                                }}\r\n                                value={state.out}\r\n                                className={classes.fields}\r\n                                id={\"sortie \" + index + \"-\" + type}\r\n                                color=\"primary\"\r\n                                label={\"Sortie \" + action}\r\n                            />\r\n                        </Grid>\r\n                    ) : (\r\n                        <Grid item sm={2} md={2} xl={2}>\r\n                            <FormControl className={classes.fields}>\r\n                                <InputLabel>Sortie attendue</InputLabel>\r\n                                <Select\r\n                                    value={sortie}\r\n                                    onChange={(e) => setSortie(e.target.value)}\r\n                                    fullWidth\r\n                                    onBlur={saveInformations}\r\n                                >\r\n                                    {ActionType.filter(\r\n                                        (element) =>\r\n                                            element.type != \"script\" && element.type != \"command\"\r\n                                    ).map(\r\n                                        (item) =>\r\n                                            item.type == action &&\r\n                                            item.console.map((out) => (\r\n                                                <MenuItem value={out}>{out}</MenuItem>\r\n                                            ))\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n                    )}\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Condition;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Automator.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Env.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\SSAViewer.js",["280","281","282"],{"ruleId":"283","replacedBy":"284"},{"ruleId":"285","replacedBy":"286"},{"ruleId":"287","severity":1,"message":"288","line":7,"column":41,"nodeType":"289","messageId":"290","endLine":7,"endColumn":51},{"ruleId":"291","severity":1,"message":"292","line":97,"column":8,"nodeType":"293","endLine":97,"endColumn":10,"suggestions":"294"},{"ruleId":"295","severity":1,"message":"296","line":111,"column":34,"nodeType":"297","messageId":"298","endLine":111,"endColumn":36},{"ruleId":"295","severity":1,"message":"299","line":113,"column":17,"nodeType":"300","messageId":"301","endLine":113,"endColumn":24},{"ruleId":"295","severity":1,"message":"299","line":163,"column":33,"nodeType":"297","messageId":"302","endLine":163,"endColumn":35},{"ruleId":"287","severity":1,"message":"303","line":11,"column":5,"nodeType":"289","messageId":"290","endLine":11,"endColumn":9},{"ruleId":"287","severity":1,"message":"304","line":12,"column":5,"nodeType":"289","messageId":"290","endLine":12,"endColumn":16},{"ruleId":"287","severity":1,"message":"305","line":13,"column":5,"nodeType":"289","messageId":"290","endLine":13,"endColumn":15},{"ruleId":"287","severity":1,"message":"306","line":14,"column":5,"nodeType":"289","messageId":"290","endLine":14,"endColumn":11},{"ruleId":"287","severity":1,"message":"307","line":17,"column":5,"nodeType":"289","messageId":"290","endLine":17,"endColumn":20},{"ruleId":"287","severity":1,"message":"308","line":48,"column":11,"nodeType":"289","messageId":"290","endLine":48,"endColumn":18},{"ruleId":"291","severity":1,"message":"309","line":48,"column":8,"nodeType":"293","endLine":48,"endColumn":10,"suggestions":"310"},{"ruleId":"287","severity":1,"message":"311","line":43,"column":7,"nodeType":"289","messageId":"290","endLine":43,"endColumn":16},{"ruleId":"312","severity":1,"message":"313","line":371,"column":73,"nodeType":"314","messageId":"315","endLine":371,"endColumn":75},{"ruleId":"312","severity":1,"message":"313","line":372,"column":73,"nodeType":"314","messageId":"315","endLine":372,"endColumn":75},{"ruleId":"287","severity":1,"message":"316","line":3,"column":20,"nodeType":"289","messageId":"290","endLine":3,"endColumn":31},{"ruleId":"287","severity":1,"message":"317","line":24,"column":12,"nodeType":"289","messageId":"290","endLine":24,"endColumn":20},{"ruleId":"287","severity":1,"message":"318","line":24,"column":22,"nodeType":"289","messageId":"290","endLine":24,"endColumn":33},{"ruleId":"312","severity":1,"message":"313","line":95,"column":21,"nodeType":"314","messageId":"315","endLine":95,"endColumn":23},{"ruleId":"312","severity":1,"message":"319","line":142,"column":51,"nodeType":"314","messageId":"315","endLine":142,"endColumn":53},{"ruleId":"287","severity":1,"message":"320","line":20,"column":11,"nodeType":"289","messageId":"290","endLine":20,"endColumn":14},{"ruleId":"287","severity":1,"message":"321","line":2,"column":10,"nodeType":"289","messageId":"290","endLine":2,"endColumn":30},{"ruleId":"287","severity":1,"message":"322","line":46,"column":12,"nodeType":"289","messageId":"290","endLine":46,"endColumn":20},{"ruleId":"287","severity":1,"message":"323","line":62,"column":11,"nodeType":"289","messageId":"290","endLine":62,"endColumn":22},{"ruleId":"287","severity":1,"message":"324","line":65,"column":11,"nodeType":"289","messageId":"290","endLine":65,"endColumn":22},{"ruleId":"287","severity":1,"message":"325","line":68,"column":11,"nodeType":"289","messageId":"290","endLine":68,"endColumn":18},{"ruleId":"291","severity":1,"message":"326","line":77,"column":8,"nodeType":"293","endLine":77,"endColumn":10,"suggestions":"327"},{"ruleId":"287","severity":1,"message":"328","line":78,"column":11,"nodeType":"289","messageId":"290","endLine":78,"endColumn":20},{"ruleId":"287","severity":1,"message":"329","line":43,"column":12,"nodeType":"289","messageId":"290","endLine":43,"endColumn":22},{"ruleId":"287","severity":1,"message":"330","line":44,"column":21,"nodeType":"289","messageId":"290","endLine":44,"endColumn":31},{"ruleId":"291","severity":1,"message":"326","line":48,"column":8,"nodeType":"293","endLine":48,"endColumn":10,"suggestions":"331"},{"ruleId":"287","severity":1,"message":"332","line":59,"column":11,"nodeType":"289","messageId":"290","endLine":59,"endColumn":25},{"ruleId":"291","severity":1,"message":"333","line":44,"column":15,"nodeType":"297","endLine":49,"endColumn":6},{"ruleId":"291","severity":1,"message":"334","line":49,"column":8,"nodeType":"293","endLine":49,"endColumn":10,"suggestions":"335"},{"ruleId":"291","severity":1,"message":"336","line":61,"column":8,"nodeType":"293","endLine":61,"endColumn":22,"suggestions":"337"},{"ruleId":"312","severity":1,"message":"313","line":81,"column":20,"nodeType":"314","messageId":"315","endLine":81,"endColumn":22},{"ruleId":"338","severity":1,"message":"339","line":87,"column":9,"nodeType":"340","messageId":"315","endLine":87,"endColumn":23},{"ruleId":"287","severity":1,"message":"341","line":46,"column":27,"nodeType":"289","messageId":"290","endLine":46,"endColumn":43},{"ruleId":"291","severity":1,"message":"326","line":67,"column":8,"nodeType":"293","endLine":67,"endColumn":10,"suggestions":"342"},{"ruleId":"291","severity":1,"message":"343","line":80,"column":8,"nodeType":"293","endLine":80,"endColumn":22,"suggestions":"344"},{"ruleId":"287","severity":1,"message":"345","line":89,"column":55,"nodeType":"289","messageId":"290","endLine":89,"endColumn":61},{"ruleId":"291","severity":1,"message":"334","line":58,"column":8,"nodeType":"293","endLine":58,"endColumn":10,"suggestions":"346"},{"ruleId":"291","severity":1,"message":"343","line":70,"column":8,"nodeType":"293","endLine":70,"endColumn":22,"suggestions":"347"},{"ruleId":"291","severity":1,"message":"326","line":61,"column":8,"nodeType":"293","endLine":61,"endColumn":10,"suggestions":"348"},{"ruleId":"291","severity":1,"message":"349","line":74,"column":8,"nodeType":"293","endLine":74,"endColumn":22,"suggestions":"350"},{"ruleId":"287","severity":1,"message":"351","line":21,"column":11,"nodeType":"289","messageId":"290","endLine":21,"endColumn":22},{"ruleId":"291","severity":1,"message":"352","line":8,"column":8,"nodeType":"293","endLine":8,"endColumn":10,"suggestions":"353"},{"ruleId":"291","severity":1,"message":"352","line":11,"column":8,"nodeType":"293","endLine":11,"endColumn":10,"suggestions":"354"},{"ruleId":"291","severity":1,"message":"355","line":27,"column":8,"nodeType":"293","endLine":27,"endColumn":10,"suggestions":"356"},{"ruleId":"287","severity":1,"message":"357","line":29,"column":12,"nodeType":"289","messageId":"290","endLine":29,"endColumn":17},{"ruleId":"287","severity":1,"message":"358","line":29,"column":19,"nodeType":"289","messageId":"290","endLine":29,"endColumn":27},{"ruleId":"291","severity":1,"message":"352","line":13,"column":8,"nodeType":"293","endLine":13,"endColumn":10,"suggestions":"359"},{"ruleId":"291","severity":1,"message":"352","line":24,"column":8,"nodeType":"293","endLine":24,"endColumn":10,"suggestions":"360"},{"ruleId":"287","severity":1,"message":"361","line":32,"column":12,"nodeType":"289","messageId":"290","endLine":32,"endColumn":21},{"ruleId":"287","severity":1,"message":"362","line":32,"column":23,"nodeType":"289","messageId":"290","endLine":32,"endColumn":35},{"ruleId":"291","severity":1,"message":"326","line":49,"column":8,"nodeType":"293","endLine":49,"endColumn":10,"suggestions":"363"},{"ruleId":"291","severity":1,"message":"343","line":57,"column":8,"nodeType":"293","endLine":57,"endColumn":22,"suggestions":"364"},{"ruleId":"287","severity":1,"message":"365","line":5,"column":5,"nodeType":"289","messageId":"290","endLine":5,"endColumn":15},{"ruleId":"287","severity":1,"message":"366","line":6,"column":5,"nodeType":"289","messageId":"290","endLine":6,"endColumn":13},{"ruleId":"287","severity":1,"message":"367","line":8,"column":5,"nodeType":"289","messageId":"290","endLine":8,"endColumn":11},{"ruleId":"287","severity":1,"message":"368","line":40,"column":18,"nodeType":"289","messageId":"290","endLine":40,"endColumn":25},{"ruleId":"291","severity":1,"message":"369","line":56,"column":8,"nodeType":"293","endLine":56,"endColumn":10,"suggestions":"370"},{"ruleId":"291","severity":1,"message":"336","line":69,"column":8,"nodeType":"293","endLine":69,"endColumn":22,"suggestions":"371"},{"ruleId":"287","severity":1,"message":"372","line":46,"column":26,"nodeType":"289","messageId":"290","endLine":46,"endColumn":41},{"ruleId":"291","severity":1,"message":"334","line":65,"column":8,"nodeType":"293","endLine":65,"endColumn":10,"suggestions":"373"},{"ruleId":"291","severity":1,"message":"343","line":77,"column":8,"nodeType":"293","endLine":77,"endColumn":22,"suggestions":"374"},{"ruleId":"287","severity":1,"message":"375","line":5,"column":5,"nodeType":"289","messageId":"290","endLine":5,"endColumn":12},{"ruleId":"287","severity":1,"message":"366","line":6,"column":5,"nodeType":"289","messageId":"290","endLine":6,"endColumn":13},{"ruleId":"287","severity":1,"message":"367","line":8,"column":5,"nodeType":"289","messageId":"290","endLine":8,"endColumn":11},{"ruleId":"287","severity":1,"message":"376","line":18,"column":8,"nodeType":"289","messageId":"290","endLine":18,"endColumn":17},{"ruleId":"287","severity":1,"message":"368","line":41,"column":18,"nodeType":"289","messageId":"290","endLine":41,"endColumn":25},{"ruleId":"291","severity":1,"message":"326","line":56,"column":8,"nodeType":"293","endLine":56,"endColumn":10,"suggestions":"377"},{"ruleId":"291","severity":1,"message":"343","line":66,"column":8,"nodeType":"293","endLine":66,"endColumn":22,"suggestions":"378"},{"ruleId":"287","severity":1,"message":"379","line":4,"column":5,"nodeType":"289","messageId":"290","endLine":4,"endColumn":9},{"ruleId":"287","severity":1,"message":"380","line":5,"column":5,"nodeType":"289","messageId":"290","endLine":5,"endColumn":16},{"ruleId":"287","severity":1,"message":"365","line":7,"column":5,"nodeType":"289","messageId":"290","endLine":7,"endColumn":15},{"ruleId":"287","severity":1,"message":"367","line":10,"column":5,"nodeType":"289","messageId":"290","endLine":10,"endColumn":11},{"ruleId":"287","severity":1,"message":"381","line":17,"column":10,"nodeType":"289","messageId":"290","endLine":17,"endColumn":19},{"ruleId":"287","severity":1,"message":"382","line":17,"column":27,"nodeType":"289","messageId":"290","endLine":17,"endColumn":33},{"ruleId":"287","severity":1,"message":"383","line":22,"column":8,"nodeType":"289","messageId":"290","endLine":22,"endColumn":15},{"ruleId":"291","severity":1,"message":"334","line":62,"column":8,"nodeType":"293","endLine":62,"endColumn":10,"suggestions":"384"},{"ruleId":"291","severity":1,"message":"343","line":75,"column":8,"nodeType":"293","endLine":75,"endColumn":22,"suggestions":"385"},{"ruleId":"291","severity":1,"message":"386","line":17,"column":8,"nodeType":"293","endLine":17,"endColumn":10,"suggestions":"387"},{"ruleId":"283","replacedBy":"388"},{"ruleId":"285","replacedBy":"389"},{"ruleId":"287","severity":1,"message":"390","line":24,"column":17,"nodeType":"289","messageId":"290","endLine":24,"endColumn":22},{"ruleId":"287","severity":1,"message":"329","line":39,"column":12,"nodeType":"289","messageId":"290","endLine":39,"endColumn":22},{"ruleId":"287","severity":1,"message":"391","line":45,"column":12,"nodeType":"289","messageId":"290","endLine":45,"endColumn":19},{"ruleId":"287","severity":1,"message":"330","line":45,"column":21,"nodeType":"289","messageId":"290","endLine":45,"endColumn":31},{"ruleId":"291","severity":1,"message":"392","line":55,"column":8,"nodeType":"293","endLine":55,"endColumn":10,"suggestions":"393"},{"ruleId":"338","severity":1,"message":"394","line":63,"column":17,"nodeType":"340","messageId":"315","endLine":63,"endColumn":21},{"ruleId":"312","severity":1,"message":"313","line":199,"column":58,"nodeType":"314","messageId":"315","endLine":199,"endColumn":60},{"ruleId":"312","severity":1,"message":"313","line":199,"column":86,"nodeType":"314","messageId":"315","endLine":199,"endColumn":88},{"ruleId":"312","severity":1,"message":"319","line":202,"column":55,"nodeType":"314","messageId":"315","endLine":202,"endColumn":57},{"ruleId":"287","severity":1,"message":"395","line":13,"column":10,"nodeType":"289","messageId":"290","endLine":13,"endColumn":19},{"ruleId":"287","severity":1,"message":"396","line":13,"column":21,"nodeType":"289","messageId":"290","endLine":13,"endColumn":29},{"ruleId":"287","severity":1,"message":"397","line":19,"column":9,"nodeType":"289","messageId":"290","endLine":19,"endColumn":24},"no-native-reassign",["398"],"no-negated-in-lhs",["399"],"no-unused-vars","'Typography' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getADocumentFromBase', 'getADocumentFromExcel', 'history.location.fromExcel', and 'history.location.state'. Either include them or remove the dependency array.","ArrayExpression",["400"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","expectedInside","'Card' is defined but never used.","'CardContent' is defined but never used.","'CardHeader' is defined but never used.","'Button' is defined but never used.","'ArrowForwardIos' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getAllPos'. Either include it or remove the dependency array.",["401"],"'cardWidth' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'GridOverlay' is defined but never used.","'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","Expected '===' and instead saw '=='.","'url' is assigned a value but never used.","'SupervisedUserCircle' is defined but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'reduire' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialSTate'. Either include it or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["402"],"'formatUrl' is assigned a value but never used.","'openDialog' is assigned a value but never used.","'setOptions' is assigned a value but never used.",["403"],"'testConnection' is assigned a value but never used.","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","React Hook useEffect has missing dependencies: 'initialSTate' and 'options'. Either include them or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["404"],"React Hook useEffect has missing dependencies: 'initialSTate.path', 'initialSTate.server', 'state.path', and 'state.server'. Either include them or remove the dependency array.",["405"],"no-dupe-keys","Duplicate key 'setScriptError'.","ObjectExpression","'setDatabaseError' is assigned a value but never used.",["406"],"React Hook useEffect has missing dependencies: 'initialSTate.server' and 'state.server'. Either include them or remove the dependency array.",["407"],"'result' is assigned a value but never used.",["408"],["409"],["410"],"React Hook useEffect has missing dependencies: 'initialSTate.name', 'initialSTate.server', 'state.name', and 'state.server'. Either include them or remove the dependency array.",["411"],"'closeDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'informations' and 'setInformations'. Either include them or remove the dependency array. If 'setInformations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["412"],["413"],"React Hook useEffect has missing dependencies: 'options', 'setOptions', and 'timeOut'. Either include them or remove the dependency array. If 'setOptions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["414"],"'block' is assigned a value but never used.","'setBlock' is assigned a value but never used.",["415"],["416"],"'pingState' is assigned a value but never used.","'setPingState' is assigned a value but never used.",["417"],["418"],"'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'setPath' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'initialSTate' and 'options'. Either include them or remove the dependency array. You can also do a functional update 'setOptions(o => ...)' if you only need 'options' in the 'setOptions' call.",["419"],["420"],"'setElementError' is assigned a value but never used.",["421"],["422"],"'Inpabel' is defined but never used.","'PathField' is defined but never used.",["423"],["424"],"'Chip' is defined but never used.","'FormControl' is defined but never used.","'Autorenew' is defined but never used.","'Search' is defined but never used.","'checker' is defined but never used.",["425"],["426"],"React Hook useEffect has missing dependencies: 'initialServer', 'server', 'setServerError', and 'verification'. Either include them or remove the dependency array.",["427"],["398"],["399"],"'state' is assigned a value but never used.","'options' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'verified'. Either include it or remove the dependency array.",["428"],"Duplicate key 'type'.","'useEffect' is defined but never used.","'useState' is defined but never used.","'docInformations' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"429","fix":"430"},{"desc":"431","fix":"432"},{"desc":"433","fix":"434"},{"desc":"433","fix":"435"},{"desc":"436","fix":"437"},{"desc":"438","fix":"439"},{"desc":"433","fix":"440"},{"desc":"441","fix":"442"},{"desc":"436","fix":"443"},{"desc":"441","fix":"444"},{"desc":"433","fix":"445"},{"desc":"446","fix":"447"},{"desc":"448","fix":"449"},{"desc":"448","fix":"450"},{"desc":"451","fix":"452"},{"desc":"448","fix":"453"},{"desc":"448","fix":"454"},{"desc":"433","fix":"455"},{"desc":"441","fix":"456"},{"desc":"436","fix":"457"},{"desc":"438","fix":"458"},{"desc":"436","fix":"459"},{"desc":"441","fix":"460"},{"desc":"433","fix":"461"},{"desc":"441","fix":"462"},{"desc":"436","fix":"463"},{"desc":"441","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},"Update the dependencies array to be: [getADocumentFromBase, getADocumentFromExcel, history.location.fromExcel, history.location.state]",{"range":"469","text":"470"},"Update the dependencies array to be: [getAllPos]",{"range":"471","text":"472"},"Update the dependencies array to be: [initialSTate]",{"range":"473","text":"474"},{"range":"475","text":"474"},"Update the dependencies array to be: [initialSTate, options]",{"range":"476","text":"477"},"Update the dependencies array to be: [initialSTate.path, initialSTate.server, state.path, state.server, verification]",{"range":"478","text":"479"},{"range":"480","text":"474"},"Update the dependencies array to be: [initialSTate.server, state.server, verification]",{"range":"481","text":"482"},{"range":"483","text":"477"},{"range":"484","text":"482"},{"range":"485","text":"474"},"Update the dependencies array to be: [initialSTate.name, initialSTate.server, state.name, state.server, verification]",{"range":"486","text":"487"},"Update the dependencies array to be: [informations, setInformations]",{"range":"488","text":"489"},{"range":"490","text":"489"},"Update the dependencies array to be: [options, setOptions, timeOut]",{"range":"491","text":"492"},{"range":"493","text":"489"},{"range":"494","text":"489"},{"range":"495","text":"474"},{"range":"496","text":"482"},{"range":"497","text":"477"},{"range":"498","text":"479"},{"range":"499","text":"477"},{"range":"500","text":"482"},{"range":"501","text":"474"},{"range":"502","text":"482"},{"range":"503","text":"477"},{"range":"504","text":"482"},"Update the dependencies array to be: [initialServer, server, setServerError, verification]",{"range":"505","text":"506"},"Update the dependencies array to be: [verified]",{"range":"507","text":"508"},[3185,3187],"[getADocumentFromBase, getADocumentFromExcel, history.location.fromExcel, history.location.state]",[1266,1268],"[getAllPos]",[2366,2368],"[initialSTate]",[1383,1385],[1663,1665],"[initialSTate, options]",[2183,2197],"[initialSTate.path, initialSTate.server, state.path, state.server, verification]",[1980,1982],[2514,2528],"[initialSTate.server, state.server, verification]",[1660,1662],[2192,2206],[1927,1929],[2457,2471],"[initialSTate.name, initialSTate.server, state.name, state.server, verification]",[433,435],"[informations, setInformations]",[472,474],[593,595],"[options, setOptions, timeOut]",[545,547],[496,498],[1534,1536],[1832,1846],[1643,1645],[2172,2186],[1882,1884],[2414,2428],[1639,1641],[1983,1997],[1855,1857],[2367,2381],[543,545],"[initialServer, server, setServerError, verification]",[1536,1538],"[verified]"]