[{"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js":"1","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js":"2","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js":"3","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js":"4","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js":"5","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js":"6","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js":"7","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js":"8","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js":"9","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js":"10","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js":"11","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js":"12","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js":"13","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js":"14","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js":"15","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js":"16","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js":"17","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js":"18","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js":"19","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js":"20","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js":"21","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js":"22","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js":"23","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js":"24","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js":"25","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js":"26","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js":"27","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Checker.js":"28","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Log.js":"29","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\IIS.js":"30","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Rename.js":"31","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Disk.js":"32","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\ServerField.js":"33","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\PathField.js":"34","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ValidationsDialog.js":"35","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Condition.js":"36","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Automator.js":"37","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Env.js":"38"},{"size":449,"mtime":1618580424144,"results":"39","hashOfConfig":"40"},{"size":1861,"mtime":1626985370730,"results":"41","hashOfConfig":"40"},{"size":19232,"mtime":1627482633732,"results":"42","hashOfConfig":"40"},{"size":6369,"mtime":1627482635566,"results":"43","hashOfConfig":"40"},{"size":7589,"mtime":1627482331836,"results":"44","hashOfConfig":"40"},{"size":2385,"mtime":1624892602131,"results":"45","hashOfConfig":"40"},{"size":79,"mtime":1627482281369,"results":"46","hashOfConfig":"40"},{"size":135,"mtime":1618569284110,"results":"47","hashOfConfig":"40"},{"size":6511,"mtime":1627482470768,"results":"48","hashOfConfig":"40"},{"size":14731,"mtime":1627286693811,"results":"49","hashOfConfig":"40"},{"size":7141,"mtime":1626985382340,"results":"50","hashOfConfig":"40"},{"size":5420,"mtime":1626864095417,"results":"51","hashOfConfig":"40"},{"size":990,"mtime":1626857509947,"results":"52","hashOfConfig":"40"},{"size":11317,"mtime":1627473912862,"results":"53","hashOfConfig":"40"},{"size":6109,"mtime":1627463820889,"results":"54","hashOfConfig":"40"},{"size":5989,"mtime":1627048331105,"results":"55","hashOfConfig":"40"},{"size":9410,"mtime":1627047311847,"results":"56","hashOfConfig":"40"},{"size":6533,"mtime":1627048318178,"results":"57","hashOfConfig":"40"},{"size":7830,"mtime":1627290994144,"results":"58","hashOfConfig":"40"},{"size":71,"mtime":1618846144628,"results":"59","hashOfConfig":"40"},{"size":1799,"mtime":1624892303391,"results":"60","hashOfConfig":"40"},{"size":3450,"mtime":1624909157700,"results":"61","hashOfConfig":"40"},{"size":3298,"mtime":1624898525760,"results":"62","hashOfConfig":"40"},{"size":7993,"mtime":1626689112110,"results":"63","hashOfConfig":"40"},{"size":6820,"mtime":1624897275857,"results":"64","hashOfConfig":"40"},{"size":4152,"mtime":1624019311765,"results":"65","hashOfConfig":"40"},{"size":8423,"mtime":1627289692462,"results":"66","hashOfConfig":"40"},{"size":3163,"mtime":1627381305294,"results":"67","hashOfConfig":"40"},{"size":8365,"mtime":1627048338205,"results":"68","hashOfConfig":"40"},{"size":8613,"mtime":1627048308541,"results":"69","hashOfConfig":"40"},{"size":8354,"mtime":1627048324265,"results":"70","hashOfConfig":"40"},{"size":8112,"mtime":1627290746259,"results":"71","hashOfConfig":"40"},{"size":1164,"mtime":1626429358383,"results":"72","hashOfConfig":"40"},{"size":1503,"mtime":1627048459530,"results":"73","hashOfConfig":"40"},{"size":5189,"mtime":1627482550004,"results":"74","hashOfConfig":"40"},{"size":8884,"mtime":1627482610723,"results":"75","hashOfConfig":"40"},{"size":304,"mtime":1626982521069,"results":"76","hashOfConfig":"40"},{"size":90,"mtime":1627297493637,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"175tmnb",{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"80"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"80"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"80"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"80"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"80"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"80"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"80"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"80"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"80"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"80"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"80"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"80"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"80"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"80"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"80"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"165"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js",[],["176","177"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js",["178","179","180","181"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js",["182","183","184","185"],"import {\r\n    Button,\r\n    Container,\r\n    makeStyles,\r\n    Card,\r\n    CardHeader,\r\n    CardContent,\r\n    Grid,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n    Autorenew,\r\n    Code,\r\n    Description,\r\n    Http,\r\n    KeyboardArrowRight,\r\n    Save,\r\n    Search,\r\n    SettingsSharp,\r\n    Storage,\r\n    Web,\r\n    AccountTree,\r\n    WrapText,\r\n    CallSplit,\r\n} from \"@material-ui/icons\";\r\nimport Service from \"./Actions/Service\";\r\nimport Database from \"./Actions/Database\";\r\nimport Process from \"./Actions/Process\";\r\nimport ARScript from \"./Actions/ARScript\";\r\nimport { useEffect, useState } from \"react\";\r\nimport SpeedDial from \"@material-ui/lab/SpeedDial\";\r\nimport { SpeedDialAction, SpeedDialIcon } from \"@material-ui/lab\";\r\nimport ActionContext from \"../Context/ActionContext\";\r\nimport Link from \"./Actions/Link\";\r\nimport WebAction from \"./Actions/WebAction\";\r\nimport Command from \"./Actions/Command\";\r\nimport Log from \"./Actions/Log\";\r\nimport PoolIIS from \"./Actions/IIS\";\r\nimport Rename from \"./Actions/Rename\";\r\nimport Disk from \"./Actions/Disk\";\r\nimport Condition from \"./Actions/Condition\";\r\n\r\nconst cardWidth = 850;\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // width : cardWidth,\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n}));\r\nconst ARCard = ({\r\n    name,\r\n    actions,\r\n    SetActions,\r\n    type,\r\n    AddServer,\r\n    generateJson,\r\n    verification,\r\n    informations,\r\n    setInformations,\r\n    titleError,\r\n}) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false);\r\n    const [index, setIndex] = useState(actions.length);\r\n    const [pingedServers, setPingedServers] = useState([{ name: \"sw11203\", joined: false }]);\r\n    const [errorText, setErrorText] = useState(\"\");\r\n\r\n    var second = actions.length;\r\n\r\n    useEffect(() => {}, []);\r\n\r\n    const addAction = (_type) => {\r\n        const newState = [\r\n            ...actions,\r\n            {\r\n                index: second,\r\n                type: _type,\r\n                action: type,\r\n                informations: {},\r\n                options: {\r\n                    block: true,\r\n                    prod: true,\r\n                    hprod: true,\r\n                    inte: true,\r\n                    dev: true,\r\n                },\r\n            },\r\n        ];\r\n        console.log(\"new state \", newState);\r\n\r\n        SetActions(newState);\r\n        setIndex(index + 1);\r\n        second++;\r\n    };\r\n\r\n    const deleteAction = (actionID) => {\r\n        console.log(\r\n            \"deleting \",\r\n            actions.filter((action) => action.index === actionID)\r\n        );\r\n\r\n        const newState = actions.filter((action) => action.index !== actionID);\r\n        var i;\r\n\r\n        for (i = 0; i < newState.length; i++) {\r\n            newState[i].index = i;\r\n        }\r\n\r\n        setIndex(newState.length);\r\n\r\n        //newState.map(action => console.log(action))\r\n\r\n        SetActions(newState);\r\n\r\n        //console.log(\"index \", index)\r\n    };\r\n\r\n    const duplicateAction = (actionID) => {\r\n        var actionToDuplicateIndex = actionID;\r\n        var clone = actions[actionToDuplicateIndex];\r\n\r\n        console.log(\r\n            \"action to duplicate\",\r\n            clone,\r\n            \"index \",\r\n            actionToDuplicateIndex,\r\n            \" actionId \",\r\n            actionID\r\n        );\r\n\r\n        var newClone = { ...clone, action: \"status\", duplicated: \"duplicated\" };\r\n        actionToDuplicateIndex = actionToDuplicateIndex + 1;\r\n        console.log(\"before splice \", actions);\r\n\r\n        actions.splice(actionToDuplicateIndex, 0, newClone);\r\n\r\n        console.log(\"new array \", actions);\r\n\r\n        for (var i = 0; i < actions.length; i++) {\r\n            actions[i].index = i;\r\n            //console.log(actions[i].server)\r\n        }\r\n        console.log(\"after array \", actions);\r\n\r\n        //newState.map(action => console.log(action))\r\n\r\n        SetActions(actions);\r\n        setIndex(actions.length);\r\n    };\r\n\r\n    const saveData = (object) => {\r\n        const result = actions.filter((e) => e.index === object.index);\r\n\r\n        if (result.length > 0) {\r\n            const index = actions.findIndex((e) => e.index === object.index);\r\n\r\n            console.log(\"Changement\", actions[index]);\r\n\r\n            actions.splice(index, 1, object);\r\n\r\n            SetActions(actions);\r\n        } else {\r\n            console.log(\"Nouvelle entrée\");\r\n            const newState = [...actions, object];\r\n            SetActions(newState);\r\n        }\r\n    };\r\n\r\n    const validateDocument = () => {\r\n        if (actions.length > 0) {\r\n            !titleError\r\n                ? setInformations({ ...informations, open: true })\r\n                : setErrorText(\"Veuillez changer le nom du SSA SVP\");\r\n        }\r\n    };\r\n\r\n    const iconsAction = [\r\n        {\r\n            icon: <Http />,\r\n            name: \"Vérifier Url\",\r\n            type: \"link\",\r\n            action: () => addAction(\"link\"),\r\n        },\r\n        {\r\n            icon: <Web />,\r\n            name: \"Action Web\",\r\n            type: \"webAction\",\r\n            action: () => addAction(\"webAction\"),\r\n        },\r\n        {\r\n            icon: <CallSplit />,\r\n            name: \"Créer une condition\",\r\n            type: \"condition\",\r\n            action: () => addAction(\"condition\"),\r\n        },\r\n        {\r\n            icon: <SettingsSharp />,\r\n            name: \"Service\",\r\n            type: \"service\",\r\n            action: () => addAction(\"service\"),\r\n        },\r\n        {\r\n            icon: <Autorenew />,\r\n            name: \"Processus\",\r\n            type: \"process\",\r\n            action: () => addAction(\"process\"),\r\n        },\r\n        {\r\n            icon: <Description />,\r\n            name: \"Script\",\r\n            type: \"script\",\r\n            action: () => addAction(\"script\"),\r\n        },\r\n        {\r\n            icon: <Storage />,\r\n            name: \"Base de données\",\r\n            type: \"database\",\r\n            action: () => addAction(\"database\"),\r\n        },\r\n        {\r\n            icon: <Code />,\r\n            name: \"Commande\",\r\n            type: \"command\",\r\n            action: () => addAction(\"command\"),\r\n        },\r\n        {\r\n            icon: <Search />,\r\n            name: \"Rechercher un Log\",\r\n            type: \"log\",\r\n            action: () => addAction(\"log\"),\r\n        },\r\n        {\r\n            icon: <Save />,\r\n            name: \"Vérifier Disque(s)\",\r\n            type: \"disk\",\r\n            action: () => addAction(\"disk\"),\r\n        },\r\n        {\r\n            icon: <AccountTree />,\r\n            name: \"Pool IIS\",\r\n            type: \"IIS\",\r\n            action: () => addAction(\"IIS\"),\r\n        },\r\n        {\r\n            icon: <WrapText />,\r\n            name: \"Renommer un fichier\",\r\n            type: \"rename\",\r\n            action: () => addAction(\"rename\"),\r\n        },\r\n    ];\r\n    return (\r\n        <Container>\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    title={name}\r\n                    subheader=\"Windows\"\r\n                    action={\r\n                        <SpeedDial\r\n                            ariaLabel=\"SpeedDial\"\r\n                            icon={<SpeedDialIcon onClick={() => setOpen(!open)} />}\r\n                            open={open}\r\n                            direction=\"left\"\r\n                            onMouseEnter={() => setOpen(true)}\r\n                        >\r\n                            {\r\n                                //si c'est une POS donc status\r\n                                type !== \"status\"\r\n                                    ? iconsAction\r\n                                          .filter(\r\n                                              (icon) =>\r\n                                                  icon.type != \"webAction\" &&\r\n                                                  icon.type != \"condition\"\r\n                                          )\r\n                                          .map((action) => (\r\n                                              <SpeedDialAction\r\n                                                  key={action.name}\r\n                                                  icon={action.icon}\r\n                                                  tooltipTitle={action.name}\r\n                                                  tooltipPlacement=\"down\"\r\n                                                  onClick={action.action}\r\n                                              />\r\n                                          ))\r\n                                    : iconsAction\r\n                                          .filter((icon) => icon.type != \"rename\")\r\n                                          .map((action) => (\r\n                                              <SpeedDialAction\r\n                                                  key={action.name}\r\n                                                  icon={action.icon}\r\n                                                  tooltipTitle={action.name}\r\n                                                  tooltipPlacement=\"down\"\r\n                                                  onClick={action.action}\r\n                                              />\r\n                                          ))\r\n                            }\r\n                        </SpeedDial>\r\n                    }\r\n                />\r\n\r\n                <CardContent>\r\n                    <ActionContext.Provider\r\n                        value={{\r\n                            actions,\r\n                            deleteAction,\r\n                            duplicateAction,\r\n                            saveData,\r\n                            AddServer,\r\n                            setPingedServers,\r\n                            pingedServers,\r\n                            verification,\r\n                        }}\r\n                    >\r\n                        <form noValidate autoComplete=\"on\">\r\n                            {actions.map((item, index) =>\r\n                                item.type === \"service\" ? (\r\n                                    <Service\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"script\" ? (\r\n                                    <ARScript key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"database\" ? (\r\n                                    <Database\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"process\" ? (\r\n                                    <Process\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"link\" ? (\r\n                                    <Link key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"webAction\" ? (\r\n                                    <WebAction key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"command\" ? (\r\n                                    <Command key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"log\" ? (\r\n                                    <Log\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"IIS\" ? (\r\n                                    <PoolIIS\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"rename\" ? (\r\n                                    <Rename\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        initialSTate={item}\r\n                                    />\r\n                                ) : item.type === \"disk\" ? (\r\n                                    <Disk key={index} index={index} initialSTate={item} />\r\n                                ) : item.type === \"condition\" ? (\r\n                                    <Condition\r\n                                        key={index}\r\n                                        index={index}\r\n                                        type={type}\r\n                                        verified={actions[index - 1]}\r\n                                    />\r\n                                ) : null\r\n                            )}\r\n                            <Grid container direction=\"row\" justify=\"space-between\">\r\n                                <Grid item>\r\n                                    <Button\r\n                                        color=\"secondary\"\r\n                                        variant=\"contained\"\r\n                                        onClick={validateDocument}\r\n                                        endIcon={<KeyboardArrowRight />}\r\n                                    >\r\n                                        Save\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Typography variant=\"caption\" style={{ marginTop: 10 }}>\r\n                                    {informations.prenom} {informations.nom}\r\n                                </Typography>\r\n                            </Grid>\r\n                            {titleError ? (\r\n                                <Typography style={{ color: \"red\", marginTop: 10 }}>\r\n                                    {errorText}\r\n                                </Typography>\r\n                            ) : null}\r\n                        </form>\r\n                    </ActionContext.Provider>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default ARCard;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js",["186","187","188","189","190"],"import { Box, Button, Drawer, makeStyles, Typography } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport { DataGrid, GridOverlay } from \"@material-ui/data-grid\";\r\nimport { Add, Delete } from \"@material-ui/icons\";\r\n\r\nconst drawerWidthRight = 280;\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return {\r\n        root: {},\r\n        navRight: {\r\n            width: drawerWidthRight,\r\n            //display:'none'\r\n        },\r\n        drawerPaperRight: {\r\n            width: drawerWidthRight,\r\n            backgroundColor: \"#FFFFF\",\r\n            borderLeft: \"0px\",\r\n        },\r\n    };\r\n});\r\n\r\nconst RightNav = ({ ServerRow, saveRows }) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [selectedRow, SetSelectedRow] = useState();\r\n    const columns = [\r\n        {\r\n            field: \"prod\",\r\n            headerName: \"prod\",\r\n            width: 90,\r\n            editable: true,\r\n            sortable: false,\r\n        },\r\n        {\r\n            field: \"hprod\",\r\n            headerName: \"hprod\",\r\n            width: 90,\r\n            editable: true,\r\n            sortable: false,\r\n        },\r\n        {\r\n            field: \"dev\",\r\n            headerName: \"IPP2\",\r\n            width: 90,\r\n            editable: true,\r\n            sortable: false,\r\n        },\r\n    ];\r\n\r\n    /*\r\n    useEffect(() => {\r\n      const timer = setInterval(() => {\r\n        setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 20));\r\n      }, 400);\r\n  \r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }, []);\r\n    */\r\n\r\n    const classes = useStyles();\r\n\r\n    const handleCellchange = (cell) => {\r\n        console.log(\"Changing the \", cell);\r\n\r\n        const editedServers = ServerRow.map((row) => {\r\n            if (row.id === cell.id) {\r\n                row = { ...row, [cell.field]: cell.props.value };\r\n                return row;\r\n            }\r\n            return row;\r\n        });\r\n        saveRows(editedServers);\r\n        console.log(\"edited \", editedServers);\r\n    };\r\n\r\n    const addRow = () => {\r\n        const newRow = {\r\n            id: ServerRow.length,\r\n            prod: \"definir\",\r\n            hprod: \"\",\r\n            dev: \"\",\r\n            name: \"\",\r\n            auto: false,\r\n        };\r\n\r\n        saveRows([...ServerRow, newRow]);\r\n        console.log(\"new row\");\r\n    };\r\n\r\n    const deleteRow = () => {\r\n        const newstate = ServerRow.filter((row) => row.id !== selectedRow);\r\n        console.log(\"New tab \" + newstate);\r\n        selectedRow != undefined && saveRows(newstate);\r\n        SetSelectedRow(undefined);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Drawer\r\n                elevation={0}\r\n                variant=\"permanent\"\r\n                anchor=\"right\"\r\n                classes={{ paper: classes.drawerPaperRight }}\r\n                className={classes.navRight}\r\n            >\r\n                <Box>\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>Variables</Typography>\r\n                    </Box>\r\n\r\n                    <div style={{ height: 300, width: \"100%\" }}>\r\n                        <DataGrid\r\n                            rows={ServerRow}\r\n                            columns={columns}\r\n                            hideFooter\r\n                            disableColumnMenu\r\n                            rowHeight={40}\r\n                            headerHeight={40}\r\n                            onEditCellChangeCommitted={(cell) => handleCellchange(cell)}\r\n                            onRowClick={(e) => SetSelectedRow(e.id)}\r\n                        />\r\n                    </div>\r\n                    <Box display=\"flex\" justifyContent=\"space-between\" mt={1} m={2}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            size=\"small\"\r\n                            endIcon={<Add />}\r\n                            onClick={addRow}\r\n                        >\r\n                            Ajouter\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            endIcon={<Delete />}\r\n                            onClick={deleteRow}\r\n                            disabled={selectedRow == undefined}\r\n                        >\r\n                            Supprimer\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n\r\n                <Box>\r\n                    {/**\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            Vérification Active\r\n                        </Typography>\r\n                    </Box>\r\n                    \r\n                    <Grid container spacing={1} alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\">\r\n                                <Computer color=\"primary\" />\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Ping : SW11203</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Divider style={{ margin: \"10px \" }} />\r\n                    <Grid container alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\" >\r\n                                <Settings color=\"primary\" />\r\n\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Service : BITS</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                     */}\r\n                </Box>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RightNav;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js",["191"],"import { Button, CardActionArea, makeStyles } from \"@material-ui/core\";\r\nimport { useEffect } from \"react\";\r\nimport { Avatar, Card, CardContent, Grid, Typography } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n        flexGrow: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n}));\r\nconst ListSSA = ({ ssa, fromExcel, setLoading }) => {\r\n    const url = \"http://localhost:5000/api\";\r\n    const history = useHistory();\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        //console.log(ssa)\r\n    });\r\n\r\n    const visitPOS = (ssa) => {\r\n        const futureState = fromExcel ? ssa : { name: ssa.name, id: ssa._id };\r\n        history.push({\r\n            pathname: \"/create\",\r\n            state: futureState,\r\n            fromExcel: fromExcel,\r\n        });\r\n    };\r\n\r\n    const testSSA = (ssa) => {};\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root} elevation={0.5}>\r\n                <CardActionArea\r\n                    onClick={() => {\r\n                        setLoading(true);\r\n                        visitPOS(ssa);\r\n                    }}\r\n                >\r\n                    <CardContent>\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item xs={1} md={1} sm={1}>\r\n                                <Avatar>\r\n                                    {ssa.name.split(\"_\").length > 1\r\n                                        ? ssa.name\r\n                                              .split(\"_\")[1][0]\r\n                                              .toUpperCase()\r\n                                        : ssa.name[0].toUpperCase()}\r\n                                </Avatar>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={3} md={3} sm={3}>\r\n                                <Typography> {ssa.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={1} sm={1}>\r\n                                <Typography>\r\n                                    {\" \"}\r\n                                    {ssa.Arret.length} - {ssa.Relance.length}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}>\r\n                                <Typography> {ssa.auteur}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}>\r\n                                <Typography>\r\n                                    {\" \"}\r\n                                    {new Date(ssa.createdAt).toLocaleString()}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={3} sm={2}>\r\n                                <Grid\r\n                                    spacing={1}\r\n                                    container\r\n                                    justify=\"space-around\"\r\n                                    alignContent=\"center\"\r\n                                >\r\n                                    <Grid item md={5}>\r\n                                        <Button\r\n                                            variant=\"outlined\"\r\n                                            color=\"default\"\r\n                                            onClick={() => visitPOS(ssa)}\r\n                                        >\r\n                                            PARPRE/POS\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    <Grid item md={4}>\r\n                                        {!fromExcel ? (\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => testSSA(ssa)}\r\n                                            >\r\n                                                Tester\r\n                                            </Button>\r\n                                        ) : (\r\n                                            <Button\r\n                                                variant=\"outlined\"\r\n                                                color=\"primary\"\r\n                                                onClick={() => testSSA(ssa)}\r\n                                            >\r\n                                                Importer\r\n                                            </Button>\r\n                                        )}\r\n                                    </Grid>\r\n                                    <Grid item md={3}>\r\n                                        <Button>\r\n                                            <Delete color=\"secondary\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ListSSA;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js",["192"],"import { Box, makeStyles, Paper, Typography } from \"@material-ui/core\";\r\nimport { SupervisedUserCircle } from \"@material-ui/icons\";\r\n\r\n//Le nombre de ssa dans Céphée\r\nconst totalDocument = 728;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: theme.spacing(5),\r\n    },\r\n}));\r\n\r\nconst DashboardCard = ({ name, icon, documentNumber }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Paper className={classes.root} elevation={1}>\r\n                <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Box mr={1}>{icon}</Box>\r\n                    <Typography>{name}</Typography>\r\n                </Box>\r\n                <Box display=\"flex\" justifyContent=\"center\">\r\n                    <Typography variant=\"h5\">\r\n                        {documentNumber} / {totalDocument}\r\n                    </Typography>\r\n                </Box>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DashboardCard;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js",["193","194","195","196","197","198"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js",["199","200","201"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js",["202","203","204","205","206"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Description } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport { testPath, testPing } from \"../Checker\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport PathField from \"../Fields/PathField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst ARScript = ({ index, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [path, setPath] = useState(\"\");\r\n    //true donc erreur donc rouge\r\n    const [scriptError, setScriptError] = useState(\"false\");\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(async () => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            verification && testPath(initialSTate.path, initialSTate.server, setScriptError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            verification && testPath(state.path, state.server, setScriptError);\r\n        }\r\n    }, [verification]);\r\n    const saveInformations = () => {\r\n        if (path === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n        saveData({\r\n            index: index,\r\n            type: \"script\",\r\n            server: state.server,\r\n            path: path,\r\n            options: options,\r\n\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n\r\n    const pathProps = {\r\n        index: index,\r\n        className: classes.fields,\r\n        serverError: serverError,\r\n        path: path != \"\" ? path : initialSTate.path,\r\n        type: \"Script\",\r\n        scriptError: scriptError,\r\n        server: state.server,\r\n        setScriptError: setScriptError,\r\n        setPath: setPath,\r\n        setScriptError: setScriptError,\r\n        saveInformations: saveInformations,\r\n        verification: verification,\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item sm={1} md={1} xl={1}>\r\n                        <Box my=\"auto\" display=\"flex\" justifyContent=\"center\">\r\n                            <Description color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                                //serverError === false && checker.testPath(e.target.value,state.server,setScriptError)\r\n                            }}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            label={serverError ? \"Injoignable\" : \"Serveur\"}\r\n                            error={verification ? serverError : false}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item sm={8} md={8} xl={8}>\r\n                        <PathField props={pathProps} />\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />{\" \"}\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ARScript;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js",["207","208","209","210"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Storage } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nconst Database = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [status, setStatus] = useState(type);\r\n    const [databaseType, setDatabaseType] = useState(\"MSSQL\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    //true donc erreur donc rouge\r\n    const [databaseError, setDatabaseError] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase());\r\n            setOptions(initialSTate.options);\r\n        }\r\n\r\n        initialSTate.databaseType !== undefined\r\n            ? setDatabaseType(initialSTate.databaseType.toUpperCase())\r\n            : setDatabaseType(\"MSSQL\");\r\n    }, []);\r\n\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        let result;\r\n        if (status === \"status\") {\r\n            type === \"stop\" ? (result = \"stopped\") : (result = \"running\");\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"database\",\r\n            server: state.server,\r\n            name: state.name,\r\n            action: status,\r\n            databaseType: databaseType,\r\n            options: options,\r\n\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Storage color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            label=\"Serveur\"\r\n                            error={verification ? serverError : false}\r\n                            onChange={(e) => {\r\n                                setState({ ...state, server: e.target.value });\r\n                                e.target.value.toLocaleLowerCase().startsWith(\"sw\") ||\r\n                                e.target.value.length < 2\r\n                                    ? setDatabaseType(\"MSSQL\")\r\n                                    : setDatabaseType(\"Oracle\");\r\n                            }}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server &&\r\n                                        state.server.split(\"\").length > 20 &&\r\n                                        state.server.split(\"\").length < 65\r\n                                            ? 13\r\n                                            : state.server && state.server.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\">Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <TextField\r\n                            autoComplete=\"false\"\r\n                            className={classes.fields}\r\n                            value={state.name}\r\n                            id=\"DBName\"\r\n                            color=\"primary\"\r\n                            label={\r\n                                databaseError\r\n                                    ? \"Instance non retrouvée\"\r\n                                    : serverError && state.name !== \"\"\r\n                                    ? \"Instance non testée\"\r\n                                    : \"Instance\"\r\n                            }\r\n                            error={databaseError}\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select\r\n                                value={databaseType}\r\n                                onChange={(e) => setDatabaseType(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"MSSQL\">MSSQL</MenuItem>\r\n                                <MenuItem value=\"MONGODB\">MONGODB</MenuItem>\r\n                                <MenuItem value=\"Oracle\">Oracle</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Database;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js",["211","212"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Autorenew } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Process = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState(initialSTate);\r\n    const [status, setStatus] = useState(initialSTate.action);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n\r\n        setStatus(initialSTate.action);\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"process\",\r\n            server: state.server,\r\n            name: state.name,\r\n            action: status,\r\n            options: options,\r\n\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Autorenew color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\">Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} md={6} xl={6}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"processus\"\r\n                            value={state.name}\r\n                            color=\"primary\"\r\n                            label=\"Processus\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Process;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js",["213","214"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { SettingsSharp } from \"@material-ui/icons\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport { testPing, testService } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        //marginRight:theme.spacing(2),\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nconst Service = ({ index, type, initialSTate }) => {\r\n    //css\r\n    const classes = useStyles();\r\n\r\n    //létat du composant\r\n    const [state, setState] = useState(initialSTate);\r\n    //l'état du server\r\n    const [status, setStatus] = useState(type);\r\n    //menu options\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    const [serviceError, setServiceError] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n    //context pour sauvegarder l'état dans le parent\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase());\r\n            setOptions(initialSTate.options);\r\n        }\r\n    }, []);\r\n\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n        saveData({\r\n            index: index,\r\n            type: \"service\",\r\n            server: state.server,\r\n            name: state.name,\r\n            action: status,\r\n            options: options,\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div id={\"service-\" + index + \"-\" + type}>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <SettingsSharp color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                                verification &&\r\n                                    state.name &&\r\n                                    testService(state.name, e.target.value, setServiceError);\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                fullWidth\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={() => saveInformations()}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\">Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item md={6} xl={6}>\r\n                        <TextField\r\n                            value={state.name}\r\n                            className={classes.fields}\r\n                            id={`serviceName- ${index}`}\r\n                            color=\"primary\"\r\n                            label={\r\n                                serviceError\r\n                                    ? \"Service non retrouvé \"\r\n                                    : serverError && state.name !== \"\"\r\n                                    ? \"Ce service sera testé si serveur joignable\"\r\n                                    : \"Service\"\r\n                            }\r\n                            error={verification ? serviceError : false}\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification &&\r\n                                    !serverError &&\r\n                                    testService(e.target.value, state.server, setServiceError);\r\n                            }}\r\n                            //testService(e.target.value)\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Service;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js",["215"],"import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport {  Comment, Delete, FileCopy, MoreVert } from \"@material-ui/icons\";\r\nimport {  useState } from \"react\";\r\n\r\nconst OptionMenu = ({index,deleteAction,duplicateAction, setOpenDialog}) => {\r\n\r\n    const [anchorEl, setAnchor] = useState(null)\r\n\r\n    const handleClick = (event) =>{\r\n        setAnchor(event.currentTarget)\r\n    }\r\n\r\n    const handleClose= () => {\r\n        setAnchor(null)\r\n    }\r\n\r\n    const showDialog = () =>{\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () =>{\r\n        setOpenDialog(false);\r\n    }\r\n    \r\n\r\n    return ( \r\n        <div>\r\n            <IconButton onClick={handleClick}>\r\n                <MoreVert />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n\r\n                <MenuItem onClick={() => {\r\n\r\n                    deleteAction(index)\r\n                    setAnchor(null)\r\n                    \r\n                    }} >\r\n                    \r\n                    <Delete />Supprimer\r\n                \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {\r\n                        \r\n                        handleClose()\r\n                        duplicateAction(index)\r\n                    }\r\n                } \r\n                >\r\n                    <FileCopy /> Dupliquer\r\n                        \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {showDialog(); handleClose()}} >\r\n                    <Comment /> Options\r\n\r\n                </MenuItem>\r\n            </Menu>\r\n            \r\n\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default OptionMenu;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js",["216"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, Link, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst DisconnectDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"logOut\" })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Déconnexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser le lien de déconnection ou le sélecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Link />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOut}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"logout\"\r\n                                        label=\"lien de déconnexion\"\r\n                                        autoComplete={false}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, logOut: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOutSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"logOut-selector\"\r\n                                        label=\"ou sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, logOutSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default DisconnectDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js",["217"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, IconButton, TextField } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst FormDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({...informations, type:\"form\"})\r\n        console.log(\"updated de dialog form\")\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Remplir un ou des champs </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser le lien de déconnection ou le sélecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.field}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        label=\"Valeur\"\r\n                                        autoComplete={true}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, field: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.fieldSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        label=\"sélecteur\"\r\n                                        autoComplete\r\n                                        onChange={(e) => (setInformations({ ...informations, fieldSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <IconButton>\r\n                                <Add />\r\n                            </IconButton>\r\n\r\n                        </Box>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js",["218","219","220"],"import { Button, Checkbox, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Divider, FormControlLabel, FormGroup,  Grid, Slider, TextField, Typography } from \"@material-ui/core\";\r\nimport { FormControl } from \"@material-ui/core\"\r\n\r\nimport { useEffect, useState } from \"react\";\r\n\r\nconst OptionDialog = ({ options, saveInfos, setOptions, openDialog, setOpenDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setOptions({...options,timeOut:timeOut})\r\n    },[])\r\n    const [block, setBlock] = useState(true)\r\n    const [timeOut, setTimeOut] = useState(0)\r\n\r\n    const marks = [\r\n        {\r\n            value:0,\r\n            label:'0 s'\r\n        },\r\n        {\r\n            value:2,\r\n            label:'2 s'\r\n        },\r\n        {\r\n            value:4,\r\n            label:'4 s'\r\n        },\r\n        {\r\n            value:6,\r\n            label:'6 s'\r\n        },\r\n        {\r\n            value:8,\r\n            label:'8 s'\r\n        },\r\n        {\r\n            value:10,\r\n            label:'10 s'\r\n        },\r\n    ]\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={() => {\r\n                    setOpenDialog(false);\r\n                    saveInfos()\r\n                }}\r\n                fullWidth\r\n            >\r\n                <DialogTitle id='dialog-option' >Options </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Personnaliser votre éxécution en fonction des environnements.\r\n                    </DialogContentText>\r\n                    <Grid container spacing={2} direction=\"column\">\r\n                        <Grid item>\r\n                            <Grid container>\r\n                                <Grid item >\r\n                                    <Typography>Environnement :</Typography>\r\n\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <FormGroup row>\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox\r\n                                                key=\"prod\"\r\n                                                name=\"prod\"\r\n                                                checked={options.prod}\r\n                                                onClick={(e) => setOptions({ ...options, prod: e.target.checked })}\r\n                                            />}\r\n                                            label=\"Production\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox\r\n                                                key=\"hprod\"\r\n                                                name=\"hprod\"\r\n                                                checked={options.hprod}\r\n                                                onClick={(e) => setOptions({ ...options, hprod: e.target.checked })}\r\n                                            />}\r\n                                            label=\"Validation\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox\r\n                                                key=\"prod\"\r\n                                                name=\"prod\"\r\n                                                checked={options.inte}\r\n                                                onClick={(e) => setOptions({ ...options, inte: e.target.checked })}\r\n                                            />}\r\n                                            label=\"Intégration\"\r\n                                        />\r\n                                        <FormControlLabel\r\n                                            control={<Checkbox\r\n                                                key=\"prod\"\r\n                                                name=\"prod\"\r\n                                                checked={options.dev}\r\n                                                onClick={(e) => setOptions({ ...options, dev: e.target.checked })}\r\n                                            />}\r\n                                            label=\"Développement\"\r\n                                        />\r\n\r\n                                    </FormGroup>\r\n\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                        <Divider orientation=\"horizontal\" />\r\n\r\n\r\n                        <Grid item>\r\n                            <Grid container alignItems=\"center\" direction=\"row\" spacing={2} >\r\n                                <Grid item md={6} >\r\n                                    <Typography>Resultat attendu :</Typography>\r\n\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <TextField\r\n                                        label=\"Résultat\"\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                    >\r\n                                    </TextField>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Divider orientation=\"horizontal\" />\r\n\r\n                        <Grid item>\r\n                            <Grid container alignItems=\"center\" direction=\"row\" spacing={2} >\r\n                                <Grid item md={6} >\r\n                                    <Typography>Sleep :</Typography>\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <FormControl fullWidth>\r\n                                        <Slider\r\n                                            defaultValue={0}\r\n                                            value={timeOut}\r\n                                            aria-labelledby=\"continuous-slider\"\r\n                                            max={10}\r\n                                            step={2}\r\n                                            marks={marks}\r\n                                            onChange={(e,value)=>setTimeOut(value)}\r\n                                        />\r\n                                    </FormControl>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n\r\n                        <Divider orientation=\"horizontal\" />\r\n\r\n                        <Grid item>\r\n                            <Grid container alignItems=\"center\" direction=\"row\" spacing={2} >\r\n                                <Grid item md={6} >\r\n                                    <TextField\r\n                                        label=\"Login\"\r\n                                        variant=\"filled\"\r\n                                        fullWidth\r\n                                    >\r\n\r\n                                    </TextField>\r\n\r\n                                </Grid>\r\n                                <Grid item md={6}>\r\n                                    <TextField\r\n                                        label=\"Mot de passe\"\r\n                                        variant=\"filled\"\r\n                                        type=\"password\"\r\n                                        fullWidth\r\n                                    >\r\n\r\n                                    </TextField>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Grid>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button >\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default OptionDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js",["221"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\r\nimport { AccountCircle, ArrowRight, Lock } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n\r\nconst ConnectionDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"connection\" })\r\n        console.log(\"updated de dialog\")\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title' >Connexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\"\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <AccountCircle />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.login}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"login\"\r\n                                        label=\"Login\"\r\n                                        onChange={(e) => (setInformations({ ...informations, login: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.loginSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"login-selector\"\r\n                                        label=\"sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, loginSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Lock />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        value={informations.password}\r\n                                        margin=\"dense\"\r\n                                        id=\"password\"\r\n                                        label=\"Mot de passe\"\r\n                                        type=\"password\"\r\n                                        onChange={(e) => (setInformations({ ...informations, password: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.passwordSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"password-selector\"\r\n                                        label=\"sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, passwordSelector: e.target.value }))}\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Box>\r\n\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth >\r\n                                    <InputLabel>Navigateur</InputLabel>\r\n                                    <Select value={informations.navigator || \"Chrome\"} onChange={(e) => setInformations({ ...informations, navigator: e.target.value })}>\r\n                                        <MenuItem value=\"Chrome\" >Chrome</MenuItem>\r\n                                        <MenuItem value=\"Firefox\">Firefox</MenuItem>\r\n                                        <MenuItem value=\"Edge\">Edge</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel>Mode de Navigation</InputLabel>\r\n                                    <Select value={informations.navigatorMode || \"normal\"} onChange={(e) => (setInformations({ ...informations, navigatorMode: e.target.value }))}>\r\n                                        <MenuItem value=\"normal\" >Normal</MenuItem>\r\n                                        <MenuItem value=\"private\">privé</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConnectionDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js",["222"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ClickDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(()=>{\r\n        setInformations({...informations, type:\"click\"})\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Effectuer un Click </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser les coordonnées ou le sélecteur.\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid container item spacing={2}>\r\n                                    <Box display=\"flex\" justifyContent=\"inline-block\">\r\n                                        <TextField\r\n                                            value={informations.x}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-x\"\r\n                                            label=\"coordonnées X\"\r\n                                            autoComplete={false}\r\n                                            onChange={(e) => (setInformations({ ...informations, x: e.target.value }))}\r\n                                        />\r\n                                        <TextField\r\n                                            value={informations.y}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-y\"\r\n                                            label=\"coordonnées Y\"\r\n                                            autoComplete={false}\r\n\r\n                                            onChange={(e) => (setInformations({ ...informations, y: e.target.value }))}\r\n                                        />\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.clickSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"click-selector\"\r\n                                        label=\"Ou selecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, clickSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClickDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js",["223","224","225","226"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Code } from \"@material-ui/icons\";\r\nimport { useContext, useEffect, useState } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        //marginRight:theme.spacing(2),\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nconst Command = ({ index, initialSTate }) => {\r\n    //css\r\n    const classes = useStyles();\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    //l'état du server\r\n    const [pingState, setPingState] = useState(\"ko\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n        }\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n        }\r\n    }, [verification]);\r\n\r\n    //context pour sauvegarder l'état dans le parent\r\n\r\n    const saveInformations = () => {\r\n        if (state.server === undefined || state.name === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"command\",\r\n            server: state.server,\r\n            name: state.name,\r\n            login: state.login,\r\n            result: state.result,\r\n            options: options,\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Code color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.server}\r\n                            id={`server- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Serveur\"\r\n                            error={verification ? serverError : false}\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server &&\r\n                                        state.server.split(\"\").length > 20 &&\r\n                                        state.server.split(\"\").length < 65\r\n                                            ? 13\r\n                                            : state.server && state.server.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.login}\r\n                            id={`login- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Login\"\r\n                            onChange={(e) => setState({ ...state, login: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.login && state.login.split(\"\").length > 60\r\n                                            ? 14\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={5} xl={5}>\r\n                        <TextField\r\n                            value={state.name}\r\n                            className={classes.fields}\r\n                            id={`command- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Commande\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            error={state.name === \"\"}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name &&\r\n                                        state.name.split(\"\").length > 40 &&\r\n                                        state.name.split(\"\").length < 65\r\n                                            ? 14\r\n                                            : state.name && state.name.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.result}\r\n                            id={`result- ${index}`}\r\n                            color=\"primary\"\r\n                            label=\"Résultat\"\r\n                            onChange={(e) => setState({ ...state, result: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={2} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Command;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Checker.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Log.js",["227","228","229","230","231","232","233","234","235","236"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Autorenew, Search } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport checker, { testPing } from \"../Checker\";\r\nimport PathField from \"../Fields/PathField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Log = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState(initialSTate);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n    const [scriptError, setScriptError] = useState(\"false\");\r\n    const [path, setPath] = useState(\"\");\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testDisk(initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"log\",\r\n            server: state.server,\r\n            name: state.name,\r\n            path: path,\r\n            options: options,\r\n\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n\r\n    const pathProps = {\r\n        index: index,\r\n        className: classes.fields,\r\n        serverError: serverError,\r\n        path: path != \"\" ? path : initialSTate.path,\r\n        type: \"Fichier\",\r\n        scriptError: scriptError,\r\n        server: state.server,\r\n        setScriptError: setScriptError,\r\n        setPath: setPath,\r\n        setScriptError: setScriptError,\r\n        saveInformations: saveInformations,\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Search color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4} sm={4} md={4} xl={4}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"log\"\r\n                            value={state.name}\r\n                            color=\"primary\"\r\n                            label=\"Log\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name &&\r\n                                        state.name.split(\"\").length > 35 &&\r\n                                        state.name.split(\"\").length < 50\r\n                                            ? 13\r\n                                            : state.name && state.name.split(\"\").length > 50\r\n                                            ? 12\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={4} sm={4} md={4} xl={4}>\r\n                        {/**\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, path: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations()\r\n                                checker.testPath(e.target.value, state.server, setScriptError)\r\n                            }\r\n                            }\r\n                            value={state.path}\r\n                            className={classes.fields}\r\n                            id='Path'\r\n                            color='primary'\r\n                            label={scriptError === \"true\" ? 'Fichier non retrouvé sur le serveur' : scriptError === \"dossier\" ? 'Dossier ? ' : 'Path'}\r\n                            error={state.path === \"\" || scriptError === \"true\" || scriptError === \"dossier\"}\r\n\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.path && state.path.split(\"\").length > 35 && state.path.split(\"\").length < 50 ? 13 :\r\n                                            state.path && state.path.split(\"\").length > 50 ? 12 : \"1rem\"\r\n                                }\r\n                            }}\r\n\r\n                        />\r\n                         */}\r\n                        <PathField props={pathProps} />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Log;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\IIS.js",["237","238","239","240"],"import {\r\n    Avatar,\r\n    Box,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { AccountTree } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\n\r\nconst PoolIIS = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [status, setStatus] = useState(type);\r\n    const [elementType, setElementType] = useState(\"pool\");\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n\r\n    //true donc erreur donc rouge\r\n    const [elementError, setElementError] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase());\r\n            setOptions(initialSTate.options);\r\n        }\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        let result;\r\n        if (status === \"status\") {\r\n            type === \"stop\" ? (result = \"stopped\") : (result = \"running\");\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"IIS\",\r\n            server: state.server,\r\n            name: state.name,\r\n            elementType: elementType,\r\n            action: status,\r\n            options: options,\r\n\r\n            //os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n        });\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container spacing={2} alignItems=\"center\">\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <AccountTree color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            label=\"Serveur\"\r\n                            error={verification ? serverError : false}\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                verification && testPing(e.target.value, setServerError);\r\n                            }}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server &&\r\n                                        state.server.split(\"\").length > 20 &&\r\n                                        state.server.split(\"\").length < 65\r\n                                            ? 13\r\n                                            : state.server && state.server.split(\"\").length > 65\r\n                                            ? 13\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\">Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <TextField\r\n                            autoComplete=\"false\"\r\n                            className={classes.fields}\r\n                            value={state.name}\r\n                            id=\"DBName\"\r\n                            color=\"primary\"\r\n                            label={\r\n                                elementError ? \"Pool ou Site Web non retrouvé\" : \"Pool ou Site Web\"\r\n                            }\r\n                            error={elementError}\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select\r\n                                value={elementType}\r\n                                onChange={(e) => setElementType(e.target.value)}\r\n                                onBlur={saveInformations}\r\n                            >\r\n                                <MenuItem value=\"pool\">Pool</MenuItem>\r\n                                <MenuItem value=\"site\">Site</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PoolIIS;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Rename.js",["241","242","243","244","245","246","247"],"import {\r\n    Avatar,\r\n    Box,\r\n    Grid,\r\n    Inpabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { WrapText } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport PathField from \"../Fields/PathField\";\r\nimport { testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Rename = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState(initialSTate);\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n    const [scriptError, setScriptError] = useState(\"false\");\r\n    const [path, setPath] = useState(\"\");\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testService(initialSTate.name, initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) {\r\n            return;\r\n        }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"rename\",\r\n            server: state.server,\r\n            name: state.name,\r\n            path: path,\r\n            options: options,\r\n\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n    const pathProps = {\r\n        index: index,\r\n        className: classes.fields,\r\n        serverError: serverError,\r\n        path: path != \"\" ? path : initialSTate.path,\r\n        type: \"Fichier\",\r\n        scriptError: scriptError,\r\n        server: state.server,\r\n        setScriptError: setScriptError,\r\n        setPath: setPath,\r\n        setScriptError: setScriptError,\r\n        saveInformations: saveInformations,\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <WrapText color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                testPing(e.target.value, setServerError);\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id=\"fileName\"\r\n                            value={state.name}\r\n                            color=\"primary\"\r\n                            label=\"Nouveau Nom\"\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name &&\r\n                                        state.name.split(\"\").length > 35 &&\r\n                                        state.name.split(\"\").length < 50\r\n                                            ? 13\r\n                                            : state.name && state.name.split(\"\").length > 50\r\n                                            ? 12\r\n                                            : \"1rem\",\r\n                                },\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} md={6} xl={6}>\r\n                        {/**\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, path: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations()\r\n                                checker.testPath(e.target.value, state.server, setScriptError)\r\n                            }\r\n                            }\r\n                            value={state.path}\r\n                            className={classes.fields}\r\n                            id='Path'\r\n                            color='primary'\r\n\r\n                            label={scriptError === \"true\" ? 'Fichier non retrouvé sur le serveur' : scriptError === \"dossier\" ? 'Dossier ? ' : 'Path'}\r\n                            error={state.path === \"\" || scriptError === \"true\" || scriptError === \"dossier\"}\r\n\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.path && state.path.split(\"\").length > 35 && state.path.split(\"\").length < 50 ? 13 :\r\n                                            state.path && state.path.split(\"\").length > 50 ? 12 : \"1rem\"\r\n                                }\r\n                            }}\r\n\r\n                        />\r\n                         */}\r\n                        <PathField props={pathProps} />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rename;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Disk.js",["248","249","250","251","252","253","254","255","256"],"import {\r\n    Avatar,\r\n    Box,\r\n    Chip,\r\n    FormControl,\r\n    Grid,\r\n    InputLabel,\r\n    MenuItem,\r\n    Paper,\r\n    Select,\r\n    TextField,\r\n    Typography,\r\n    Button,\r\n    Menu,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { Autorenew, Save, Search } from \"@material-ui/icons\";\r\nimport { useContext, useState, useEffect } from \"react\";\r\nimport ActionContext from \"../../Context/ActionContext\";\r\nimport OptionMenu from \"../Creation/OptionMenu\";\r\nimport OptionDialog from \"../Creation/OptionDialog\";\r\nimport checker, { testDisk, testPing } from \"../Checker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: \"#F6F6FB\",\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n    },\r\n    fields: {\r\n        width: \"100%\",\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5),\r\n    },\r\n}));\r\nconst Disk = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles();\r\n    const [state, setState] = useState({ initialSTate });\r\n    const [openDialog, setOpenDialog] = useState(false);\r\n    const [serverError, setServerError] = useState(false);\r\n    const [diskError, setDiskError] = useState(false);\r\n    const [diskMenuAnchor, setDiskMenuAnchor] = useState(null);\r\n    const [diskSelection, setDiskSelection] = useState([]);\r\n    const openDiskMenu = Boolean(diskMenuAnchor);\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n    });\r\n    const { deleteAction, duplicateAction, saveData, verification } = useContext(ActionContext);\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate);\r\n        setOptions(initialSTate.options);\r\n    }, []);\r\n\r\n    //verification du server et du service\r\n    useEffect(() => {\r\n        if (initialSTate.server && state.server === undefined) {\r\n            verification && testPing(initialSTate.server, setServerError);\r\n            //verification && testDisk(initialSTate.server, setServiceError);\r\n        }\r\n\r\n        if (state.server) {\r\n            verification && testPing(state.server, setServerError);\r\n            //verification && testService(state.name, state.server, setServiceError);\r\n        }\r\n    }, [verification]);\r\n\r\n    const saveInformations = () => {\r\n        if (state.server === undefined) {\r\n            return;\r\n        }\r\n        console.log(\"Saving Informations \", state.disks);\r\n        saveData({\r\n            index: index,\r\n            type: \"disk\",\r\n            server: state.server,\r\n            disks: state.disks,\r\n            options: options,\r\n            //os: \"windows\"\r\n        });\r\n    };\r\n\r\n    const handleClick = (e) => {\r\n        setDiskMenuAnchor(e.currentTarget);\r\n    };\r\n\r\n    const saveDisks = (e) => {\r\n        var notFound = e.target.value\r\n            .split(\" \")\r\n            .filter((element) => !diskSelection.includes(element.toUpperCase()));\r\n        // console.log(\"not found \", notFound.length);\r\n        notFound.length > 0 ? setDiskError(true) : setDiskError(false);\r\n\r\n        saveInformations();\r\n    };\r\n    return (\r\n        <div>\r\n            <Paper elevation={0} className={classes.root}>\r\n                <Grid container alignItems=\"center\" spacing={2}>\r\n                    <Grid item md={1} xl={1}>\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Save color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations();\r\n                                if (e.target.value) {\r\n                                    verification && testPing(e.target.value, setServerError);\r\n                                    verification && testDisk(e.target.value, setDiskSelection);\r\n                                }\r\n                            }}\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id=\"server\"\r\n                            color=\"primary\"\r\n                            error={verification ? serverError : false}\r\n                            label=\"Serveur\"\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={3} md={3} xl={3}>\r\n                        <Button variant=\"contained\" color=\"primary\" fullWidth onClick={handleClick}>\r\n                            Voir les disques ({diskSelection.length})\r\n                        </Button>\r\n                        <Menu\r\n                            id=\"diskMenu\"\r\n                            open={openDiskMenu}\r\n                            anchorEl={diskMenuAnchor}\r\n                            onBlur={saveInformations}\r\n                            style={{ minWidth: 200 }}\r\n                            onClose={() => setDiskMenuAnchor(null)}\r\n                        >\r\n                            {diskSelection.length ? (\r\n                                diskSelection.map((disk, index) => (\r\n                                    <MenuItem key={index} style={{ minWidth: 200 }}>\r\n                                        {disk}\r\n                                    </MenuItem>\r\n                                ))\r\n                            ) : (\r\n                                <MenuItem> Veuillez renseigner le serveur SVP</MenuItem>\r\n                            )}\r\n                        </Menu>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={5} sm={5} md={5} xl={5}>\r\n                        <TextField\r\n                            id=\"disksNames\"\r\n                            label={\r\n                                diskError\r\n                                    ? \"Erreur sur les disques, vérifier SVP\"\r\n                                    : \"Disques à verifier\"\r\n                            }\r\n                            value={state.disks}\r\n                            error={diskError}\r\n                            color=\"primary\"\r\n                            onChange={(e) => setState({ ...state, disks: e.target.value })}\r\n                            className={classes.fields}\r\n                            helperText=\"Lettres(s) uniquement, séparées par un espace ;)\"\r\n                            onBlur={saveDisks}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\">\r\n                            <Grid item md={6}>\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\">\r\n                                    <Avatar className={classes.smallAvatar}>\r\n                                        <Typography>{index + 1}</Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Disk;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\ServerField.js",["257"],"import { useEffect } from \"react\";\r\nimport { TextField } from \"@material-ui/core\"\r\nimport checker from \"../Checker\";\r\n\r\n\r\nconst ServerField = ({ NameClass, server, setServer, index, saveInformations, initialServer, serverError, setServerError,verification }) => {\r\n\r\n\r\n    useEffect(() => {\r\n        if (initialServer && (server === \"\" || server === undefined)&& verification) {\r\n            checker.ping(initialServer, setServerError)\r\n        }\r\n        if (server) {\r\n            //checker.ping(server, setServerError)\r\n        }\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <TextField\r\n                className={NameClass}\r\n                color=\"primary\"\r\n                value={server}\r\n                id={`server-${index}`}\r\n                error={serverError}\r\n                label={serverError ? 'Injoignable' : 'Serveur'}\r\n                onChange={(e) => setServer(e.target.value)}\r\n\r\n                onBlur={(e) => {\r\n                    saveInformations()\r\n                    checker.ping(e.target.value, setServerError)\r\n\r\n                }\r\n                }\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ServerField;",["258","259"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Fields\\PathField.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ValidationsDialog.js",["260"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Condition.js",["261","262","263","264","265","266","267","268"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Automator.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Env.js",[],{"ruleId":"269","replacedBy":"270"},{"ruleId":"271","replacedBy":"272"},{"ruleId":"273","severity":1,"message":"274","line":93,"column":8,"nodeType":"275","endLine":93,"endColumn":10,"suggestions":"276"},{"ruleId":"277","severity":1,"message":"278","line":107,"column":34,"nodeType":"279","messageId":"280","endLine":107,"endColumn":36},{"ruleId":"277","severity":1,"message":"281","line":109,"column":17,"nodeType":"282","messageId":"283","endLine":109,"endColumn":24},{"ruleId":"277","severity":1,"message":"281","line":160,"column":33,"nodeType":"279","messageId":"284","endLine":160,"endColumn":35},{"ruleId":"285","severity":1,"message":"286","line":43,"column":7,"nodeType":"287","messageId":"288","endLine":43,"endColumn":16},{"ruleId":"289","severity":1,"message":"290","line":271,"column":61,"nodeType":"291","messageId":"292","endLine":271,"endColumn":63},{"ruleId":"289","severity":1,"message":"290","line":272,"column":61,"nodeType":"291","messageId":"292","endLine":272,"endColumn":63},{"ruleId":"289","severity":1,"message":"290","line":284,"column":71,"nodeType":"291","messageId":"292","endLine":284,"endColumn":73},{"ruleId":"285","severity":1,"message":"293","line":3,"column":20,"nodeType":"287","messageId":"288","endLine":3,"endColumn":31},{"ruleId":"285","severity":1,"message":"294","line":24,"column":12,"nodeType":"287","messageId":"288","endLine":24,"endColumn":20},{"ruleId":"285","severity":1,"message":"295","line":24,"column":22,"nodeType":"287","messageId":"288","endLine":24,"endColumn":33},{"ruleId":"289","severity":1,"message":"290","line":95,"column":21,"nodeType":"291","messageId":"292","endLine":95,"endColumn":23},{"ruleId":"289","severity":1,"message":"296","line":141,"column":51,"nodeType":"291","messageId":"292","endLine":141,"endColumn":53},{"ruleId":"285","severity":1,"message":"297","line":19,"column":11,"nodeType":"287","messageId":"288","endLine":19,"endColumn":14},{"ruleId":"285","severity":1,"message":"298","line":2,"column":10,"nodeType":"287","messageId":"288","endLine":2,"endColumn":30},{"ruleId":"285","severity":1,"message":"299","line":46,"column":12,"nodeType":"287","messageId":"288","endLine":46,"endColumn":20},{"ruleId":"285","severity":1,"message":"300","line":62,"column":11,"nodeType":"287","messageId":"288","endLine":62,"endColumn":22},{"ruleId":"285","severity":1,"message":"301","line":65,"column":11,"nodeType":"287","messageId":"288","endLine":65,"endColumn":22},{"ruleId":"285","severity":1,"message":"302","line":68,"column":11,"nodeType":"287","messageId":"288","endLine":68,"endColumn":18},{"ruleId":"273","severity":1,"message":"303","line":77,"column":8,"nodeType":"275","endLine":77,"endColumn":10,"suggestions":"304"},{"ruleId":"285","severity":1,"message":"305","line":88,"column":11,"nodeType":"287","messageId":"288","endLine":88,"endColumn":25},{"ruleId":"285","severity":1,"message":"306","line":42,"column":12,"nodeType":"287","messageId":"288","endLine":42,"endColumn":22},{"ruleId":"273","severity":1,"message":"303","line":46,"column":8,"nodeType":"275","endLine":46,"endColumn":10,"suggestions":"307"},{"ruleId":"285","severity":1,"message":"305","line":57,"column":11,"nodeType":"287","messageId":"288","endLine":57,"endColumn":25},{"ruleId":"273","severity":1,"message":"308","line":44,"column":15,"nodeType":"279","endLine":47,"endColumn":6},{"ruleId":"273","severity":1,"message":"303","line":47,"column":8,"nodeType":"275","endLine":47,"endColumn":10,"suggestions":"309"},{"ruleId":"273","severity":1,"message":"310","line":59,"column":8,"nodeType":"275","endLine":59,"endColumn":22,"suggestions":"311"},{"ruleId":"289","severity":1,"message":"290","line":79,"column":20,"nodeType":"291","messageId":"292","endLine":79,"endColumn":22},{"ruleId":"312","severity":1,"message":"313","line":85,"column":9,"nodeType":"314","messageId":"292","endLine":85,"endColumn":23},{"ruleId":"285","severity":1,"message":"315","line":46,"column":27,"nodeType":"287","messageId":"288","endLine":46,"endColumn":43},{"ruleId":"273","severity":1,"message":"303","line":67,"column":8,"nodeType":"275","endLine":67,"endColumn":10,"suggestions":"316"},{"ruleId":"273","severity":1,"message":"317","line":80,"column":8,"nodeType":"275","endLine":80,"endColumn":22,"suggestions":"318"},{"ruleId":"285","severity":1,"message":"319","line":89,"column":55,"nodeType":"287","messageId":"288","endLine":89,"endColumn":61},{"ruleId":"273","severity":1,"message":"303","line":57,"column":8,"nodeType":"275","endLine":57,"endColumn":10,"suggestions":"320"},{"ruleId":"273","severity":1,"message":"317","line":69,"column":8,"nodeType":"275","endLine":69,"endColumn":22,"suggestions":"321"},{"ruleId":"273","severity":1,"message":"303","line":67,"column":8,"nodeType":"275","endLine":67,"endColumn":10,"suggestions":"322"},{"ruleId":"273","severity":1,"message":"323","line":80,"column":8,"nodeType":"275","endLine":80,"endColumn":22,"suggestions":"324"},{"ruleId":"285","severity":1,"message":"325","line":21,"column":11,"nodeType":"287","messageId":"288","endLine":21,"endColumn":22},{"ruleId":"273","severity":1,"message":"326","line":8,"column":8,"nodeType":"275","endLine":8,"endColumn":10,"suggestions":"327"},{"ruleId":"273","severity":1,"message":"326","line":11,"column":8,"nodeType":"275","endLine":11,"endColumn":10,"suggestions":"328"},{"ruleId":"273","severity":1,"message":"329","line":10,"column":7,"nodeType":"275","endLine":10,"endColumn":9,"suggestions":"330"},{"ruleId":"285","severity":1,"message":"331","line":11,"column":12,"nodeType":"287","messageId":"288","endLine":11,"endColumn":17},{"ruleId":"285","severity":1,"message":"332","line":11,"column":19,"nodeType":"287","messageId":"288","endLine":11,"endColumn":27},{"ruleId":"273","severity":1,"message":"326","line":13,"column":8,"nodeType":"275","endLine":13,"endColumn":10,"suggestions":"333"},{"ruleId":"273","severity":1,"message":"326","line":9,"column":7,"nodeType":"275","endLine":9,"endColumn":9,"suggestions":"334"},{"ruleId":"285","severity":1,"message":"335","line":32,"column":12,"nodeType":"287","messageId":"288","endLine":32,"endColumn":21},{"ruleId":"285","severity":1,"message":"336","line":32,"column":23,"nodeType":"287","messageId":"288","endLine":32,"endColumn":35},{"ruleId":"273","severity":1,"message":"303","line":49,"column":8,"nodeType":"275","endLine":49,"endColumn":10,"suggestions":"337"},{"ruleId":"273","severity":1,"message":"317","line":57,"column":8,"nodeType":"275","endLine":57,"endColumn":22,"suggestions":"338"},{"ruleId":"285","severity":1,"message":"339","line":4,"column":5,"nodeType":"287","messageId":"288","endLine":4,"endColumn":16},{"ruleId":"285","severity":1,"message":"340","line":6,"column":5,"nodeType":"287","messageId":"288","endLine":6,"endColumn":15},{"ruleId":"285","severity":1,"message":"341","line":7,"column":5,"nodeType":"287","messageId":"288","endLine":7,"endColumn":13},{"ruleId":"285","severity":1,"message":"342","line":9,"column":5,"nodeType":"287","messageId":"288","endLine":9,"endColumn":11},{"ruleId":"285","severity":1,"message":"343","line":14,"column":10,"nodeType":"287","messageId":"288","endLine":14,"endColumn":19},{"ruleId":"285","severity":1,"message":"344","line":19,"column":8,"nodeType":"287","messageId":"288","endLine":19,"endColumn":15},{"ruleId":"273","severity":1,"message":"303","line":56,"column":8,"nodeType":"275","endLine":56,"endColumn":10,"suggestions":"345"},{"ruleId":"273","severity":1,"message":"317","line":69,"column":8,"nodeType":"275","endLine":69,"endColumn":22,"suggestions":"346"},{"ruleId":"289","severity":1,"message":"290","line":92,"column":20,"nodeType":"291","messageId":"292","endLine":92,"endColumn":22},{"ruleId":"312","severity":1,"message":"313","line":98,"column":9,"nodeType":"314","messageId":"292","endLine":98,"endColumn":23},{"ruleId":"285","severity":1,"message":"347","line":46,"column":26,"nodeType":"287","messageId":"288","endLine":46,"endColumn":41},{"ruleId":"273","severity":1,"message":"303","line":63,"column":8,"nodeType":"275","endLine":63,"endColumn":10,"suggestions":"348"},{"ruleId":"273","severity":1,"message":"317","line":75,"column":8,"nodeType":"275","endLine":75,"endColumn":22,"suggestions":"349"},{"ruleId":"285","severity":1,"message":"319","line":84,"column":55,"nodeType":"287","messageId":"288","endLine":84,"endColumn":61},{"ruleId":"285","severity":1,"message":"350","line":5,"column":5,"nodeType":"287","messageId":"288","endLine":5,"endColumn":12},{"ruleId":"285","severity":1,"message":"341","line":6,"column":5,"nodeType":"287","messageId":"288","endLine":6,"endColumn":13},{"ruleId":"285","severity":1,"message":"342","line":8,"column":5,"nodeType":"287","messageId":"288","endLine":8,"endColumn":11},{"ruleId":"273","severity":1,"message":"303","line":55,"column":8,"nodeType":"275","endLine":55,"endColumn":10,"suggestions":"351"},{"ruleId":"273","severity":1,"message":"317","line":67,"column":8,"nodeType":"275","endLine":67,"endColumn":22,"suggestions":"352"},{"ruleId":"289","severity":1,"message":"290","line":89,"column":20,"nodeType":"291","messageId":"292","endLine":89,"endColumn":22},{"ruleId":"312","severity":1,"message":"313","line":95,"column":9,"nodeType":"314","messageId":"292","endLine":95,"endColumn":23},{"ruleId":"285","severity":1,"message":"353","line":4,"column":5,"nodeType":"287","messageId":"288","endLine":4,"endColumn":9},{"ruleId":"285","severity":1,"message":"339","line":5,"column":5,"nodeType":"287","messageId":"288","endLine":5,"endColumn":16},{"ruleId":"285","severity":1,"message":"340","line":7,"column":5,"nodeType":"287","messageId":"288","endLine":7,"endColumn":15},{"ruleId":"285","severity":1,"message":"342","line":10,"column":5,"nodeType":"287","messageId":"288","endLine":10,"endColumn":11},{"ruleId":"285","severity":1,"message":"343","line":17,"column":10,"nodeType":"287","messageId":"288","endLine":17,"endColumn":19},{"ruleId":"285","severity":1,"message":"354","line":17,"column":27,"nodeType":"287","messageId":"288","endLine":17,"endColumn":33},{"ruleId":"285","severity":1,"message":"344","line":22,"column":8,"nodeType":"287","messageId":"288","endLine":22,"endColumn":15},{"ruleId":"273","severity":1,"message":"303","line":60,"column":8,"nodeType":"275","endLine":60,"endColumn":10,"suggestions":"355"},{"ruleId":"273","severity":1,"message":"317","line":73,"column":8,"nodeType":"275","endLine":73,"endColumn":22,"suggestions":"356"},{"ruleId":"273","severity":1,"message":"357","line":17,"column":8,"nodeType":"275","endLine":17,"endColumn":10,"suggestions":"358"},{"ruleId":"269","replacedBy":"359"},{"ruleId":"271","replacedBy":"360"},{"ruleId":"285","severity":1,"message":"361","line":23,"column":17,"nodeType":"287","messageId":"288","endLine":23,"endColumn":22},{"ruleId":"285","severity":1,"message":"306","line":39,"column":12,"nodeType":"287","messageId":"288","endLine":39,"endColumn":22},{"ruleId":"285","severity":1,"message":"362","line":45,"column":12,"nodeType":"287","messageId":"288","endLine":45,"endColumn":19},{"ruleId":"285","severity":1,"message":"363","line":45,"column":21,"nodeType":"287","messageId":"288","endLine":45,"endColumn":31},{"ruleId":"273","severity":1,"message":"364","line":55,"column":8,"nodeType":"275","endLine":55,"endColumn":10,"suggestions":"365"},{"ruleId":"312","severity":1,"message":"366","line":63,"column":17,"nodeType":"314","messageId":"292","endLine":63,"endColumn":21},{"ruleId":"289","severity":1,"message":"290","line":199,"column":58,"nodeType":"291","messageId":"292","endLine":199,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":199,"column":86,"nodeType":"291","messageId":"292","endLine":199,"endColumn":88},{"ruleId":"289","severity":1,"message":"296","line":202,"column":55,"nodeType":"291","messageId":"292","endLine":202,"endColumn":57},"no-native-reassign",["367"],"no-negated-in-lhs",["368"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getADocumentFromBase', 'getADocumentFromExcel', 'history.location.fromExcel', and 'history.location.state'. Either include them or remove the dependency array.","ArrayExpression",["369"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","expectedInside","no-unused-vars","'cardWidth' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'GridOverlay' is defined but never used.","'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","Expected '===' and instead saw '=='.","'url' is assigned a value but never used.","'SupervisedUserCircle' is defined but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'reduire' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialSTate'. Either include it or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["370"],"'testConnection' is assigned a value but never used.","'openDialog' is assigned a value but never used.",["371"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching",["372"],"React Hook useEffect has missing dependencies: 'initialSTate.path', 'initialSTate.server', 'state.path', and 'state.server'. Either include them or remove the dependency array.",["373"],"no-dupe-keys","Duplicate key 'setScriptError'.","ObjectExpression","'setDatabaseError' is assigned a value but never used.",["374"],"React Hook useEffect has missing dependencies: 'initialSTate.server' and 'state.server'. Either include them or remove the dependency array.",["375"],"'result' is assigned a value but never used.",["376"],["377"],["378"],"React Hook useEffect has missing dependencies: 'initialSTate.name', 'initialSTate.server', 'state.name', and 'state.server'. Either include them or remove the dependency array.",["379"],"'closeDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'informations' and 'setInformations'. Either include them or remove the dependency array. If 'setInformations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["380"],["381"],"React Hook useEffect has missing dependencies: 'options', 'setOptions', and 'timeOut'. Either include them or remove the dependency array. If 'setOptions' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["382"],"'block' is assigned a value but never used.","'setBlock' is assigned a value but never used.",["383"],["384"],"'pingState' is assigned a value but never used.","'setPingState' is assigned a value but never used.",["385"],["386"],"'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'Autorenew' is defined but never used.","'checker' is defined but never used.",["387"],["388"],"'setElementError' is assigned a value but never used.",["389"],["390"],"'Inpabel' is defined but never used.",["391"],["392"],"'Chip' is defined but never used.","'Search' is defined but never used.",["393"],["394"],"React Hook useEffect has missing dependencies: 'initialServer', 'server', 'setServerError', and 'verification'. Either include them or remove the dependency array.",["395"],["367"],["368"],"'state' is assigned a value but never used.","'options' is assigned a value but never used.","'setOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'verified'. Either include it or remove the dependency array.",["396"],"Duplicate key 'type'.","no-global-assign","no-unsafe-negation",{"desc":"397","fix":"398"},{"desc":"399","fix":"400"},{"desc":"399","fix":"401"},{"desc":"399","fix":"402"},{"desc":"403","fix":"404"},{"desc":"399","fix":"405"},{"desc":"406","fix":"407"},{"desc":"399","fix":"408"},{"desc":"406","fix":"409"},{"desc":"399","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"413","fix":"415"},{"desc":"416","fix":"417"},{"desc":"413","fix":"418"},{"desc":"413","fix":"419"},{"desc":"399","fix":"420"},{"desc":"406","fix":"421"},{"desc":"399","fix":"422"},{"desc":"406","fix":"423"},{"desc":"399","fix":"424"},{"desc":"406","fix":"425"},{"desc":"399","fix":"426"},{"desc":"406","fix":"427"},{"desc":"399","fix":"428"},{"desc":"406","fix":"429"},{"desc":"430","fix":"431"},{"desc":"432","fix":"433"},"Update the dependencies array to be: [getADocumentFromBase, getADocumentFromExcel, history.location.fromExcel, history.location.state]",{"range":"434","text":"435"},"Update the dependencies array to be: [initialSTate]",{"range":"436","text":"437"},{"range":"438","text":"437"},{"range":"439","text":"437"},"Update the dependencies array to be: [initialSTate.path, initialSTate.server, state.path, state.server, verification]",{"range":"440","text":"441"},{"range":"442","text":"437"},"Update the dependencies array to be: [initialSTate.server, state.server, verification]",{"range":"443","text":"444"},{"range":"445","text":"437"},{"range":"446","text":"444"},{"range":"447","text":"437"},"Update the dependencies array to be: [initialSTate.name, initialSTate.server, state.name, state.server, verification]",{"range":"448","text":"449"},"Update the dependencies array to be: [informations, setInformations]",{"range":"450","text":"451"},{"range":"452","text":"451"},"Update the dependencies array to be: [options, setOptions, timeOut]",{"range":"453","text":"454"},{"range":"455","text":"451"},{"range":"456","text":"451"},{"range":"457","text":"437"},{"range":"458","text":"444"},{"range":"459","text":"437"},{"range":"460","text":"444"},{"range":"461","text":"437"},{"range":"462","text":"444"},{"range":"463","text":"437"},{"range":"464","text":"444"},{"range":"465","text":"437"},{"range":"466","text":"444"},"Update the dependencies array to be: [initialServer, server, setServerError, verification]",{"range":"467","text":"468"},"Update the dependencies array to be: [verified]",{"range":"469","text":"470"},[3049,3051],"[getADocumentFromBase, getADocumentFromExcel, history.location.fromExcel, history.location.state]",[2366,2368],"[initialSTate]",[1286,1288],[1609,1611],[2129,2143],"[initialSTate.path, initialSTate.server, state.path, state.server, verification]",[1994,1996],[2528,2542],"[initialSTate.server, state.server, verification]",[1608,1610],[2140,2154],[1919,1921],[2449,2463],"[initialSTate.name, initialSTate.server, state.name, state.server, verification]",[433,435],"[informations, setInformations]",[472,474],[472,474],"[options, setOptions, timeOut]",[545,547],[417,419],[1534,1536],[1832,1846],[1663,1665],[2175,2189],[1828,1830],[2360,2374],[1627,1629],[2159,2173],[1801,1803],[2313,2327],[543,545],"[initialServer, server, setServerError, verification]",[1536,1538],"[verified]"]