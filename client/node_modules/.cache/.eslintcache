[{"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js":"1","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js":"2","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js":"3","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js":"4","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js":"5","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js":"6","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js":"7","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js":"8","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js":"9","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js":"10","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js":"11","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js":"12","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js":"13","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js":"14","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js":"15","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js":"16","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js":"17","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js":"18","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js":"19","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js":"20","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js":"21","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js":"22","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js":"23","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js":"24","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js":"25","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js":"26","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js":"27","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\TestSSA.js":"28"},{"size":449,"mtime":1618580424144,"results":"29","hashOfConfig":"30"},{"size":1506,"mtime":1623950191227,"results":"31","hashOfConfig":"30"},{"size":12832,"mtime":1624979386950,"results":"32","hashOfConfig":"30"},{"size":1484,"mtime":1622925716169,"results":"33","hashOfConfig":"30"},{"size":5698,"mtime":1624365219396,"results":"34","hashOfConfig":"30"},{"size":2385,"mtime":1624892602131,"results":"35","hashOfConfig":"30"},{"size":1547,"mtime":1623225871088,"results":"36","hashOfConfig":"30"},{"size":135,"mtime":1618569284110,"results":"37","hashOfConfig":"30"},{"size":6533,"mtime":1624892334102,"results":"38","hashOfConfig":"30"},{"size":8644,"mtime":1625653124421,"results":"39","hashOfConfig":"30"},{"size":5334,"mtime":1624892269583,"results":"40","hashOfConfig":"30"},{"size":4224,"mtime":1624892522633,"results":"41","hashOfConfig":"30"},{"size":1027,"mtime":1624892504136,"results":"42","hashOfConfig":"30"},{"size":10263,"mtime":1624897632939,"results":"43","hashOfConfig":"30"},{"size":5997,"mtime":1624892403130,"results":"44","hashOfConfig":"30"},{"size":4932,"mtime":1624892355937,"results":"45","hashOfConfig":"30"},{"size":7408,"mtime":1624892380362,"results":"46","hashOfConfig":"30"},{"size":5612,"mtime":1624892417664,"results":"47","hashOfConfig":"30"},{"size":7367,"mtime":1624892428452,"results":"48","hashOfConfig":"30"},{"size":71,"mtime":1618846144628,"results":"49","hashOfConfig":"30"},{"size":1799,"mtime":1624892303391,"results":"50","hashOfConfig":"30"},{"size":3450,"mtime":1624909157700,"results":"51","hashOfConfig":"30"},{"size":3298,"mtime":1624898525760,"results":"52","hashOfConfig":"30"},{"size":7689,"mtime":1624891740762,"results":"53","hashOfConfig":"30"},{"size":6820,"mtime":1624897275857,"results":"54","hashOfConfig":"30"},{"size":4152,"mtime":1624019311765,"results":"55","hashOfConfig":"30"},{"size":8234,"mtime":1624522698319,"results":"56","hashOfConfig":"30"},{"size":10975,"mtime":1624871776257,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"175tmnb",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"60"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"60"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"60"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"60"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"60"},"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js",[],["133","134"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js",["135","136","137","138","139","140"],"import { FormControlLabel, FormGroup,  Grid, makeStyles, Radio, RadioGroup, Switch, TextField, Typography } from \"@material-ui/core\"\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ARCard from \"../Components/ARCard\"\r\nimport RightNav from \"../Components/Creation/RightNav\";\r\nimport { useHistory } from 'react-router'\r\n\r\nvar drawerWidthRight = 260\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return {\r\n        root: {\r\n            width: `calc(100% - ${drawerWidthRight}px)`\r\n        }\r\n\r\n    }\r\n})\r\n\r\n\r\nconst Create = () => {\r\n\r\n    const [titleOpen, setTitleOpen] = useState(false)\r\n    //titre de la parpre ou de la POS\r\n    const [title, setTitle] = useState(\"APPXXXX_SSA\")\r\n    //les actions d'arrÃªt\r\n    const [StopActions, setStopActions] = useState([])\r\n    //les Actions de relance\r\n    const [StartActions, setStartActions] = useState([])\r\n    //les Actions auto relance\r\n    const [AutoStartActions, setAutoStartActions] = useState([])\r\n    //les Actions POS\r\n    const [posActions, setPosActions] = useState([])\r\n    //creation automatique de la verification\r\n    const [autoCreate, setAutoCreate] = useState(false)\r\n    //Si on fait la relance automatiquement\r\n    const [autoRelance, setAutoRelance] = useState(false)\r\n    //Soit PARPRE ou POS\r\n    const [documentType, setDocumentType] = useState(\"PARPRE\")\r\n    //Le mode d'utilisation: creation ou modification\r\n    const [pageMode, setPageMode] = useState(\"CrÃ©ation\")\r\n\r\n    const history = useHistory()\r\n\r\n    const [servers, setServers] = useState([])\r\n\r\n    //La page de crÃ©ation et la page de modifiation sont les mÃªmes, la difference est assurÃ©e par pageMode\r\n    useEffect(() => {\r\n\r\n        if (history.location.state !== undefined) {\r\n            document.title = `Modification de ${history.location.state.name}`\r\n\r\n            console.log(\"History \", history.location)\r\n\r\n            history.location.fromExcel\r\n                ? setPageMode(\"CrÃ©ation\")\r\n                : setPageMode(\"Modification\")\r\n\r\n            setDocumentType(history.location.state.type)\r\n            setStopActions(history.location.state.Arret)\r\n            setStartActions(history.location.state.Relance)\r\n            setPosActions(history.location.state.POS)\r\n            setDocumentType(\"PARPRE\")\r\n            //setPosActions(history.location.state.pos)\r\n            setTitle(history.location.state.name)\r\n\r\n            if (history.location.state.variables.servers !== undefined) {\r\n\r\n                const initialServers = history.location.state.variables.servers.map((variable, index) => {\r\n                    return {\r\n                        id: index,\r\n                        prod: variable.prod,\r\n                        hprod: variable.hprod,\r\n                        dev: variable.dev,\r\n                        name: variable.name\r\n                    }\r\n                })\r\n                setServers(initialServers)\r\n            }\r\n        } else {\r\n            document.title = \"CrÃ©ation de PARPRE / POS\"\r\n            setPageMode(\"CrÃ©ation\")\r\n        }\r\n    }, [])\r\n\r\n\r\n    const saveServer = () => {\r\n\r\n        //noms des serveurs dans la lste des variables\r\n        var Allservers = servers.map(server => { return server.prod.toUpperCase() })\r\n\r\n        var serversInStopActions = new Set()\r\n        var databasesInStopActions = new Set()\r\n\r\n        //on recupere les servers dans les etapes d'arret\r\n        StopActions.map(action => {\r\n            if (action.server === undefined || action.server === \"\") { return };\r\n            serversInStopActions.add(action.server.toUpperCase())\r\n            \r\n            if(action.type === \"database\"){\r\n                databasesInStopActions.add(action.name.toUpperCase())\r\n\r\n            }\r\n            \r\n        })\r\n\r\n        //on rajoute les serveurs manquants\r\n        serversInStopActions.forEach(server => {\r\n\r\n            if (!Allservers.includes(server)) {\r\n                Allservers.push(server)\r\n                var name =\"\"\r\n                server.startsWith(\"sw\")\r\n                    ? name = server.replace(\"sw\", \"SRV_WIN_\")\r\n                    : name = server\r\n                setServers([...servers, { id: (servers.length + 1), prod: server.toUpperCase(), hprod: \"definir\", dev: \"definir\", name:name }])\r\n\r\n            }\r\n        })\r\n        \r\n        databasesInStopActions.forEach(database => {\r\n\r\n            if (!Allservers.includes(database)) {\r\n                Allservers.push(database)\r\n                var name = `BDD_${database}`\r\n                setServers([...servers, { id: (servers.length + 1), prod: database.toUpperCase(), hprod: \"definir\", dev: \"definir\", name:name }])\r\n\r\n            }\r\n        })\r\n\r\n        //On enleve les serveurs absents dans la liste des actions\r\n        Allservers.map(server => {\r\n            if (!serversInStopActions.has(server) && !databasesInStopActions.has(server)) {\r\n                const newServerState = servers.filter(serverprod => serverprod.prod !== server)\r\n                setServers(newServerState)\r\n\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    const saveStart = (object) => {\r\n        setStartActions(object)\r\n        //setAutoStartActions(object)\r\n\r\n    }\r\n\r\n\r\n    const saveStop = (object) => {\r\n        setStopActions(object)\r\n\r\n        // if(autoRelance)\r\n        //reverseStopAction(object)\r\n\r\n        saveServer(object)\r\n    }\r\n\r\n\r\n\r\n    const reverseStopAction = (actions) => {\r\n        var newRelance = actions.slice(0).reverse().map(action => {\r\n            if (action.type === \"service\" || action.type === \"database\" || action.type === \"process\") {\r\n                if (action.action === \"status\") {\r\n                    action = { ...action, action: \"start\" }\r\n                } else {\r\n                    action = { ...action, action: \"status\", options: { result: \"running\" } }\r\n                }\r\n\r\n            }\r\n            if (action.type === \"script\") {\r\n                action = { ...action, path: \"\" }\r\n\r\n            }\r\n            if (action.type === \"command\") {\r\n                action = { ...action, name: \"\", result: \"\" }\r\n            }\r\n            return action\r\n        })\r\n        //console.log(\"stopAction \",StopActions)\r\n        //console.log(\"new relance : \",newRelance)\r\n        console.log(\"input : \", actions)\r\n        for (var i = 0; i < newRelance.length; i++) {\r\n            if (newRelance[i]) {\r\n                newRelance[i].index = i\r\n            }\r\n\r\n        }\r\n        setAutoStartActions(newRelance)\r\n        console.log(\"actions \", actions, \" vs \", newRelance)\r\n    }\r\n\r\n    const generateJson = () => {\r\n\r\n        console.log(\"name \", title)\r\n\r\n        const parpre = {\r\n            name: title,\r\n            auteur: \"Samba NDIAYE\",\r\n            date_de_creation: new Date().toLocaleString(),\r\n            type: \"PARPRE\",\r\n            Arret: StopActions,\r\n            Relance: autoRelance ? AutoStartActions : StartActions,\r\n            POS: posActions,\r\n            variables: {\r\n                servers: servers\r\n            }\r\n        }\r\n\r\n        axios.post(`http://localhost:5000/api/PARPRE/create`, { data: parpre, mode: pageMode })\r\n            .then(res => console.log(res))\r\n\r\n        console.log(JSON.stringify(parpre))\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div className={classes.root}>\r\n            <Grid container spacing={2}>\r\n                <Grid item md={6}>\r\n                    {\r\n                        titleOpen ?\r\n                            (\r\n                                <TextField\r\n                                    placeholder=\"Changer le titre\"\r\n                                    onBlur={() => setTitleOpen(false)}\r\n                                    margin=\"dense\"\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    autoFocus\r\n                                    value={title}\r\n                                />\r\n                            )\r\n                            :\r\n                            (\r\n                                <div>\r\n                                    <Typography\r\n                                        variant='h6'\r\n                                        gutterBottom\r\n                                        onClick={() => setTitleOpen(true)}\r\n                                    >\r\n                                        Nom : {title}\r\n\r\n                                    </Typography>\r\n                                </div>\r\n                            )\r\n                    }\r\n                </Grid>\r\n\r\n                {/**\r\n                 <Grid item md={2}>\r\n                  <FormGroup>\r\n                        <FormControlLabel\r\n                            control = {<Switch onChange={()=> setAutoCreate(!autoCreate)}/>}\r\n                            checked={autoCreate}\r\n                            label = \"Verification-Auto\"\r\n                        >\r\n                        \r\n\r\n                        </FormControlLabel>\r\n                        \r\n                    </FormGroup>\r\n                    </Grid> \r\n                 */}\r\n\r\n\r\n\r\n                <Grid item md={3}>\r\n                    <FormGroup>\r\n                        {documentType === \"PARPRE\" ?\r\n                            (\r\n                                <FormControlLabel\r\n                                    control={<Switch onChange={() => { reverseStopAction(StopActions); setAutoRelance(!autoRelance) }} />}\r\n                                    checked={autoRelance}\r\n                                    label=\"Relance-Auto\"\r\n                                >\r\n                                </FormControlLabel>\r\n                            )\r\n                            :\r\n                            (\r\n                                null\r\n                            )\r\n                        }\r\n                    </FormGroup>\r\n\r\n                </Grid>\r\n                <Grid item md={3}>\r\n\r\n                    <RadioGroup value={documentType} onChange={(e) => setDocumentType(e.target.value)}>\r\n                        <FormGroup row >\r\n                            <FormControlLabel value=\"POS\" label=\"POS\" control={<Radio color=\"primary\" />} />\r\n                            <FormControlLabel value=\"PARPRE\" label=\"PARPRE\" control={<Radio color=\"primary\" />} />\r\n                        </FormGroup>\r\n                    </RadioGroup>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            {\r\n                documentType === \"POS\" ?\r\n\r\n                    (\r\n                        <ARCard\r\n                            name=\"ProcÃ©dure d'Ouverture de Service\"\r\n                            type=\"pos\"\r\n                            actions={posActions}\r\n                            SetActions={setPosActions}\r\n                            generateJson={generateJson}\r\n                            key={4}\r\n                        />\r\n                    )\r\n                    :\r\n                    (\r\n                        <div>\r\n                            <ARCard\r\n                                name=\"ArrÃªt\"\r\n                                type=\"stop\"\r\n                                actions={StopActions}\r\n                                SetActions={saveStop}\r\n                                autoRelance={autoRelance}\r\n                                AddServer={saveServer}\r\n                                generateJson={generateJson}\r\n                                key={1}\r\n\r\n                            />\r\n                            {autoRelance ?\r\n                                (<ARCard\r\n                                    name=\"Auto-Relance\"\r\n                                    type=\"start\"\r\n                                    actions={AutoStartActions}\r\n                                    SetActions={setAutoStartActions}\r\n                                    autoRelance={autoRelance}\r\n                                    AddServer={saveServer}\r\n                                    generateJson={generateJson}\r\n                                    key={2}\r\n\r\n                                />\r\n                                )\r\n                                :\r\n                                (<ARCard\r\n                                    name=\"Relance\"\r\n                                    type=\"start\"\r\n                                    actions={StartActions}\r\n                                    SetActions={saveStart}\r\n                                    AddServer={saveServer}\r\n                                    key={3}\r\n                                />\r\n\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n            }\r\n\r\n            <RightNav ServerRow={servers} saveRows={setServers} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Create;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js",["141"],"import { Button, Grid, IconButton, InputBase, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { useEffect, useState } from 'react';\r\nimport { Add, ArrowBack, ArrowForward, SearchSharp } from '@material-ui/icons';\r\nimport ListSSA from '../Components/Manage/ListSSA';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    head: {\r\n        marginLeft: theme.spacing(1),\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(3)\r\n\r\n    }\r\n}))\r\n\r\n\r\nconst Manage = () => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const [POS, SetPOS] = useState([])\r\n    const [ExcelTab, SetExcelTab] = useState(false)\r\n    const [allExcel, setAllExcel] = useState([])\r\n\r\n    useEffect(() => {\r\n        document.title = \"Modify\"        \r\n        getAllPos()\r\n        GetAllExcel()\r\n        \r\n    }, [])\r\n\r\n\r\n    const GetAllExcel =() =>{\r\n            \r\n        axios.post(`http://localhost:5000/api/ConvertAll-Excel`)\r\n            .then(res =>  {setAllExcel(res.data); console.log(\"data \",res.data)})\r\n            \r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    const getAllPos = async () => {\r\n        await fetch(`${url}/AllPOS`)\r\n            .then(Response => Response.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                SetPOS(result)\r\n            })\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.head}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item sm={4}>\r\n                        <Button\r\n                            startIcon={\r\n                                ExcelTab ? <ArrowBack /> : <ArrowForward />\r\n                            }\r\n                            variant=\"contained\"\r\n                            elevation={0}\r\n                            onClick={() => SetExcelTab(!ExcelTab)}\r\n\r\n                        > {!ExcelTab\r\n                            ? `ImportÃ©s depuis Excel ( ${allExcel.length} )`\r\n                            : `EnregistrÃ©s ( ${POS.length} )`\r\n\r\n                            }\r\n\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={3}>\r\n                        <Paper component=\"form\" elevation={1} >\r\n                            <IconButton aria-label=\"menu\">\r\n                                <SearchSharp />\r\n                            </IconButton>\r\n                            <InputBase\r\n\r\n                                placeholder=\"Rechercher une SSA\"\r\n                            />\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                    {/*\r\n                    <Grid item sm={3}>\r\n                        \r\n                        \r\n                        \r\n                       \r\n                        <FormControl size=\"medium\" variant=\"filled\">\r\n                            <InputLabel id=\"filter\">Filter par</InputLabel>\r\n                            <Select labelId=\"filter\" value=\"filtre\" >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value=\"nom\">Nom</MenuItem>\r\n                                <MenuItem value={20}>Type</MenuItem>\r\n                                <MenuItem value={30}>Ã©tat</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        \r\n                    </Grid>\r\n                     */}\r\n                </Grid>\r\n            </div>\r\n\r\n            <div>\r\n                <Grid style={{ padding: 5 }} container direction=\"row\" className={classes.root}>\r\n                    <Grid item xs={3} md={1} sm={1} >\r\n                        <Typography>Code</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={3} sm={3}  >\r\n                        <Typography> Nom</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={1} sm={1}  >\r\n                        <Typography> Etapes</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={2} sm={2}  >\r\n                        <Typography> Auteur</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={2} sm={2}  >\r\n                        <Typography> Date de crÃ©ation </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={3} sm={3} spacing={1} container justify=\"center\">\r\n                        <Typography>Actions</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    ExcelTab  ?\r\n                        (\r\n                            allExcel.length > 0 ?\r\n                            (\r\n                                allExcel.map(excel => (\r\n                                <ListSSA ssa={excel} fromExcel={true} key={excel._id} />\r\n                            ))  \r\n                            )  :\r\n                            (\r\n                                <Typography>Chargement</Typography>\r\n                            )                       \r\n\r\n                        )\r\n                        :\r\n                        (\r\n                            POS.map(pos => (\r\n                                <ListSSA ssa={pos} key={pos._id} fromExcel={false}/>\r\n                            ))\r\n                        )\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Manage;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js",["142","143","144"],"import { makeStyles } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory} from 'react-router'\r\n\r\nimport ARCard from \"../Components/ARCard\";\r\nimport RightNav from \"../Components/Creation/RightNav\";\r\n\r\nconst drawerWidthRight = 260\r\n\r\nconst useStyles = makeStyles((theme) =>{\r\n    return{\r\n        root:{\r\n            width:`calc(100% - ${drawerWidthRight}px)`   \r\n        }\r\n\r\n}})\r\nconst Modify = () => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const [state, setState] = useState({})\r\n    const history = useHistory()\r\n    const classes = useStyles()\r\n\r\n    useEffect(()=>{\r\n        console.log(\"starting \",history.location.state)\r\n        document.title=history.location.state.name\r\n        setState(history.location.state)\r\n        console.log(\"state \",state)\r\n\r\n    },[])\r\n\r\n    const [servers, setServers] = useState([\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" }\r\n    ])\r\n\r\n\r\n\r\n    return ( \r\n        <div className={classes.root}>\r\n            <ARCard \r\n            name=\"ArrÃªt\" \r\n            type=\"stop\"  \r\n            actions={history.location.state.Arret}\r\n\r\n            />\r\n\r\n            <ARCard \r\n            name=\"Relance\" \r\n            type=\"start\" \r\n            actions={history.location.state.Relance} />\r\n            \r\n            <RightNav  ServerRow={servers}/>\r\n            \r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Modify;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js",["145","146"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js",["147","148"],"import {  Box, Drawer, makeStyles,Typography } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport {DataGrid} from '@material-ui/data-grid';\r\n\r\nconst drawerWidthRight = 280\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n\r\n    return {\r\n        root: {\r\n\r\n        },\r\n        navRight: {\r\n            width: drawerWidthRight,\r\n            //display:'none'\r\n        },\r\n        drawerPaperRight: {\r\n            width: drawerWidthRight,\r\n            backgroundColor: \"#FFFFF\",\r\n            borderLeft: '0px'\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\nconst RightNav = ({ ServerRow, saveRows }) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const columns = [\r\n        {field : 'prod', headerName: 'prod', width : 90, editable : true, sortable:false },\r\n        {field : 'hprod', headerName: 'hprod', width : 90, editable : true, sortable:false },\r\n        {field : 'dev', headerName: 'IPP2', width :90, editable : true, sortable:false }\r\n    ]\r\n\r\n    /*\r\n    useEffect(() => {\r\n      const timer = setInterval(() => {\r\n        setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 20));\r\n      }, 400);\r\n  \r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }, []);\r\n    */\r\n\r\n    const classes = useStyles()\r\n    \r\n    const handleCellchange = (cell) => {\r\n        console.log(\"Changing the \",cell)\r\n        \r\n\r\n        const editedServers = ServerRow.map(row => {\r\n            if(row.id === cell.id){\r\n                row = {...row, [cell.field] :cell.props.value  }\r\n                return row\r\n            }\r\n            return row\r\n        })\r\n        saveRows(editedServers)\r\n        console.log(\"edited \",editedServers)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Drawer\r\n                elevation={0}\r\n                variant=\"permanent\"\r\n                anchor='right'\r\n                classes={{ paper: classes.drawerPaperRight }}\r\n                className={classes.navRight}\r\n            >\r\n                <Box>\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            Variables\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                        \r\n                    <div style={{height : 300,width:\"100%\"}}>\r\n                        <DataGrid \r\n                        rows={ServerRow}\r\n                        columns={columns}\r\n                        hideFooter\r\n                        disableColumnMenu\r\n                        rowHeight={40}\r\n                        headerHeight={40}\r\n                        onEditCellChangeCommitted={cell => handleCellchange(cell)}\r\n                        \r\n                        />\r\n                    </div>\r\n                </Box>\r\n\r\n                <Box>\r\n                    {/**\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            VÃ©rification Active\r\n                        </Typography>\r\n                    </Box>\r\n                    \r\n                    <Grid container spacing={1} alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\">\r\n                                <Computer color=\"primary\" />\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Ping : SW11203</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Divider style={{ margin: \"10px \" }} />\r\n                    <Grid container alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\" >\r\n                                <Settings color=\"primary\" />\r\n\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Service : BITS</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                     */}\r\n                </Box>\r\n            </Drawer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightNav\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js",["149"],"import { Button, CardActionArea, makeStyles } from '@material-ui/core';\r\nimport { useEffect } from 'react';\r\nimport { Avatar, Card, CardContent, Grid, Typography } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n        flexGrow: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n\r\n}))\r\nconst ListSSA = ({ ssa, fromExcel }) => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const history = useHistory()\r\n\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        //console.log(ssa)\r\n    })\r\n\r\n    const visitPOS = (ssa) => {\r\n        console.log(\"ssa \", ssa)\r\n        history.push({\r\n            pathname: '/create',\r\n            state: ssa,\r\n            fromExcel: fromExcel\r\n        })\r\n    }\r\n    const getAPOS = (id) => {\r\n        fetch(`${url}/getAPOS?id=${id}`)\r\n            .then(Response => Response.json())\r\n            .then(result => visitPOS(result))\r\n    }\r\n    const testSSA = (ssa) => {\r\n        history.push({\r\n            pathname: '/testSSA',\r\n            state: ssa\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root} elevation={0.5}>\r\n                <CardActionArea >\r\n\r\n                    <CardContent  >\r\n\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item xs={1} md={1} sm={1} >\r\n                                <Avatar onClick={() => console.log(\"ssa clicked\")}>\r\n                                    {\r\n                                        ssa.name.split(\"_\").length > 1\r\n                                            ? ssa.name.split(\"_\")[1][0].toUpperCase()\r\n                                            : ssa.name[0].toUpperCase()\r\n                                    }\r\n\r\n\r\n                                </Avatar>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={3} md={3} sm={3}  >\r\n                                <Typography> {ssa.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={1} sm={1}  >\r\n                                <Typography> {ssa.Arret.length} - {ssa.Relance.length}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}  >\r\n                                <Typography> {ssa.auteur}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}  >\r\n                                <Typography> {new Date(ssa.createdAt).toLocaleString()}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={3} sm={2} >\r\n                                <Grid spacing={1} container justify=\"space-around\" alignContent=\"center\">\r\n                                    <Grid item md={5}>\r\n                                        <Button variant=\"outlined\" color=\"default\" onClick={() => visitPOS(ssa)}>PARPRE/POS</Button>\r\n                                    </Grid>\r\n                                    <Grid item md={4}>\r\n                                        {!fromExcel\r\n                                            ? <Button variant=\"outlined\" color=\"primary\" onClick={() => testSSA(ssa)}>Tester</Button>\r\n                                            : <Button variant=\"outlined\" color=\"primary\" onClick={() => testSSA(ssa)}>Importer</Button>\r\n\r\n                                        }\r\n                                    </Grid>\r\n                                    <Grid item md={3}>\r\n                                        <Button >\r\n                                            <Delete color=\"secondary\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </CardContent>\r\n                </CardActionArea>\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListSSA;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js",["150","151","152","153","154"],"import { Avatar, Box, Button,FormControl, Grid,  InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport {  Web } from \"@material-ui/icons\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport ClickDialog from \"../Creation/ClickDialog\"\r\nimport ConnectionDialog from \"../Creation/ConnectionDialog\"\r\nimport FormDialog from \"../Creation/FormDialog\"\r\nimport DisconnectDialog from \"../Creation/isconnectialog\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n    },\r\n    dropDown: {\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst WebAction = ({ index, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchor] = useState(null)\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n    const [state, setState] = useState({ initialSTate })\r\n    const [actionType, setActionType] = useState(\"connection\")\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n    const [informations, setInformations] = useState({})\r\n    const [optionDialog, setOptionDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n\r\n\r\n    const handleClick = (event) => {\r\n        setAnchor(event.currentTarget)\r\n    }\r\n    const handleClose = () => {\r\n        setAnchor(null)\r\n    }\r\n    const reduire = () => {\r\n\r\n    }\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        if (initialSTate.informations.type) {\r\n            console.log(\"action type \", initialSTate.informations.type)\r\n            setActionType(initialSTate.informations.type)\r\n        }\r\n        setInformations(initialSTate.informations)\r\n        setOptions(initialSTate.options)\r\n\r\n\r\n    }, []\r\n    )\r\n    const formatUrl = (url) => {\r\n\r\n        if (url.startsWith(\"http\")) {\r\n\r\n            console.log('url est bonne')\r\n            return url\r\n        } else {\r\n            console.log('error url')\r\n            return \"http://\" + url\r\n        }\r\n\r\n    }\r\n\r\n    const testConnection = async (e) => {\r\n\r\n        const formatedUrl = formatUrl(e.target.value)\r\n        setState({ ...state, link: formatedUrl })\r\n\r\n        if (formatedUrl !== '') {\r\n\r\n            console.log('accessing ', formatedUrl)\r\n\r\n            setState({ ...state, url: formatedUrl })\r\n\r\n            fetch(`http://localhost:5000/api/PARPRE/link?url=${formatedUrl}`)\r\n                .then(res => res.json())\r\n                .then(result => console.log(result.result))\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const showDialog = () => {\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n\r\n\r\n\r\n    const saveInformations = () => {\r\n\r\n        if (state.url === undefined) { return }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"webAction\",\r\n            url: state.url,\r\n            informations: informations,\r\n            options: options\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n\r\n                >\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\" >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Web color=\"primary\" />\r\n                        </Box>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item md={6} xl={2}>\r\n                        <TextField\r\n\r\n                            className={classes.fields}\r\n                            id='url'\r\n                            color='primary'\r\n                            label='Lien'\r\n                            value={state.url}\r\n                            onChange={(e) => setState({ ...state, url: e.target.value })}\r\n                            onBlur={(e) => { testConnection(e); saveInformations() }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} xl={3} >\r\n                        <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={actionType} onChange={(e) => {setActionType(e.target.value);setInformations({...informations,type:e.target.value})}}>\r\n                                <MenuItem value=\"connection\" >Connexion</MenuItem>\r\n                                <MenuItem value=\"logOut\" >DÃ©connexion</MenuItem>\r\n                                <MenuItem value=\"click\">Click</MenuItem>\r\n                                <MenuItem value=\"form\">Remplir champ(s)</MenuItem>\r\n                                <MenuItem value=\"verify\">VÃ©rifier un contenu</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item md={2} >\r\n\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <FormControl >\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={showDialog}>options</Button>\r\n                            </FormControl>\r\n                        </Box>\r\n\r\n                    </Grid>\r\n\r\n                    {openDialog && actionType === \"connection\" ?\r\n                        /**Dialog connexion */\r\n\r\n                        (\r\n                            <ConnectionDialog\r\n                                informations={informations}\r\n                                setInformations={setInformations}\r\n                                closeDialog={closeDialog}\r\n                                openDialog={openDialog}\r\n                                saveInformations={saveInformations}\r\n\r\n\r\n                            />\r\n                        ) : actionType === \"logOut\" ?\r\n                            /**Dialog deconnexion */\r\n                            (\r\n                                <DisconnectDialog\r\n                                    informations={informations}\r\n                                    setInformations={setInformations}\r\n                                    closeDialog={closeDialog}\r\n                                    openDialog={openDialog}\r\n                                    saveInformations={saveInformations}\r\n                                />\r\n                            ) : actionType === \"click\" ?\r\n                                /**Dialog clicke */\r\n\r\n                                (\r\n                                    <ClickDialog\r\n                                        informations={informations}\r\n                                        setInformations={setInformations}\r\n                                        closeDialog={closeDialog}\r\n                                        openDialog={openDialog}\r\n                                        saveInformations={saveInformations}\r\n                                    />\r\n                                ) :\r\n                                /**Dialog remplir */\r\n                                 actionType === \"form\" ?\r\n                                (\r\n                                    <FormDialog\r\n                                        informations={informations}\r\n                                        setInformations={setInformations}\r\n                                        closeDialog={closeDialog}\r\n                                        openDialog={openDialog}\r\n                                        saveInformations={saveInformations}\r\n                                    />\r\n                                ):(\r\n                                    <FormDialog\r\n                                        informations={informations}\r\n                                        setInformations={setInformations}\r\n                                        closeDialog={closeDialog}\r\n                                        openDialog={openDialog}\r\n                                        saveInformations={saveInformations}\r\n                                    />\r\n                                )\r\n                    }\r\n\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={optionDialog}\r\n                                    setOpenDialog={setOptionDialog}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WebAction;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js",["155"],"import { Avatar, Box, FormControl, Grid,  InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport {makeStyles} from '@material-ui/core'\r\nimport {  Http } from \"@material-ui/icons\"\r\nimport { useContext,useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root:{\r\n        background:'#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields:{\r\n        width:\"100%\"\r\n    },\r\n    dropDown:{\r\n        width:\"100%\"\r\n    },\r\n    smallAvatar: {\r\n      width: theme.spacing(2.5),\r\n      height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst Link = ({index,initialSTate}) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction,saveData} = useContext(ActionContext)\r\n    const [state, setState] = useState({initialSTate})\r\n    const [urlState, setUrlState] = useState(\"UP\")\r\n    const [navigationMode, setnavigationMode] = useState(\"normal\")\r\n\r\n    useEffect(() =>{\r\n        setState(initialSTate)\r\n        setState(initialSTate)\r\n\r\n    },[]\r\n    )\r\n    const formatUrl = (url) =>{\r\n\r\n        if(url.startsWith(\"http\") || url.length < 4){\r\n\r\n            console.log('url est bonne')\r\n            return url\r\n        }else{\r\n            console.log('error url')    \r\n            return \"http://\"+url       \r\n        }\r\n        \r\n    }\r\n\r\n\r\n    const testConnection = async (e) =>{\r\n\r\n        const formatedUrl = formatUrl(e.target.value)\r\n        setState({...state,url:formatedUrl})\r\n\r\n        if(e.target.value !== ''){\r\n\r\n            console.log('accessing ',formatedUrl)\r\n\r\n            await fetch(`http://localhost:5000/api/PARPRE/link?url=${formatedUrl}`)\r\n                .then(res => res.json())\r\n                .then(result => console.log(result.result))\r\n                .then(()=>saveInformations())\r\n        }\r\n  \r\n    }\r\n\r\n    const saveInformations = () =>{\r\n\r\n        if(state.url ===undefined){return}\r\n        console.log(\"state before save : \",state)\r\n\r\n        saveData({\r\n            index:index,\r\n            type:\"link\",\r\n            url:state.url,                             \r\n            informations:\r\n            {\r\n                urlState : urlState,\r\n                navigationMode : navigationMode                                  \r\n            }})\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <Paper \r\n                elevation={0}\r\n                className= {classes.root}>\r\n                <Grid \r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\" >\r\n\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\" >\r\n                        <Box  display=\"flex\" justifyContent=\"center\">\r\n                            <Http color=\"primary\" />\r\n                        </Box>                       \r\n                        \r\n                    </Grid>\r\n                    \r\n                    <Grid item md={6} xl={2}>\r\n                        <TextField\r\n                        \r\n                        className={classes.fields} \r\n                        id='url'\r\n                        value = {state.url}\r\n                        color='primary'\r\n                        label= 'Lien'\r\n\r\n                        onChange={(e) => setState({...state, url: formatUrl(e.target.value)})}\r\n                        onBlur={(e) => {\r\n                            testConnection(e)\r\n                        }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2} >\r\n                    <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Etat du site</InputLabel>\r\n                            <Select value={urlState} onChange={(e) => (setUrlState(e.target.value))} onBlur={saveInformations}>\r\n                                <MenuItem value=\"Down\" >Down</MenuItem>\r\n                                <MenuItem value=\"UP\">UP</MenuItem>\r\n                                <MenuItem value=\"Null\">Page blanche</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} xl={2} >\r\n                    <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Navigation</InputLabel>\r\n                            <Select value={navigationMode} onChange={(e) => (setnavigationMode(e.target.value))} onBlur={saveInformations}>\r\n                                <MenuItem value=\"PrivÃ©e\" >PrivÃ©e</MenuItem>\r\n                                <MenuItem value=\"normal\">Normal</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                   \r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                    <OptionMenu index={index} deleteAction={deleteAction} duplicateAction={duplicateAction} />\r\n                            </Grid>\r\n                        \r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                    \r\n                                    <Typography>\r\n                                        {index + 1}\r\n                                    </Typography> \r\n                                    \r\n                                    \r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n                        \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Link;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js",["156","157"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Description } from \"@material-ui/icons\"\r\nimport { useContext, useState, useEffect } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst ARScript = ({ index, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction, saveData, AddServer } = useContext(ActionContext)\r\n\r\n    const [state, setState] = useState({ initialSTate })\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        setOptions(initialSTate.options)\r\n\r\n\r\n    }, []\r\n    )\r\n\r\n    const saveInformations = () => {\r\n        if (state.path === undefined || state.server === undefined) { return }\r\n        saveData(\r\n            {\r\n                index: index, type: \"script\", server: state.server, path: state.path, options: options,\r\n\r\n                os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    alignItems=\"center\"\r\n                    spacing={2}\r\n\r\n                >\r\n\r\n                    <Grid item sm={1} md={1} xl={1}>\r\n                        <Box my=\"auto\" display=\"flex\" justifyContent=\"center\">\r\n                            <Description color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            className={classes.fields}\r\n                            id='server'\r\n                            color='primary'\r\n                            label='Serveur'\r\n\r\n                        />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item sm={8} md={8} xl={8}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, path: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            value={state.path}\r\n                            className={classes.fields}\r\n                            id='Path'\r\n                            color='primary'\r\n                            label='Path'\r\n                            error={state.path === \"\"}\r\n\r\n\r\n                        />\r\n                    </Grid>\r\n\r\n\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n\r\n\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ARScript;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js",["158","159"],"import { Avatar, Box, FormControl, Grid, InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Storage } from \"@material-ui/icons\"\r\nimport { useContext, useState, useEffect } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\n\r\nconst Database = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n\r\n    const [state, setState] = useState({ initialSTate })\r\n    const [status, setStatus] = useState(type)\r\n    const [databaseType, setDatabaseType] = useState(\"MSSQL\")\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase())\r\n            setOptions(initialSTate.options)\r\n        }\r\n\r\n        initialSTate.databaseType !== undefined\r\n            ? setDatabaseType(initialSTate.databaseType.toUpperCase())\r\n            : setDatabaseType(\"MSSQL\")\r\n\r\n    }, []\r\n    )\r\n\r\n    const saveInformations = () => {\r\n\r\n        if (state.name === undefined || state.server === undefined) { return }\r\n\r\n        let result\r\n        if (status === \"status\") {\r\n            type === \"stop\" ? result = \"stopped\" : result = \"running\"\r\n        }\r\n\r\n        saveData(\r\n            {\r\n                index: index,\r\n                type: \"database\",\r\n                server: state.server,\r\n                name: state.name,\r\n                action: status,\r\n                databaseType: databaseType,\r\n                options: options,\r\n\r\n                os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n\r\n                >\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Storage color=\"primary\" />\r\n                        </Box>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id='server'\r\n                            color='primary'\r\n                            label='Serveur'\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server && state.server.split(\"\").length > 20 && state.server.split(\"\").length < 65 ? 13 :\r\n                                            state.server && state.server.split(\"\").length > 65 ? 13 : \"1rem\"\r\n                                }\r\n                            }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations} >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\" >Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <TextField\r\n                            autoComplete=\"false\"\r\n                            className={classes.fields}\r\n                            value={state.name}\r\n                            id='DBName'\r\n                            color='primary'\r\n                            label='Instance'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select value={databaseType} onChange={(e) => setDatabaseType(e.target.value)} onBlur={saveInformations} >\r\n                                <MenuItem value=\"MSSQL\">MSSQL</MenuItem>\r\n                                <MenuItem value=\"MONGODB\">MONGODB</MenuItem>\r\n                                <MenuItem value=\"Oracle\" >Oracle</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Database;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js",["160","161"],"import { Avatar, Box, FormControl, Grid,  InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Autorenew } from \"@material-ui/icons\"\r\nimport { useContext, useState, useEffect } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst Process = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const [state, setState] = useState(initialSTate)\r\n    const [status, setStatus] = useState(initialSTate.action)\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        setOptions(initialSTate.options)\r\n\r\n        setStatus(initialSTate.action)\r\n        \r\n    },[]\r\n    )\r\n\r\n    const { deleteAction, duplicateAction, saveData, AddServer } = useContext(ActionContext)\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) { return }\r\n\r\n        saveData(\r\n            {\r\n                index: index, type: \"process\", server: state.server, name: state.name, action: status, options: options,\r\n\r\n                os: \"windows\"\r\n\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    alignItems=\"center\"\r\n                    spacing={2}\r\n                >\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Autorenew color=\"primary\" />\r\n                        </Box>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            value={state.server}\r\n\r\n                            className={classes.fields}\r\n                            id='server'\r\n                            color='primary'\r\n                            label='Serveur' />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={status} onChange={(e) => setStatus(e.target.value)} onBlur={saveInformations} >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\" >Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} md={6} xl={6}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id='processus'\r\n                            value={state.name}\r\n                            color='primary'\r\n                            label='Processus'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Process;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js",["162","163","164","165"],"import { Avatar, Box, FormControl, Grid, InputLabel, MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { SettingsSharp } from \"@material-ui/icons\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        //marginRight:theme.spacing(2),\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst Service = ({ index, type, initialSTate }) => {\r\n    //css\r\n    const classes = useStyles()\r\n\r\n    const [action, setAction] = useState('STOP')\r\n    //lÃ©tat du composant\r\n    const [state, setState] = useState({ initialSTate })\r\n    //l'Ã©tat du server\r\n    const [pingState, setPingState] = useState(\"ko\")\r\n    const [status, setStatus] = useState(type)\r\n    //menu options\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log(\"index \",index, \" initial state \",initialSTate)\r\n        setState(initialSTate)\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase())\r\n            setOptions(initialSTate.options)\r\n        }\r\n\r\n    },[]\r\n    )\r\n\r\n\r\n    //context pour sauvegarder l'Ã©tat dans le parent\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) { return }\r\n        saveData(\r\n            {\r\n                index: index,\r\n                type: \"service\",\r\n                server: state.server,\r\n                name: state.name,\r\n                action: status,\r\n                options: options,\r\n                os: \"windows\"\r\n            }\r\n        )\r\n    }\r\n    //test si le service existe\r\n    const testService = async (service) => {\r\n\r\n        if (state.server === null || pingState === \"ko\") { return }\r\n\r\n        console.log(\"Testing service : \", service, \"server \", state.server)\r\n        fetch(`http://localhost:5000/api/PARPRE/service?name=${service}&server=${state.server}`)\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n        //.then(() => saveInformations())\r\n    }\r\n    //Fait un ping\r\n    const testPing = async (server) => {\r\n\r\n\r\n        await fetch(`http://localhost:5000/api/PARPRE?server=${server}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                setPingState(result)\r\n                console.log(result.state)\r\n                //saveInformations()\r\n\r\n                if (result.state === \"ok\") {\r\n\r\n                }\r\n\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Grid item md={1} xl={1} >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <SettingsSharp color=\"primary\" />\r\n                        </Box>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.server}\r\n                            id={`server- ${index}`}\r\n                            color='primary'\r\n                            label='Serveur'\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations()\r\n\r\n                                testPing(e.target.value)\r\n\r\n                            }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                fullWidth\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value )} onBlur={() => saveInformations()}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\" >Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item md={6} xl={6}>\r\n                        <TextField\r\n                            value={state.name}\r\n                            className={classes.fields}\r\n                            id={`serviceName- ${index}`}\r\n                            color='primary'\r\n                            label='Service'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={(e) => saveInformations()}\r\n                        //testService(e.target.value)\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Service;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js",["166"],"import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport {  Comment, Delete, FileCopy, MoreVert } from \"@material-ui/icons\";\r\nimport {  useState } from \"react\";\r\n\r\nconst OptionMenu = ({index,deleteAction,duplicateAction, setOpenDialog}) => {\r\n\r\n    const [anchorEl, setAnchor] = useState(null)\r\n\r\n    const handleClick = (event) =>{\r\n        setAnchor(event.currentTarget)\r\n    }\r\n\r\n    const handleClose= () => {\r\n        setAnchor(null)\r\n    }\r\n\r\n    const showDialog = () =>{\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () =>{\r\n        setOpenDialog(false);\r\n    }\r\n    \r\n\r\n    return ( \r\n        <div>\r\n            <IconButton onClick={handleClick}>\r\n                <MoreVert />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n\r\n                <MenuItem onClick={() => {\r\n\r\n                    deleteAction(index)\r\n                    setAnchor(null)\r\n                    \r\n                    }} >\r\n                    \r\n                    <Delete />Supprimer\r\n                \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {\r\n                        \r\n                        handleClose()\r\n                        duplicateAction(index)\r\n                    }\r\n                } \r\n                >\r\n                    <FileCopy /> Dupliquer\r\n                        \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {showDialog(); handleClose()}} >\r\n                    <Comment /> Options\r\n\r\n                </MenuItem>\r\n            </Menu>\r\n            \r\n\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default OptionMenu;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js",["167"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, Link, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst DisconnectDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"logOut\" })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>DÃ©connexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sÃ©lecteur est obtenu en faisant un click droit sur le champ Ã  automatiser,\r\n                        Inspecter\" puis click droit sur l'Ã©lÃ©ment html et \"copy selector\".\r\n                        Ici prÃ©ciser le lien de dÃ©connection ou le sÃ©lecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Link />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOut}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"logout\"\r\n                                        label=\"lien de dÃ©connexion\"\r\n                                        autoComplete={false}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, logOut: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOutSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"logOut-selector\"\r\n                                        label=\"ou sÃ©lecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, logOutSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default DisconnectDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js",["168"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, IconButton, TextField } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst FormDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({...informations, type:\"form\"})\r\n        console.log(\"updated de dialog form\")\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Remplir un ou des champs </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sÃ©lecteur est obtenu en faisant un click droit sur le champ Ã  automatiser,\r\n                        Inspecter\" puis click droit sur l'Ã©lÃ©ment html et \"copy selector\".\r\n                        Ici prÃ©ciser le lien de dÃ©connection ou le sÃ©lecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.field}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        label=\"Valeur\"\r\n                                        autoComplete={true}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, field: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.fieldSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        label=\"sÃ©lecteur\"\r\n                                        autoComplete\r\n                                        onChange={(e) => (setInformations({ ...informations, fieldSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <IconButton>\r\n                                <Add />\r\n                            </IconButton>\r\n\r\n                        </Box>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js",["169"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\r\nimport { AccountCircle, ArrowRight, Lock } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n\r\nconst ConnectionDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"connection\" })\r\n        console.log(\"updated de dialog\")\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title' >Connexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sÃ©lecteur est obtenu en faisant un click droit sur le champ Ã  automatiser,\r\n                        Inspecter\" puis click droit sur l'Ã©lÃ©ment html et \"copy selector\"\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <AccountCircle />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.login}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"login\"\r\n                                        label=\"Login\"\r\n                                        onChange={(e) => (setInformations({ ...informations, login: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.loginSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"login-selector\"\r\n                                        label=\"sÃ©lecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, loginSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Lock />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        value={informations.password}\r\n                                        margin=\"dense\"\r\n                                        id=\"password\"\r\n                                        label=\"Mot de passe\"\r\n                                        type=\"password\"\r\n                                        onChange={(e) => (setInformations({ ...informations, password: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.passwordSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"password-selector\"\r\n                                        label=\"sÃ©lecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, passwordSelector: e.target.value }))}\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Box>\r\n\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth >\r\n                                    <InputLabel>Navigateur</InputLabel>\r\n                                    <Select value={informations.navigator || \"Chrome\"} onChange={(e) => setInformations({ ...informations, navigator: e.target.value })}>\r\n                                        <MenuItem value=\"Chrome\" >Chrome</MenuItem>\r\n                                        <MenuItem value=\"Firefox\">Firefox</MenuItem>\r\n                                        <MenuItem value=\"Edge\">Edge</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel>Mode de Navigation</InputLabel>\r\n                                    <Select value={informations.navigatorMode || \"normal\"} onChange={(e) => (setInformations({ ...informations, navigatorMode: e.target.value }))}>\r\n                                        <MenuItem value=\"normal\" >Normal</MenuItem>\r\n                                        <MenuItem value=\"private\">privÃ©</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConnectionDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js",["170"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ClickDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(()=>{\r\n        setInformations({...informations, type:\"click\"})\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Effectuer un Click </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sÃ©lecteur est obtenu en faisant un click droit sur le champ Ã  automatiser,\r\n                        Inspecter\" puis click droit sur l'Ã©lÃ©ment html et \"copy selector\".\r\n                        Ici prÃ©ciser les coordonnÃ©es ou le sÃ©lecteur.\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid container item spacing={2}>\r\n                                    <Box display=\"flex\" justifyContent=\"inline-block\">\r\n                                        <TextField\r\n                                            value={informations.x}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-x\"\r\n                                            label=\"coordonnÃ©es X\"\r\n                                            autoComplete={false}\r\n                                            onChange={(e) => (setInformations({ ...informations, x: e.target.value }))}\r\n                                        />\r\n                                        <TextField\r\n                                            value={informations.y}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-y\"\r\n                                            label=\"coordonnÃ©es Y\"\r\n                                            autoComplete={false}\r\n\r\n                                            onChange={(e) => (setInformations({ ...informations, y: e.target.value }))}\r\n                                        />\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.clickSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"click-selector\"\r\n                                        label=\"Ou selecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, clickSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClickDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js",["171","172","173"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Code } from \"@material-ui/icons\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        //marginRight:theme.spacing(2),\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\n\r\nconst Command = ({ index, initialSTate }) => {\r\n    //css\r\n    const classes = useStyles()\r\n\r\n    const [state, setState] = useState({ initialSTate })\r\n    //l'Ã©tat du server\r\n    const [pingState, setPingState] = useState(\"ko\")\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        setOptions(initialSTate.options)\r\n\r\n\r\n    }, []\r\n    )\r\n\r\n\r\n    //context pour sauvegarder l'Ã©tat dans le parent\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n\r\n    const saveInformations = () => {\r\n\r\n        if (state.server === undefined || state.name === undefined) { return }\r\n\r\n        saveData(\r\n            {\r\n                index: index,\r\n                type: \"command\",\r\n                server: state.server,\r\n                name: state.name,\r\n                login: state.login,\r\n                result: state.result,\r\n                options: options,\r\n                os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n\r\n            }\r\n        )\r\n    }\r\n    //test si le service existe\r\n    const testService = async (service) => {\r\n\r\n        if (state.server === null || pingState === \"ko\") { return }\r\n\r\n        console.log(\"Testing service : \", service, \"server \", state.server)\r\n        fetch(`http://localhost:5000/api/PARPRE/service?name=${service}&server=${state.server}`)\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n    }\r\n    //Fait un ping\r\n    const testPing = async (server) => {\r\n\r\n\r\n        await fetch(`http://localhost:5000/api/PARPRE?server=${server}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                setPingState(result)\r\n                console.log(result.state)\r\n                //saveInformations()\r\n\r\n                if (result.state === \"ok\") {\r\n\r\n                }\r\n\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Grid item md={1} xl={1} >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Code color=\"primary\" />\r\n                        </Box>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.server}\r\n                            id={`server- ${index}`}\r\n                            color='primary'\r\n                            label='Serveur'\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server && state.server.split(\"\").length > 20 && state.server.split(\"\").length < 65 ? 13 :\r\n                                            state.server && state.server.split(\"\").length > 65 ? 13 : \"1rem\"\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.login}\r\n                            id={`login- ${index}`}\r\n                            color='primary'\r\n                            label='Login'\r\n                            onChange={(e) => setState({ ...state, login: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: { fontSize: state.login && state.login.split(\"\").length > 60 ? 14 : \"1rem\" }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={5} xl={4}>\r\n                        <TextField\r\n                            value={state.name}\r\n                            className={classes.fields}\r\n                            id={`command- ${index}`}\r\n                            color='primary'\r\n                            label='Commande'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            error={state.name === \"\"}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name && state.name.split(\"\").length > 40 && state.name.split(\"\").length < 65 ? 14 :\r\n                                            state.name && state.name.split(\"\").length > 65 ? 13 : \"1rem\"\r\n                                }\r\n                            }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.result}\r\n                            id={`result- ${index}`}\r\n                            color='primary'\r\n                            label='RÃ©sultat'\r\n                            onChange={(e) => setState({ ...state, result: e.target.value })}\r\n                            onBlur={saveInformations}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={2} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Command;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\TestSSA.js",["174","175","176","177"],"import { Accordion, AccordionSummary, AccordionDetails, CardHeader, Divider, Paper } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core'\r\nimport { useHistory } from 'react-router';\r\nimport { ExpandMore } from '@material-ui/icons';\r\n\r\n\r\nconst TestSSA = () => {\r\n\r\n    const history = useHistory()\r\n    const [state, setState] = useState()\r\n    const [services, setServices] = useState([])\r\n    const [databases, setDatabase] = useState([])\r\n\r\n    useEffect(() => {\r\n        setState(history.location.state)\r\n        getDatabases()\r\n        getServices()\r\n\r\n        console.log(\"state \", state, \"hstory \", history.location)\r\n    }, [])\r\n    \r\n\r\n    const getDatabases = () => {\r\n        var DBs = new Set()\r\n        history.location.state.Arret.map(action => {\r\n            action.type === \"database\" && DBs.add(action.name)\r\n        })\r\n        setDatabase(Array.from(DBs))\r\n    }\r\n    const getServices = () => {\r\n        var SVCs = new Set()\r\n        history.location.state.Arret.map(action => {\r\n            action.type === \"service\" && SVCs.add(action.name)\r\n        })\r\n        setServices(Array.from(SVCs))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"row\" spacing={1} >\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"Production\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Accordion>\r\n                                                    <AccordionSummary expandIcon={<ExpandMore />}>\r\n                                                        <Typography>Server : {variable.prod}</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <Grid container spacing={2}>\r\n                                                            {\r\n                                                                services.length > 0 && services.map(service => (\r\n                                                                    <Grid item md={12}>\r\n                                                                        <Typography color=\"primary\">\r\n                                                                            service : {service}\r\n                                                                        </Typography>\r\n                                                                    </Grid>\r\n                                                                ))\r\n                                                            }\r\n                                                            {\r\n                                                                databases.map(database => (\r\n                                                                    <Grid item md={12}>\r\n                                                                        <Typography color=\"primary\">\r\n                                                                            Base de donnÃ©es : {database}\r\n                                                                        </Typography>\r\n                                                                    </Grid>\r\n                                                                ))\r\n                                                            }\r\n                                                        </Grid>\r\n\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n\r\n                                            ))\r\n                                        }\r\n\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"HPROD\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Accordion>\r\n                                                    <AccordionSummary expandIcon={<ExpandMore />}>\r\n                                                        <Typography>Server : {variable.hprod}</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        {\r\n                                                            history.location.state.Arret.map(action => (\r\n                                                                <Typography color=\"primary\">{action.type} : {action.name || action.path}</Typography>\r\n                                                            ))\r\n                                                        }\r\n\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n\r\n                                            ))\r\n                                        }\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"HPROD2\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Typography gutterBottom>\r\n                                                    Server : {variable.dev}\r\n                                                    <Divider variant=\"fullWidth\" />\r\n                                                    {\r\n                                                        variable.dev && history.location.state.Arret.map(action => (\r\n                                                            <Typography color=\"primary\">{action.type} : {action.name || action.path}</Typography>\r\n                                                        ))\r\n                                                    }\r\n                                                </Typography>\r\n\r\n                                            ))\r\n                                        }\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TestSSA;",{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":34,"column":12,"nodeType":"184","messageId":"185","endLine":34,"endColumn":22},{"ruleId":"182","severity":1,"message":"186","line":34,"column":24,"nodeType":"184","messageId":"185","endLine":34,"endColumn":37},{"ruleId":"187","severity":1,"message":"188","line":83,"column":8,"nodeType":"189","endLine":83,"endColumn":10,"suggestions":"190"},{"ruleId":"191","severity":1,"message":"192","line":95,"column":32,"nodeType":"193","messageId":"194","endLine":95,"endColumn":34},{"ruleId":"191","severity":1,"message":"195","line":96,"column":72,"nodeType":"196","messageId":"197","endLine":96,"endColumn":78},{"ruleId":"191","severity":1,"message":"195","line":131,"column":31,"nodeType":"193","messageId":"198","endLine":131,"endColumn":33},{"ruleId":"182","severity":1,"message":"199","line":3,"column":10,"nodeType":"184","messageId":"185","endLine":3,"endColumn":13},{"ruleId":"182","severity":1,"message":"200","line":18,"column":11,"nodeType":"184","messageId":"185","endLine":18,"endColumn":14},{"ruleId":"187","severity":1,"message":"201","line":29,"column":7,"nodeType":"189","endLine":29,"endColumn":9,"suggestions":"202"},{"ruleId":"182","severity":1,"message":"203","line":31,"column":21,"nodeType":"184","messageId":"185","endLine":31,"endColumn":31},{"ruleId":"182","severity":1,"message":"204","line":15,"column":7,"nodeType":"184","messageId":"185","endLine":15,"endColumn":16},{"ruleId":"187","severity":1,"message":"205","line":32,"column":8,"nodeType":"189","endLine":32,"endColumn":10,"suggestions":"206"},{"ruleId":"182","severity":1,"message":"207","line":32,"column":12,"nodeType":"184","messageId":"185","endLine":32,"endColumn":20},{"ruleId":"182","severity":1,"message":"208","line":32,"column":22,"nodeType":"184","messageId":"185","endLine":32,"endColumn":33},{"ruleId":"182","severity":1,"message":"209","line":41,"column":11,"nodeType":"184","messageId":"185","endLine":41,"endColumn":18},{"ruleId":"182","severity":1,"message":"210","line":34,"column":12,"nodeType":"184","messageId":"185","endLine":34,"endColumn":20},{"ruleId":"182","severity":1,"message":"211","line":53,"column":11,"nodeType":"184","messageId":"185","endLine":53,"endColumn":22},{"ruleId":"182","severity":1,"message":"212","line":56,"column":11,"nodeType":"184","messageId":"185","endLine":56,"endColumn":22},{"ruleId":"182","severity":1,"message":"213","line":59,"column":11,"nodeType":"184","messageId":"185","endLine":59,"endColumn":18},{"ruleId":"187","severity":1,"message":"214","line":72,"column":8,"nodeType":"189","endLine":72,"endColumn":10,"suggestions":"215"},{"ruleId":"187","severity":1,"message":"214","line":37,"column":7,"nodeType":"189","endLine":37,"endColumn":9,"suggestions":"216"},{"ruleId":"182","severity":1,"message":"217","line":26,"column":54,"nodeType":"184","messageId":"185","endLine":26,"endColumn":63},{"ruleId":"187","severity":1,"message":"214","line":45,"column":8,"nodeType":"189","endLine":45,"endColumn":10,"suggestions":"218"},{"ruleId":"187","severity":1,"message":"214","line":56,"column":8,"nodeType":"189","endLine":56,"endColumn":10,"suggestions":"219"},{"ruleId":"182","severity":1,"message":"220","line":65,"column":52,"nodeType":"184","messageId":"185","endLine":65,"endColumn":58},{"ruleId":"187","severity":1,"message":"214","line":47,"column":7,"nodeType":"189","endLine":47,"endColumn":9,"suggestions":"221"},{"ruleId":"182","severity":1,"message":"217","line":50,"column":54,"nodeType":"184","messageId":"185","endLine":50,"endColumn":63},{"ruleId":"182","severity":1,"message":"222","line":29,"column":12,"nodeType":"184","messageId":"185","endLine":29,"endColumn":18},{"ruleId":"182","severity":1,"message":"223","line":29,"column":20,"nodeType":"184","messageId":"185","endLine":29,"endColumn":29},{"ruleId":"187","severity":1,"message":"224","line":55,"column":7,"nodeType":"189","endLine":55,"endColumn":9,"suggestions":"225"},{"ruleId":"182","severity":1,"message":"226","line":78,"column":11,"nodeType":"184","messageId":"185","endLine":78,"endColumn":22},{"ruleId":"182","severity":1,"message":"227","line":21,"column":11,"nodeType":"184","messageId":"185","endLine":21,"endColumn":22},{"ruleId":"187","severity":1,"message":"228","line":8,"column":8,"nodeType":"189","endLine":8,"endColumn":10,"suggestions":"229"},{"ruleId":"187","severity":1,"message":"228","line":11,"column":8,"nodeType":"189","endLine":11,"endColumn":10,"suggestions":"230"},{"ruleId":"187","severity":1,"message":"228","line":13,"column":8,"nodeType":"189","endLine":13,"endColumn":10,"suggestions":"231"},{"ruleId":"187","severity":1,"message":"228","line":9,"column":7,"nodeType":"189","endLine":9,"endColumn":9,"suggestions":"232"},{"ruleId":"187","severity":1,"message":"214","line":50,"column":8,"nodeType":"189","endLine":50,"endColumn":10,"suggestions":"233"},{"ruleId":"182","severity":1,"message":"226","line":76,"column":11,"nodeType":"184","messageId":"185","endLine":76,"endColumn":22},{"ruleId":"182","severity":1,"message":"234","line":86,"column":11,"nodeType":"184","messageId":"185","endLine":86,"endColumn":19},{"ruleId":"182","severity":1,"message":"235","line":1,"column":78,"nodeType":"184","messageId":"185","endLine":1,"endColumn":83},{"ruleId":"187","severity":1,"message":"236","line":21,"column":8,"nodeType":"189","endLine":21,"endColumn":10,"suggestions":"237"},{"ruleId":"191","severity":1,"message":"195","line":26,"column":49,"nodeType":"193","messageId":"198","endLine":26,"endColumn":51},{"ruleId":"191","severity":1,"message":"195","line":33,"column":49,"nodeType":"193","messageId":"198","endLine":33,"endColumn":51},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"no-unused-vars","'autoCreate' is assigned a value but never used.","Identifier","unusedVar","'setAutoCreate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history.location'. Either include it or remove the dependency array.","ArrayExpression",["240"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","expectedInside","'Add' is defined but never used.","'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history.location.state' and 'state'. Either include them or remove the dependency array.",["241"],"'setServers' is assigned a value but never used.","'cardWidth' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["242"],"'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'getAPOS' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'reduire' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialSTate'. Either include it or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["243"],["244"],"'AddServer' is assigned a value but never used.",["245"],["246"],"'result' is assigned a value but never used.",["247"],"'action' is assigned a value but never used.","'setAction' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'index' and 'initialSTate'. Either include them or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["248"],"'testService' is assigned a value but never used.","'closeDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'informations' and 'setInformations'. Either include them or remove the dependency array. If 'setInformations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["249"],["250"],["251"],["252"],["253"],"'testPing' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'getDatabases', 'getServices', 'history.location', and 'state'. Either include them or remove the dependency array.",["254"],"no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"261","fix":"263"},{"desc":"261","fix":"264"},{"desc":"261","fix":"265"},{"desc":"261","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"269","fix":"271"},{"desc":"269","fix":"272"},{"desc":"269","fix":"273"},{"desc":"261","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [history.location]",{"range":"277","text":"278"},"Update the dependencies array to be: [history.location.state, state]",{"range":"279","text":"280"},"Update the dependencies array to be: [actions]",{"range":"281","text":"282"},"Update the dependencies array to be: [initialSTate]",{"range":"283","text":"284"},{"range":"285","text":"284"},{"range":"286","text":"284"},{"range":"287","text":"284"},{"range":"288","text":"284"},"Update the dependencies array to be: [index, initialSTate]",{"range":"289","text":"290"},"Update the dependencies array to be: [informations, setInformations]",{"range":"291","text":"292"},{"range":"293","text":"292"},{"range":"294","text":"292"},{"range":"295","text":"292"},{"range":"296","text":"284"},"Update the dependencies array to be: [getDatabases, getServices, history.location, state]",{"range":"297","text":"298"},[3065,3067],"[history.location]",[821,823],"[history.location.state, state]",[1335,1337],"[actions]",[2263,2265],"[initialSTate]",[1173,1175],[1293,1295],[1715,1717],[1355,1357],[1698,1700],"[index, initialSTate]",[433,435],"[informations, setInformations]",[472,474],[545,547],[417,419],[1325,1327],[723,725],"[getDatabases, getServices, history.location, state]"]