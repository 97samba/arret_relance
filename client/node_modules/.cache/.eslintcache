[{"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js":"1","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js":"2","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js":"3","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js":"4","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js":"5","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js":"6","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js":"7","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js":"8","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js":"9","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js":"10","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js":"11","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js":"12","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js":"13","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js":"14","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js":"15","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js":"16","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js":"17","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js":"18","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js":"19","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js":"20","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js":"21","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js":"22","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js":"23","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js":"24","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js":"25","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js":"26","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js":"27","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\TestSSA.js":"28"},{"size":449,"mtime":1618580424144,"results":"29","hashOfConfig":"30"},{"size":1506,"mtime":1623950191227,"results":"31","hashOfConfig":"30"},{"size":12868,"mtime":1624893526245,"results":"32","hashOfConfig":"30"},{"size":1484,"mtime":1622925716169,"results":"33","hashOfConfig":"30"},{"size":5698,"mtime":1624365219396,"results":"34","hashOfConfig":"30"},{"size":2385,"mtime":1624892602131,"results":"35","hashOfConfig":"30"},{"size":1547,"mtime":1623225871088,"results":"36","hashOfConfig":"30"},{"size":135,"mtime":1618569284110,"results":"37","hashOfConfig":"30"},{"size":6533,"mtime":1624892334102,"results":"38","hashOfConfig":"30"},{"size":8322,"mtime":1624892537839,"results":"39","hashOfConfig":"30"},{"size":5334,"mtime":1624892269583,"results":"40","hashOfConfig":"30"},{"size":4224,"mtime":1624892522633,"results":"41","hashOfConfig":"30"},{"size":1027,"mtime":1624892504136,"results":"42","hashOfConfig":"30"},{"size":10263,"mtime":1624897632939,"results":"43","hashOfConfig":"30"},{"size":5997,"mtime":1624892403130,"results":"44","hashOfConfig":"30"},{"size":4932,"mtime":1624892355937,"results":"45","hashOfConfig":"30"},{"size":7408,"mtime":1624892380362,"results":"46","hashOfConfig":"30"},{"size":5612,"mtime":1624892417664,"results":"47","hashOfConfig":"30"},{"size":7367,"mtime":1624892428452,"results":"48","hashOfConfig":"30"},{"size":71,"mtime":1618846144628,"results":"49","hashOfConfig":"30"},{"size":1799,"mtime":1624892303391,"results":"50","hashOfConfig":"30"},{"size":3450,"mtime":1624909157700,"results":"51","hashOfConfig":"30"},{"size":3298,"mtime":1624898525760,"results":"52","hashOfConfig":"30"},{"size":7689,"mtime":1624891740762,"results":"53","hashOfConfig":"30"},{"size":6820,"mtime":1624897275857,"results":"54","hashOfConfig":"30"},{"size":4152,"mtime":1624019311765,"results":"55","hashOfConfig":"30"},{"size":8234,"mtime":1624522698319,"results":"56","hashOfConfig":"30"},{"size":10975,"mtime":1624871776257,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"175tmnb",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"60"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"60"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"60"},"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js",[],["129","130"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js",["131","132","133","134","135","136"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js",["137"],"import { Button, Grid, IconButton, InputBase, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { useEffect, useState } from 'react';\r\nimport { Add, ArrowBack, ArrowForward, SearchSharp } from '@material-ui/icons';\r\nimport ListSSA from '../Components/Manage/ListSSA';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    head: {\r\n        marginLeft: theme.spacing(1),\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(3)\r\n\r\n    }\r\n}))\r\n\r\n\r\nconst Manage = () => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const [POS, SetPOS] = useState([])\r\n    const [ExcelTab, SetExcelTab] = useState(false)\r\n    const [allExcel, setAllExcel] = useState([])\r\n\r\n    useEffect(() => {\r\n        document.title = \"Modify\"        \r\n        getAllPos()\r\n        GetAllExcel()\r\n        \r\n    }, [])\r\n\r\n\r\n    const GetAllExcel =() =>{\r\n            \r\n        axios.post(`http://localhost:5000/api/ConvertAll-Excel`)\r\n            .then(res =>  {setAllExcel(res.data); console.log(\"data \",res.data)})\r\n            \r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    const getAllPos = async () => {\r\n        await fetch(`${url}/AllPOS`)\r\n            .then(Response => Response.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                SetPOS(result)\r\n            })\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.head}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item sm={4}>\r\n                        <Button\r\n                            startIcon={\r\n                                ExcelTab ? <ArrowBack /> : <ArrowForward />\r\n                            }\r\n                            variant=\"contained\"\r\n                            elevation={0}\r\n                            onClick={() => SetExcelTab(!ExcelTab)}\r\n\r\n                        > {!ExcelTab\r\n                            ? `Importés depuis Excel ( ${allExcel.length} )`\r\n                            : `Enregistrés ( ${POS.length} )`\r\n\r\n                            }\r\n\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={3}>\r\n                        <Paper component=\"form\" elevation={1} >\r\n                            <IconButton aria-label=\"menu\">\r\n                                <SearchSharp />\r\n                            </IconButton>\r\n                            <InputBase\r\n\r\n                                placeholder=\"Rechercher une SSA\"\r\n                            />\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                    {/*\r\n                    <Grid item sm={3}>\r\n                        \r\n                        \r\n                        \r\n                       \r\n                        <FormControl size=\"medium\" variant=\"filled\">\r\n                            <InputLabel id=\"filter\">Filter par</InputLabel>\r\n                            <Select labelId=\"filter\" value=\"filtre\" >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value=\"nom\">Nom</MenuItem>\r\n                                <MenuItem value={20}>Type</MenuItem>\r\n                                <MenuItem value={30}>état</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        \r\n                    </Grid>\r\n                     */}\r\n                </Grid>\r\n            </div>\r\n\r\n            <div>\r\n                <Grid style={{ padding: 5 }} container direction=\"row\" className={classes.root}>\r\n                    <Grid item xs={3} md={1} sm={1} >\r\n                        <Typography>Code</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={3} sm={3}  >\r\n                        <Typography> Nom</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={1} sm={1}  >\r\n                        <Typography> Etapes</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={2} sm={2}  >\r\n                        <Typography> Auteur</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={2} sm={2}  >\r\n                        <Typography> Date de création </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={3} sm={3} spacing={1} container justify=\"center\">\r\n                        <Typography>Actions</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    ExcelTab  ?\r\n                        (\r\n                            allExcel.length > 0 ?\r\n                            (\r\n                                allExcel.map(excel => (\r\n                                <ListSSA ssa={excel} fromExcel={true} key={excel._id} />\r\n                            ))  \r\n                            )  :\r\n                            (\r\n                                <Typography>Chargement</Typography>\r\n                            )                       \r\n\r\n                        )\r\n                        :\r\n                        (\r\n                            POS.map(pos => (\r\n                                <ListSSA ssa={pos} key={pos._id} fromExcel={false}/>\r\n                            ))\r\n                        )\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Manage;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js",["138","139","140"],"import { makeStyles } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory} from 'react-router'\r\n\r\nimport ARCard from \"../Components/ARCard\";\r\nimport RightNav from \"../Components/Creation/RightNav\";\r\n\r\nconst drawerWidthRight = 260\r\n\r\nconst useStyles = makeStyles((theme) =>{\r\n    return{\r\n        root:{\r\n            width:`calc(100% - ${drawerWidthRight}px)`   \r\n        }\r\n\r\n}})\r\nconst Modify = () => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const [state, setState] = useState({})\r\n    const history = useHistory()\r\n    const classes = useStyles()\r\n\r\n    useEffect(()=>{\r\n        console.log(\"starting \",history.location.state)\r\n        document.title=history.location.state.name\r\n        setState(history.location.state)\r\n        console.log(\"state \",state)\r\n\r\n    },[])\r\n\r\n    const [servers, setServers] = useState([\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" }\r\n    ])\r\n\r\n\r\n\r\n    return ( \r\n        <div className={classes.root}>\r\n            <ARCard \r\n            name=\"Arrêt\" \r\n            type=\"stop\"  \r\n            actions={history.location.state.Arret}\r\n\r\n            />\r\n\r\n            <ARCard \r\n            name=\"Relance\" \r\n            type=\"start\" \r\n            actions={history.location.state.Relance} />\r\n            \r\n            <RightNav  ServerRow={servers}/>\r\n            \r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Modify;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js",["141","142"],"import { Button, Container, makeStyles, Card, CardHeader, CardContent } from '@material-ui/core'\r\nimport { Autorenew, Code, Description, Http, KeyboardArrowRight, SettingsSharp, Storage, Web } from '@material-ui/icons';\r\nimport Service from './Actions/Service';\r\nimport Database from './Actions/Database';\r\nimport Process from './Actions/Process';\r\nimport ARScript from './Actions/ARScript';\r\nimport { useEffect, useState } from 'react';\r\nimport SpeedDial from '@material-ui/lab/SpeedDial'\r\nimport { SpeedDialAction, SpeedDialIcon } from '@material-ui/lab';\r\nimport ActionContext from '../Context/ActionContext';\r\nimport Link from './Actions/Link'\r\nimport WebAction from './Actions/WebAction';\r\nimport Command from './Actions/Command';\r\n\r\nconst cardWidth = 850\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        // width : cardWidth,\r\n        marginBottom: theme.spacing(2)\r\n    }\r\n}))\r\nconst ARCard = ({ name, actions, SetActions, autoRelance, type, AddServer, generateJson }) => {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = useState(false)\r\n    const [index, setIndex] = useState(actions.length)\r\n    var second = actions.length\r\n\r\n    //console.log(\"second \", second, \" index \", index)\r\n\r\n    useEffect(() => {\r\n        console.log(\"nombre d'actions \", actions.length, \" actions \", actions)\r\n    }, [])\r\n\r\n    const testPing = (server) => {\r\n        fetch(`http://localhost:5000/api/PARPRE?server=${server}`)\r\n            .then(res => res.json())\r\n            .then(result => { console.log(\"error\"); return result })\r\n    }\r\n\r\n    const addAction = (_type) => {\r\n        const newState = [\r\n            ...actions, {\r\n                index: second,\r\n                type: _type,\r\n                action: type,\r\n                informations: {\r\n                },\r\n                options: {\r\n                    block: true,\r\n                    prod: true,\r\n                    hprod: true,\r\n                    inte: true,\r\n                    dev: true,\r\n\r\n                }\r\n            }\r\n        ]\r\n        console.log(\"new state \", newState)\r\n\r\n        SetActions(newState)\r\n        setIndex(index + 1)\r\n        second++\r\n    }\r\n\r\n    const deleteAction = (actionID) => {\r\n\r\n        console.log(\"deleting \", actions.filter(action => action.index === actionID)\r\n        )\r\n\r\n        const newState = actions.filter(action => action.index !== actionID)\r\n        var i;\r\n\r\n        for (i = 0; i < newState.length; i++) {\r\n            newState[i].index = i;\r\n        }\r\n\r\n        setIndex(newState.length)\r\n\r\n        //newState.map(action => console.log(action))\r\n\r\n        SetActions(newState)\r\n\r\n        //console.log(\"index \", index)\r\n\r\n    }\r\n\r\n    const duplicateAction = (actionID) => {\r\n\r\n        var actionToDuplicateIndex = actionID\r\n        var clone = actions[actionToDuplicateIndex]\r\n\r\n\r\n        console.log(\"action to duplicate\", clone, \"index \", actionToDuplicateIndex, \" actionId \", actionID)\r\n\r\n        var newClone = { ...clone, action: \"status\", duplicated: \"duplicated\" }\r\n        actionToDuplicateIndex = actionToDuplicateIndex + 1\r\n        console.log(\"before splice \", actions)\r\n\r\n        actions.splice(actionToDuplicateIndex, 0, newClone)\r\n\r\n        console.log(\"new array \", actions)\r\n\r\n\r\n        for (var i = 0; i < actions.length; i++) {\r\n            actions[i].index = i;\r\n            //console.log(actions[i].server)\r\n        }\r\n        console.log(\"after array \", actions)\r\n\r\n\r\n\r\n        //newState.map(action => console.log(action))\r\n\r\n        SetActions(actions)\r\n        setIndex(actions.length)\r\n    }\r\n\r\n    const saveData = (object) => {\r\n\r\n        const result = actions.filter(e => e.index === object.index)\r\n\r\n        if (result.length > 0) {\r\n\r\n            const index = actions.findIndex(e => e.index === object.index)\r\n\r\n            console.log('Changement', actions[index])\r\n\r\n            actions.splice(index, 1, object)\r\n\r\n            SetActions(actions)\r\n\r\n        }\r\n        else {\r\n            console.log(\"Nouvelle entrée\")\r\n            const newState = [\r\n                ...actions, object\r\n            ]\r\n            SetActions(newState)\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    const iconsAction = [\r\n        { icon: <Http />, name: 'Url', action: () => addAction(\"link\") },\r\n        { icon: <Web />, name: 'Action Web', action: () => addAction(\"webAction\") },\r\n        { icon: <SettingsSharp />, name: 'Service', action: () => addAction(\"service\") },\r\n        { icon: <Autorenew />, name: 'Processus', action: () => addAction(\"process\") },\r\n        { icon: <Description />, name: 'Script', action: () => addAction(\"script\") },\r\n        { icon: <Storage />, name: 'Base de données', action: () => addAction(\"database\") },\r\n        { icon: <Code />, name: 'Commande', action: () => addAction(\"command\") }\r\n    ]\r\n    //{icon : <Save />, name: 'Disque', action: () => addAction(\"disk\")},\r\n    //{icon : <AccountTree />, name: 'Disque', action: () => addAction(\"Pool\")}\r\n    return (\r\n        <Container>\r\n            <Card className={classes.root}>\r\n                <CardHeader\r\n                    title={name}\r\n                    subheader=\"hybride\"\r\n                    action={\r\n                        <SpeedDial\r\n                            ariaLabel=\"SpeedDial\"\r\n                            icon={<SpeedDialIcon />}\r\n                            open={open}\r\n                            direction='left'\r\n                            onOpen={() => setOpen(true)}\r\n                            onMouseLeave={() => setOpen(false)}\r\n                        >\r\n                            {iconsAction.map((action) => (\r\n                                <SpeedDialAction\r\n                                    key={action.name}\r\n                                    icon={action.icon}\r\n                                    tooltipTitle={action.name}\r\n                                    tooltipPlacement='top'\r\n                                    onClick={action.action}\r\n\r\n                                />\r\n                            ))}\r\n                        </SpeedDial>\r\n                    }\r\n                />\r\n\r\n                <CardContent>\r\n                    <ActionContext.Provider value={{ actions, deleteAction, duplicateAction, saveData, testPing, AddServer }}>\r\n                        <form noValidate autoComplete='on'>\r\n                            {actions.map((item, index) => (\r\n                                (\r\n                                    item.type === \"service\" ? <Service key={item.index} index={item.index} type={type} initialSTate={item} /> :\r\n                                        item.type === \"script\" ? <ARScript key={item.index} index={item.index} initialSTate={item} /> :\r\n                                            item.type === \"database\" ? <Database key={item.index} index={item.index} type={type} initialSTate={item} /> :\r\n                                                item.type === \"process\" ? <Process key={item.index} index={item.index} type={type} initialSTate={item} /> :\r\n                                                    item.type === \"link\" ? <Link key={item.index} index={item.index} initialSTate={item} /> :\r\n                                                        item.type === \"webAction\" ? <WebAction key={item.index} index={item.index} initialSTate={item} /> :\r\n                                                            item.type === \"command\" ? <Command key={item.index} index={item.index} initialSTate={item} /> :\r\n                                                                item.type === \"disk\" ? <Service key={item.index} index={item.index} type={type} initialSTate={item} /> :\r\n                                                                    null\r\n                                )\r\n                            ))}\r\n                            <Button\r\n\r\n                                color=\"secondary\"\r\n                                variant=\"contained\"\r\n                                onClick={generateJson}\r\n\r\n                                endIcon={<KeyboardArrowRight />}>\r\n                                Save\r\n                            </Button>\r\n                        </form>\r\n                    </ActionContext.Provider>\r\n                </CardContent>\r\n            </Card>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default ARCard;\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js",["143","144"],"import {  Box, Drawer, makeStyles,Typography } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport {DataGrid} from '@material-ui/data-grid';\r\n\r\nconst drawerWidthRight = 280\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n\r\n    return {\r\n        root: {\r\n\r\n        },\r\n        navRight: {\r\n            width: drawerWidthRight,\r\n            //display:'none'\r\n        },\r\n        drawerPaperRight: {\r\n            width: drawerWidthRight,\r\n            backgroundColor: \"#FFFFF\",\r\n            borderLeft: '0px'\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\nconst RightNav = ({ ServerRow, saveRows }) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const columns = [\r\n        {field : 'prod', headerName: 'prod', width : 90, editable : true, sortable:false },\r\n        {field : 'hprod', headerName: 'hprod', width : 90, editable : true, sortable:false },\r\n        {field : 'dev', headerName: 'IPP2', width :90, editable : true, sortable:false }\r\n    ]\r\n\r\n    /*\r\n    useEffect(() => {\r\n      const timer = setInterval(() => {\r\n        setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 20));\r\n      }, 400);\r\n  \r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }, []);\r\n    */\r\n\r\n    const classes = useStyles()\r\n    \r\n    const handleCellchange = (cell) => {\r\n        console.log(\"Changing the \",cell)\r\n        \r\n\r\n        const editedServers = ServerRow.map(row => {\r\n            if(row.id === cell.id){\r\n                row = {...row, [cell.field] :cell.props.value  }\r\n                return row\r\n            }\r\n            return row\r\n        })\r\n        saveRows(editedServers)\r\n        console.log(\"edited \",editedServers)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Drawer\r\n                elevation={0}\r\n                variant=\"permanent\"\r\n                anchor='right'\r\n                classes={{ paper: classes.drawerPaperRight }}\r\n                className={classes.navRight}\r\n            >\r\n                <Box>\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            Variables\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                        \r\n                    <div style={{height : 300,width:\"100%\"}}>\r\n                        <DataGrid \r\n                        rows={ServerRow}\r\n                        columns={columns}\r\n                        hideFooter\r\n                        disableColumnMenu\r\n                        rowHeight={40}\r\n                        headerHeight={40}\r\n                        onEditCellChangeCommitted={cell => handleCellchange(cell)}\r\n                        \r\n                        />\r\n                    </div>\r\n                </Box>\r\n\r\n                <Box>\r\n                    {/**\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            Vérification Active\r\n                        </Typography>\r\n                    </Box>\r\n                    \r\n                    <Grid container spacing={1} alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\">\r\n                                <Computer color=\"primary\" />\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Ping : SW11203</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Divider style={{ margin: \"10px \" }} />\r\n                    <Grid container alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\" >\r\n                                <Settings color=\"primary\" />\r\n\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Service : BITS</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                     */}\r\n                </Box>\r\n            </Drawer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightNav\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js",["145"],"import { Button, CardActionArea, makeStyles } from '@material-ui/core';\r\nimport { useEffect } from 'react';\r\nimport { Avatar, Card, CardContent, Grid, Typography } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n        flexGrow: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n\r\n}))\r\nconst ListSSA = ({ ssa, fromExcel }) => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const history = useHistory()\r\n\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        //console.log(ssa)\r\n    })\r\n\r\n    const visitPOS = (ssa) => {\r\n        console.log(\"ssa \", ssa)\r\n        history.push({\r\n            pathname: '/create',\r\n            state: ssa,\r\n            fromExcel: fromExcel\r\n        })\r\n    }\r\n    const getAPOS = (id) => {\r\n        fetch(`${url}/getAPOS?id=${id}`)\r\n            .then(Response => Response.json())\r\n            .then(result => visitPOS(result))\r\n    }\r\n    const testSSA = (ssa) => {\r\n        history.push({\r\n            pathname: '/testSSA',\r\n            state: ssa\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root} elevation={0.5}>\r\n                <CardActionArea >\r\n\r\n                    <CardContent  >\r\n\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item xs={1} md={1} sm={1} >\r\n                                <Avatar onClick={() => console.log(\"ssa clicked\")}>\r\n                                    {\r\n                                        ssa.name.split(\"_\").length > 1\r\n                                            ? ssa.name.split(\"_\")[1][0].toUpperCase()\r\n                                            : ssa.name[0].toUpperCase()\r\n                                    }\r\n\r\n\r\n                                </Avatar>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={3} md={3} sm={3}  >\r\n                                <Typography> {ssa.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={1} sm={1}  >\r\n                                <Typography> {ssa.Arret.length} - {ssa.Relance.length}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}  >\r\n                                <Typography> {ssa.auteur}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}  >\r\n                                <Typography> {new Date(ssa.createdAt).toLocaleString()}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={3} sm={2} >\r\n                                <Grid spacing={1} container justify=\"space-around\" alignContent=\"center\">\r\n                                    <Grid item md={5}>\r\n                                        <Button variant=\"outlined\" color=\"default\" onClick={() => visitPOS(ssa)}>PARPRE/POS</Button>\r\n                                    </Grid>\r\n                                    <Grid item md={4}>\r\n                                        {!fromExcel\r\n                                            ? <Button variant=\"outlined\" color=\"primary\" onClick={() => testSSA(ssa)}>Tester</Button>\r\n                                            : <Button variant=\"outlined\" color=\"primary\" onClick={() => testSSA(ssa)}>Importer</Button>\r\n\r\n                                        }\r\n                                    </Grid>\r\n                                    <Grid item md={3}>\r\n                                        <Button >\r\n                                            <Delete color=\"secondary\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </CardContent>\r\n                </CardActionArea>\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListSSA;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js",["146","147","148","149","150"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js",["151"],"import { Avatar, Box, FormControl, Grid,  InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport {makeStyles} from '@material-ui/core'\r\nimport {  Http } from \"@material-ui/icons\"\r\nimport { useContext,useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root:{\r\n        background:'#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields:{\r\n        width:\"100%\"\r\n    },\r\n    dropDown:{\r\n        width:\"100%\"\r\n    },\r\n    smallAvatar: {\r\n      width: theme.spacing(2.5),\r\n      height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst Link = ({index,initialSTate}) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction,saveData} = useContext(ActionContext)\r\n    const [state, setState] = useState({initialSTate})\r\n    const [urlState, setUrlState] = useState(\"UP\")\r\n    const [navigationMode, setnavigationMode] = useState(\"normal\")\r\n\r\n    useEffect(() =>{\r\n        setState(initialSTate)\r\n        setState(initialSTate)\r\n\r\n    },[]\r\n    )\r\n    const formatUrl = (url) =>{\r\n\r\n        if(url.startsWith(\"http\") || url.length < 4){\r\n\r\n            console.log('url est bonne')\r\n            return url\r\n        }else{\r\n            console.log('error url')    \r\n            return \"http://\"+url       \r\n        }\r\n        \r\n    }\r\n\r\n\r\n    const testConnection = async (e) =>{\r\n\r\n        const formatedUrl = formatUrl(e.target.value)\r\n        setState({...state,url:formatedUrl})\r\n\r\n        if(e.target.value !== ''){\r\n\r\n            console.log('accessing ',formatedUrl)\r\n\r\n            await fetch(`http://localhost:5000/api/PARPRE/link?url=${formatedUrl}`)\r\n                .then(res => res.json())\r\n                .then(result => console.log(result.result))\r\n                .then(()=>saveInformations())\r\n        }\r\n  \r\n    }\r\n\r\n    const saveInformations = () =>{\r\n\r\n        if(state.url ===undefined){return}\r\n        console.log(\"state before save : \",state)\r\n\r\n        saveData({\r\n            index:index,\r\n            type:\"link\",\r\n            url:state.url,                             \r\n            informations:\r\n            {\r\n                urlState : urlState,\r\n                navigationMode : navigationMode                                  \r\n            }})\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <Paper \r\n                elevation={0}\r\n                className= {classes.root}>\r\n                <Grid \r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\" >\r\n\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\" >\r\n                        <Box  display=\"flex\" justifyContent=\"center\">\r\n                            <Http color=\"primary\" />\r\n                        </Box>                       \r\n                        \r\n                    </Grid>\r\n                    \r\n                    <Grid item md={6} xl={2}>\r\n                        <TextField\r\n                        \r\n                        className={classes.fields} \r\n                        id='url'\r\n                        value = {state.url}\r\n                        color='primary'\r\n                        label= 'Lien'\r\n\r\n                        onChange={(e) => setState({...state, url: formatUrl(e.target.value)})}\r\n                        onBlur={(e) => {\r\n                            testConnection(e)\r\n                        }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2} >\r\n                    <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Etat du site</InputLabel>\r\n                            <Select value={urlState} onChange={(e) => (setUrlState(e.target.value))} onBlur={saveInformations}>\r\n                                <MenuItem value=\"Down\" >Down</MenuItem>\r\n                                <MenuItem value=\"UP\">UP</MenuItem>\r\n                                <MenuItem value=\"Null\">Page blanche</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} xl={2} >\r\n                    <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Navigation</InputLabel>\r\n                            <Select value={navigationMode} onChange={(e) => (setnavigationMode(e.target.value))} onBlur={saveInformations}>\r\n                                <MenuItem value=\"Privée\" >Privée</MenuItem>\r\n                                <MenuItem value=\"normal\">Normal</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                   \r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                    <OptionMenu index={index} deleteAction={deleteAction} duplicateAction={duplicateAction} />\r\n                            </Grid>\r\n                        \r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                    \r\n                                    <Typography>\r\n                                        {index + 1}\r\n                                    </Typography> \r\n                                    \r\n                                    \r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n                        \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Link;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js",["152","153"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Description } from \"@material-ui/icons\"\r\nimport { useContext, useState, useEffect } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst ARScript = ({ index, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction, saveData, AddServer } = useContext(ActionContext)\r\n\r\n    const [state, setState] = useState({ initialSTate })\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        setOptions(initialSTate.options)\r\n\r\n\r\n    }, []\r\n    )\r\n\r\n    const saveInformations = () => {\r\n        if (state.path === undefined || state.server === undefined) { return }\r\n        saveData(\r\n            {\r\n                index: index, type: \"script\", server: state.server, path: state.path, options: options,\r\n\r\n                os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    alignItems=\"center\"\r\n                    spacing={2}\r\n\r\n                >\r\n\r\n                    <Grid item sm={1} md={1} xl={1}>\r\n                        <Box my=\"auto\" display=\"flex\" justifyContent=\"center\">\r\n                            <Description color=\"primary\" />\r\n                        </Box>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            className={classes.fields}\r\n                            id='server'\r\n                            color='primary'\r\n                            label='Serveur'\r\n\r\n                        />\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item sm={8} md={8} xl={8}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, path: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            value={state.path}\r\n                            className={classes.fields}\r\n                            id='Path'\r\n                            color='primary'\r\n                            label='Path'\r\n                            error={state.path === \"\"}\r\n\r\n\r\n                        />\r\n                    </Grid>\r\n\r\n\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n\r\n\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ARScript;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js",["154","155"],"import { Avatar, Box, FormControl, Grid, InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Storage } from \"@material-ui/icons\"\r\nimport { useContext, useState, useEffect } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\n\r\nconst Database = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n\r\n    const [state, setState] = useState({ initialSTate })\r\n    const [status, setStatus] = useState(type)\r\n    const [databaseType, setDatabaseType] = useState(\"MSSQL\")\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase())\r\n            setOptions(initialSTate.options)\r\n        }\r\n\r\n        initialSTate.databaseType !== undefined\r\n            ? setDatabaseType(initialSTate.databaseType.toUpperCase())\r\n            : setDatabaseType(\"MSSQL\")\r\n\r\n    }, []\r\n    )\r\n\r\n    const saveInformations = () => {\r\n\r\n        if (state.name === undefined || state.server === undefined) { return }\r\n\r\n        let result\r\n        if (status === \"status\") {\r\n            type === \"stop\" ? result = \"stopped\" : result = \"running\"\r\n        }\r\n\r\n        saveData(\r\n            {\r\n                index: index,\r\n                type: \"database\",\r\n                server: state.server,\r\n                name: state.name,\r\n                action: status,\r\n                databaseType: databaseType,\r\n                options: options,\r\n\r\n                os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n\r\n                >\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Storage color=\"primary\" />\r\n                        </Box>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <TextField\r\n                            value={state.server}\r\n                            className={classes.fields}\r\n                            id='server'\r\n                            color='primary'\r\n                            label='Serveur'\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server && state.server.split(\"\").length > 20 && state.server.split(\"\").length < 65 ? 13 :\r\n                                            state.server && state.server.split(\"\").length > 65 ? 13 : \"1rem\"\r\n                                }\r\n                            }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={status}\r\n                                onChange={(e) => setStatus(e.target.value)}\r\n                                onBlur={saveInformations} >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\" >Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <TextField\r\n                            autoComplete=\"false\"\r\n                            className={classes.fields}\r\n                            value={state.name}\r\n                            id='DBName'\r\n                            color='primary'\r\n                            label='Instance'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select value={databaseType} onChange={(e) => setDatabaseType(e.target.value)} onBlur={saveInformations} >\r\n                                <MenuItem value=\"MSSQL\">MSSQL</MenuItem>\r\n                                <MenuItem value=\"MONGODB\">MONGODB</MenuItem>\r\n                                <MenuItem value=\"Oracle\" >Oracle</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Database;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js",["156","157"],"import { Avatar, Box, FormControl, Grid,  InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Autorenew } from \"@material-ui/icons\"\r\nimport { useContext, useState, useEffect } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst Process = ({ index, type, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const [state, setState] = useState(initialSTate)\r\n    const [status, setStatus] = useState(initialSTate.action)\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        setOptions(initialSTate.options)\r\n\r\n        setStatus(initialSTate.action)\r\n        \r\n    },[]\r\n    )\r\n\r\n    const { deleteAction, duplicateAction, saveData, AddServer } = useContext(ActionContext)\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) { return }\r\n\r\n        saveData(\r\n            {\r\n                index: index, type: \"process\", server: state.server, name: state.name, action: status, options: options,\r\n\r\n                os: \"windows\"\r\n\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    alignItems=\"center\"\r\n                    spacing={2}\r\n                >\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Autorenew color=\"primary\" />\r\n                        </Box>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <TextField\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            value={state.server}\r\n\r\n                            className={classes.fields}\r\n                            id='server'\r\n                            color='primary'\r\n                            label='Serveur' />\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={status} onChange={(e) => setStatus(e.target.value)} onBlur={saveInformations} >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\" >Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6} sm={6} md={6} xl={6}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            id='processus'\r\n                            value={state.name}\r\n                            color='primary'\r\n                            label='Processus'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item xs={1} sm={1} md={1} xl={1}>\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Process;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js",["158","159","160","161"],"import { Avatar, Box, FormControl, Grid, InputLabel, MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { SettingsSharp } from \"@material-ui/icons\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        //marginRight:theme.spacing(2),\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst Service = ({ index, type, initialSTate }) => {\r\n    //css\r\n    const classes = useStyles()\r\n\r\n    const [action, setAction] = useState('STOP')\r\n    //létat du composant\r\n    const [state, setState] = useState({ initialSTate })\r\n    //l'état du server\r\n    const [pingState, setPingState] = useState(\"ko\")\r\n    const [status, setStatus] = useState(type)\r\n    //menu options\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        console.log(\"index \",index, \" initial state \",initialSTate)\r\n        setState(initialSTate)\r\n        if (initialSTate.action) {\r\n            setStatus(initialSTate.action.toLowerCase())\r\n            setOptions(initialSTate.options)\r\n        }\r\n\r\n    },[]\r\n    )\r\n\r\n\r\n    //context pour sauvegarder l'état dans le parent\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n\r\n\r\n    const saveInformations = () => {\r\n        if (state.name === undefined || state.server === undefined) { return }\r\n        saveData(\r\n            {\r\n                index: index,\r\n                type: \"service\",\r\n                server: state.server,\r\n                name: state.name,\r\n                action: status,\r\n                options: options,\r\n                os: \"windows\"\r\n            }\r\n        )\r\n    }\r\n    //test si le service existe\r\n    const testService = async (service) => {\r\n\r\n        if (state.server === null || pingState === \"ko\") { return }\r\n\r\n        console.log(\"Testing service : \", service, \"server \", state.server)\r\n        fetch(`http://localhost:5000/api/PARPRE/service?name=${service}&server=${state.server}`)\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n        //.then(() => saveInformations())\r\n    }\r\n    //Fait un ping\r\n    const testPing = async (server) => {\r\n\r\n\r\n        await fetch(`http://localhost:5000/api/PARPRE?server=${server}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                setPingState(result)\r\n                console.log(result.state)\r\n                //saveInformations()\r\n\r\n                if (result.state === \"ok\") {\r\n\r\n                }\r\n\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Grid item md={1} xl={1} >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <SettingsSharp color=\"primary\" />\r\n                        </Box>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.server}\r\n                            id={`server- ${index}`}\r\n                            color='primary'\r\n                            label='Serveur'\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={(e) => {\r\n                                saveInformations()\r\n\r\n                                testPing(e.target.value)\r\n\r\n                            }\r\n                            }\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select\r\n                                fullWidth\r\n                                value={status}\r\n                                onChange={(e) => setStatus(e.target.value )} onBlur={() => saveInformations()}\r\n                            >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\" >Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item md={6} xl={6}>\r\n                        <TextField\r\n                            value={state.name}\r\n                            className={classes.fields}\r\n                            id={`serviceName- ${index}`}\r\n                            color='primary'\r\n                            label='Service'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={(e) => saveInformations()}\r\n                        //testService(e.target.value)\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Service;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js",["162"],"import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport {  Comment, Delete, FileCopy, MoreVert } from \"@material-ui/icons\";\r\nimport {  useState } from \"react\";\r\n\r\nconst OptionMenu = ({index,deleteAction,duplicateAction, setOpenDialog}) => {\r\n\r\n    const [anchorEl, setAnchor] = useState(null)\r\n\r\n    const handleClick = (event) =>{\r\n        setAnchor(event.currentTarget)\r\n    }\r\n\r\n    const handleClose= () => {\r\n        setAnchor(null)\r\n    }\r\n\r\n    const showDialog = () =>{\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () =>{\r\n        setOpenDialog(false);\r\n    }\r\n    \r\n\r\n    return ( \r\n        <div>\r\n            <IconButton onClick={handleClick}>\r\n                <MoreVert />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n\r\n                <MenuItem onClick={() => {\r\n\r\n                    deleteAction(index)\r\n                    setAnchor(null)\r\n                    \r\n                    }} >\r\n                    \r\n                    <Delete />Supprimer\r\n                \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {\r\n                        \r\n                        handleClose()\r\n                        duplicateAction(index)\r\n                    }\r\n                } \r\n                >\r\n                    <FileCopy /> Dupliquer\r\n                        \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {showDialog(); handleClose()}} >\r\n                    <Comment /> Options\r\n\r\n                </MenuItem>\r\n            </Menu>\r\n            \r\n\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default OptionMenu;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js",["163"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js",["164"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js",["165"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js",["166"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ClickDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(()=>{\r\n        setInformations({...informations, type:\"click\"})\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Effectuer un Click </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser les coordonnées ou le sélecteur.\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid container item spacing={2}>\r\n                                    <Box display=\"flex\" justifyContent=\"inline-block\">\r\n                                        <TextField\r\n                                            value={informations.x}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-x\"\r\n                                            label=\"coordonnées X\"\r\n                                            autoComplete={false}\r\n                                            onChange={(e) => (setInformations({ ...informations, x: e.target.value }))}\r\n                                        />\r\n                                        <TextField\r\n                                            value={informations.y}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-y\"\r\n                                            label=\"coordonnées Y\"\r\n                                            autoComplete={false}\r\n\r\n                                            onChange={(e) => (setInformations({ ...informations, y: e.target.value }))}\r\n                                        />\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.clickSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"click-selector\"\r\n                                        label=\"Ou selecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, clickSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClickDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js",["167","168","169"],"import { Avatar, Box, Grid, Paper, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Code } from \"@material-ui/icons\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        //marginRight:theme.spacing(2),\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\n\r\nconst Command = ({ index, initialSTate }) => {\r\n    //css\r\n    const classes = useStyles()\r\n\r\n    const [state, setState] = useState({ initialSTate })\r\n    //l'état du server\r\n    const [pingState, setPingState] = useState(\"ko\")\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        setOptions(initialSTate.options)\r\n\r\n\r\n    }, []\r\n    )\r\n\r\n\r\n    //context pour sauvegarder l'état dans le parent\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n\r\n    const saveInformations = () => {\r\n\r\n        if (state.server === undefined || state.name === undefined) { return }\r\n\r\n        saveData(\r\n            {\r\n                index: index,\r\n                type: \"command\",\r\n                server: state.server,\r\n                name: state.name,\r\n                login: state.login,\r\n                result: state.result,\r\n                options: options,\r\n                os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n\r\n            }\r\n        )\r\n    }\r\n    //test si le service existe\r\n    const testService = async (service) => {\r\n\r\n        if (state.server === null || pingState === \"ko\") { return }\r\n\r\n        console.log(\"Testing service : \", service, \"server \", state.server)\r\n        fetch(`http://localhost:5000/api/PARPRE/service?name=${service}&server=${state.server}`)\r\n            .then(res => res.json())\r\n            .then(result => console.log(result))\r\n    }\r\n    //Fait un ping\r\n    const testPing = async (server) => {\r\n\r\n\r\n        await fetch(`http://localhost:5000/api/PARPRE?server=${server}`)\r\n            .then(res => res.json())\r\n            .then(result => {\r\n                setPingState(result)\r\n                console.log(result.state)\r\n                //saveInformations()\r\n\r\n                if (result.state === \"ok\") {\r\n\r\n                }\r\n\r\n            }\r\n            )\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n                >\r\n                    <Grid item md={1} xl={1} >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Code color=\"primary\" />\r\n                        </Box>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.server}\r\n                            id={`server- ${index}`}\r\n                            color='primary'\r\n                            label='Serveur'\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server && state.server.split(\"\").length > 20 && state.server.split(\"\").length < 65 ? 13 :\r\n                                            state.server && state.server.split(\"\").length > 65 ? 13 : \"1rem\"\r\n                                }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.login}\r\n                            id={`login- ${index}`}\r\n                            color='primary'\r\n                            label='Login'\r\n                            onChange={(e) => setState({ ...state, login: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: { fontSize: state.login && state.login.split(\"\").length > 60 ? 14 : \"1rem\" }\r\n                            }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={5} xl={4}>\r\n                        <TextField\r\n                            value={state.name}\r\n                            className={classes.fields}\r\n                            id={`command- ${index}`}\r\n                            color='primary'\r\n                            label='Commande'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            error={state.name === \"\"}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.name && state.name.split(\"\").length > 40 && state.name.split(\"\").length < 65 ? 14 :\r\n                                            state.name && state.name.split(\"\").length > 65 ? 13 : \"1rem\"\r\n                                }\r\n                            }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={2}>\r\n                        <TextField\r\n                            className={classes.fields}\r\n                            value={state.result}\r\n                            id={`result- ${index}`}\r\n                            color='primary'\r\n                            label='Résultat'\r\n                            onChange={(e) => setState({ ...state, result: e.target.value })}\r\n                            onBlur={saveInformations}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={2} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={openDialog}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Command;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\TestSSA.js",["170","171","172","173"],"import { Accordion, AccordionSummary, AccordionDetails, CardHeader, Divider, Paper } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core'\r\nimport { useHistory } from 'react-router';\r\nimport { ExpandMore } from '@material-ui/icons';\r\n\r\n\r\nconst TestSSA = () => {\r\n\r\n    const history = useHistory()\r\n    const [state, setState] = useState()\r\n    const [services, setServices] = useState([])\r\n    const [databases, setDatabase] = useState([])\r\n\r\n    useEffect(() => {\r\n        setState(history.location.state)\r\n        getDatabases()\r\n        getServices()\r\n\r\n        console.log(\"state \", state, \"hstory \", history.location)\r\n    }, [])\r\n    \r\n\r\n    const getDatabases = () => {\r\n        var DBs = new Set()\r\n        history.location.state.Arret.map(action => {\r\n            action.type === \"database\" && DBs.add(action.name)\r\n        })\r\n        setDatabase(Array.from(DBs))\r\n    }\r\n    const getServices = () => {\r\n        var SVCs = new Set()\r\n        history.location.state.Arret.map(action => {\r\n            action.type === \"service\" && SVCs.add(action.name)\r\n        })\r\n        setServices(Array.from(SVCs))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"row\" spacing={1} >\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"Production\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Accordion>\r\n                                                    <AccordionSummary expandIcon={<ExpandMore />}>\r\n                                                        <Typography>Server : {variable.prod}</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <Grid container spacing={2}>\r\n                                                            {\r\n                                                                services.length > 0 && services.map(service => (\r\n                                                                    <Grid item md={12}>\r\n                                                                        <Typography color=\"primary\">\r\n                                                                            service : {service}\r\n                                                                        </Typography>\r\n                                                                    </Grid>\r\n                                                                ))\r\n                                                            }\r\n                                                            {\r\n                                                                databases.map(database => (\r\n                                                                    <Grid item md={12}>\r\n                                                                        <Typography color=\"primary\">\r\n                                                                            Base de données : {database}\r\n                                                                        </Typography>\r\n                                                                    </Grid>\r\n                                                                ))\r\n                                                            }\r\n                                                        </Grid>\r\n\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n\r\n                                            ))\r\n                                        }\r\n\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"HPROD\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Accordion>\r\n                                                    <AccordionSummary expandIcon={<ExpandMore />}>\r\n                                                        <Typography>Server : {variable.hprod}</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        {\r\n                                                            history.location.state.Arret.map(action => (\r\n                                                                <Typography color=\"primary\">{action.type} : {action.name || action.path}</Typography>\r\n                                                            ))\r\n                                                        }\r\n\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n\r\n                                            ))\r\n                                        }\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"HPROD2\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Typography gutterBottom>\r\n                                                    Server : {variable.dev}\r\n                                                    <Divider variant=\"fullWidth\" />\r\n                                                    {\r\n                                                        variable.dev && history.location.state.Arret.map(action => (\r\n                                                            <Typography color=\"primary\">{action.type} : {action.name || action.path}</Typography>\r\n                                                        ))\r\n                                                    }\r\n                                                </Typography>\r\n\r\n                                            ))\r\n                                        }\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TestSSA;",{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","severity":1,"message":"179","line":34,"column":12,"nodeType":"180","messageId":"181","endLine":34,"endColumn":22},{"ruleId":"178","severity":1,"message":"182","line":34,"column":24,"nodeType":"180","messageId":"181","endLine":34,"endColumn":37},{"ruleId":"183","severity":1,"message":"184","line":83,"column":8,"nodeType":"185","endLine":83,"endColumn":10,"suggestions":"186"},{"ruleId":"187","severity":1,"message":"188","line":95,"column":32,"nodeType":"189","messageId":"190","endLine":95,"endColumn":34},{"ruleId":"187","severity":1,"message":"191","line":96,"column":72,"nodeType":"192","messageId":"193","endLine":96,"endColumn":78},{"ruleId":"187","severity":1,"message":"191","line":131,"column":31,"nodeType":"189","messageId":"194","endLine":131,"endColumn":33},{"ruleId":"178","severity":1,"message":"195","line":3,"column":10,"nodeType":"180","messageId":"181","endLine":3,"endColumn":13},{"ruleId":"178","severity":1,"message":"196","line":18,"column":11,"nodeType":"180","messageId":"181","endLine":18,"endColumn":14},{"ruleId":"183","severity":1,"message":"197","line":29,"column":7,"nodeType":"185","endLine":29,"endColumn":9,"suggestions":"198"},{"ruleId":"178","severity":1,"message":"199","line":31,"column":21,"nodeType":"180","messageId":"181","endLine":31,"endColumn":31},{"ruleId":"178","severity":1,"message":"200","line":15,"column":7,"nodeType":"180","messageId":"181","endLine":15,"endColumn":16},{"ruleId":"183","severity":1,"message":"201","line":32,"column":8,"nodeType":"185","endLine":32,"endColumn":10,"suggestions":"202"},{"ruleId":"178","severity":1,"message":"203","line":32,"column":12,"nodeType":"180","messageId":"181","endLine":32,"endColumn":20},{"ruleId":"178","severity":1,"message":"204","line":32,"column":22,"nodeType":"180","messageId":"181","endLine":32,"endColumn":33},{"ruleId":"178","severity":1,"message":"205","line":41,"column":11,"nodeType":"180","messageId":"181","endLine":41,"endColumn":18},{"ruleId":"178","severity":1,"message":"206","line":34,"column":12,"nodeType":"180","messageId":"181","endLine":34,"endColumn":20},{"ruleId":"178","severity":1,"message":"207","line":53,"column":11,"nodeType":"180","messageId":"181","endLine":53,"endColumn":22},{"ruleId":"178","severity":1,"message":"208","line":56,"column":11,"nodeType":"180","messageId":"181","endLine":56,"endColumn":22},{"ruleId":"178","severity":1,"message":"209","line":59,"column":11,"nodeType":"180","messageId":"181","endLine":59,"endColumn":18},{"ruleId":"183","severity":1,"message":"210","line":72,"column":8,"nodeType":"185","endLine":72,"endColumn":10,"suggestions":"211"},{"ruleId":"183","severity":1,"message":"210","line":37,"column":7,"nodeType":"185","endLine":37,"endColumn":9,"suggestions":"212"},{"ruleId":"178","severity":1,"message":"213","line":26,"column":54,"nodeType":"180","messageId":"181","endLine":26,"endColumn":63},{"ruleId":"183","severity":1,"message":"210","line":45,"column":8,"nodeType":"185","endLine":45,"endColumn":10,"suggestions":"214"},{"ruleId":"183","severity":1,"message":"210","line":56,"column":8,"nodeType":"185","endLine":56,"endColumn":10,"suggestions":"215"},{"ruleId":"178","severity":1,"message":"216","line":65,"column":52,"nodeType":"180","messageId":"181","endLine":65,"endColumn":58},{"ruleId":"183","severity":1,"message":"210","line":47,"column":7,"nodeType":"185","endLine":47,"endColumn":9,"suggestions":"217"},{"ruleId":"178","severity":1,"message":"213","line":50,"column":54,"nodeType":"180","messageId":"181","endLine":50,"endColumn":63},{"ruleId":"178","severity":1,"message":"218","line":29,"column":12,"nodeType":"180","messageId":"181","endLine":29,"endColumn":18},{"ruleId":"178","severity":1,"message":"219","line":29,"column":20,"nodeType":"180","messageId":"181","endLine":29,"endColumn":29},{"ruleId":"183","severity":1,"message":"220","line":55,"column":7,"nodeType":"185","endLine":55,"endColumn":9,"suggestions":"221"},{"ruleId":"178","severity":1,"message":"222","line":78,"column":11,"nodeType":"180","messageId":"181","endLine":78,"endColumn":22},{"ruleId":"178","severity":1,"message":"223","line":21,"column":11,"nodeType":"180","messageId":"181","endLine":21,"endColumn":22},{"ruleId":"183","severity":1,"message":"224","line":8,"column":8,"nodeType":"185","endLine":8,"endColumn":10,"suggestions":"225"},{"ruleId":"183","severity":1,"message":"224","line":11,"column":8,"nodeType":"185","endLine":11,"endColumn":10,"suggestions":"226"},{"ruleId":"183","severity":1,"message":"224","line":13,"column":8,"nodeType":"185","endLine":13,"endColumn":10,"suggestions":"227"},{"ruleId":"183","severity":1,"message":"224","line":9,"column":7,"nodeType":"185","endLine":9,"endColumn":9,"suggestions":"228"},{"ruleId":"183","severity":1,"message":"210","line":50,"column":8,"nodeType":"185","endLine":50,"endColumn":10,"suggestions":"229"},{"ruleId":"178","severity":1,"message":"222","line":76,"column":11,"nodeType":"180","messageId":"181","endLine":76,"endColumn":22},{"ruleId":"178","severity":1,"message":"230","line":86,"column":11,"nodeType":"180","messageId":"181","endLine":86,"endColumn":19},{"ruleId":"178","severity":1,"message":"231","line":1,"column":78,"nodeType":"180","messageId":"181","endLine":1,"endColumn":83},{"ruleId":"183","severity":1,"message":"232","line":21,"column":8,"nodeType":"185","endLine":21,"endColumn":10,"suggestions":"233"},{"ruleId":"187","severity":1,"message":"191","line":26,"column":49,"nodeType":"189","messageId":"194","endLine":26,"endColumn":51},{"ruleId":"187","severity":1,"message":"191","line":33,"column":49,"nodeType":"189","messageId":"194","endLine":33,"endColumn":51},"no-native-reassign",["234"],"no-negated-in-lhs",["235"],"no-unused-vars","'autoCreate' is assigned a value but never used.","Identifier","unusedVar","'setAutoCreate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history.location'. Either include it or remove the dependency array.","ArrayExpression",["236"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","expectedInside","'Add' is defined but never used.","'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history.location.state' and 'state'. Either include them or remove the dependency array.",["237"],"'setServers' is assigned a value but never used.","'cardWidth' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["238"],"'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'getAPOS' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'reduire' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialSTate'. Either include it or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["239"],["240"],"'AddServer' is assigned a value but never used.",["241"],["242"],"'result' is assigned a value but never used.",["243"],"'action' is assigned a value but never used.","'setAction' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'index' and 'initialSTate'. Either include them or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["244"],"'testService' is assigned a value but never used.","'closeDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'informations' and 'setInformations'. Either include them or remove the dependency array. If 'setInformations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["245"],["246"],["247"],["248"],["249"],"'testPing' is assigned a value but never used.","'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'getDatabases', 'getServices', 'history.location', and 'state'. Either include them or remove the dependency array.",["250"],"no-global-assign","no-unsafe-negation",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"257","fix":"259"},{"desc":"257","fix":"260"},{"desc":"257","fix":"261"},{"desc":"257","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"265","fix":"267"},{"desc":"265","fix":"268"},{"desc":"265","fix":"269"},{"desc":"257","fix":"270"},{"desc":"271","fix":"272"},"Update the dependencies array to be: [history.location]",{"range":"273","text":"274"},"Update the dependencies array to be: [history.location.state, state]",{"range":"275","text":"276"},"Update the dependencies array to be: [actions]",{"range":"277","text":"278"},"Update the dependencies array to be: [initialSTate]",{"range":"279","text":"280"},{"range":"281","text":"280"},{"range":"282","text":"280"},{"range":"283","text":"280"},{"range":"284","text":"280"},"Update the dependencies array to be: [index, initialSTate]",{"range":"285","text":"286"},"Update the dependencies array to be: [informations, setInformations]",{"range":"287","text":"288"},{"range":"289","text":"288"},{"range":"290","text":"288"},{"range":"291","text":"288"},{"range":"292","text":"280"},"Update the dependencies array to be: [getDatabases, getServices, history.location, state]",{"range":"293","text":"294"},[3098,3100],"[history.location]",[821,823],"[history.location.state, state]",[1335,1337],"[actions]",[2263,2265],"[initialSTate]",[1173,1175],[1293,1295],[1715,1717],[1355,1357],[1698,1700],"[index, initialSTate]",[433,435],"[informations, setInformations]",[472,474],[545,547],[417,419],[1325,1327],[723,725],"[getDatabases, getServices, history.location, state]"]