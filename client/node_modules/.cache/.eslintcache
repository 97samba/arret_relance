[{"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js":"1","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js":"2","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js":"3","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js":"4","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js":"5","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js":"6","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js":"7","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js":"8","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js":"9","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js":"10","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js":"11","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js":"12","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js":"13","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js":"14","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js":"15","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js":"16","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js":"17","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js":"18","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js":"19","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js":"20","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js":"21","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js":"22","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js":"23","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js":"24","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js":"25","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js":"26","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js":"27","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\TestSSA.js":"28","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Checker.js":"29","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Log.js":"30","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\IIS.js":"31","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Rename.js":"32","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Disk.js":"33"},{"size":449,"mtime":1618580424144,"results":"34","hashOfConfig":"35"},{"size":1506,"mtime":1623950191227,"results":"36","hashOfConfig":"35"},{"size":13374,"mtime":1626102475136,"results":"37","hashOfConfig":"35"},{"size":1484,"mtime":1622925716169,"results":"38","hashOfConfig":"35"},{"size":5698,"mtime":1624365219396,"results":"39","hashOfConfig":"35"},{"size":2385,"mtime":1624892602131,"results":"40","hashOfConfig":"35"},{"size":1547,"mtime":1623225871088,"results":"41","hashOfConfig":"35"},{"size":135,"mtime":1618569284110,"results":"42","hashOfConfig":"35"},{"size":6533,"mtime":1624892334102,"results":"43","hashOfConfig":"35"},{"size":9305,"mtime":1626084520228,"results":"44","hashOfConfig":"35"},{"size":5334,"mtime":1624892269583,"results":"45","hashOfConfig":"35"},{"size":4224,"mtime":1624892522633,"results":"46","hashOfConfig":"35"},{"size":1027,"mtime":1624892504136,"results":"47","hashOfConfig":"35"},{"size":10263,"mtime":1624897632939,"results":"48","hashOfConfig":"35"},{"size":5997,"mtime":1624892403130,"results":"49","hashOfConfig":"35"},{"size":5689,"mtime":1626099090232,"results":"50","hashOfConfig":"35"},{"size":9242,"mtime":1626099102673,"results":"51","hashOfConfig":"35"},{"size":5938,"mtime":1626099146146,"results":"52","hashOfConfig":"35"},{"size":7141,"mtime":1626103251135,"results":"53","hashOfConfig":"35"},{"size":71,"mtime":1618846144628,"results":"54","hashOfConfig":"35"},{"size":1799,"mtime":1624892303391,"results":"55","hashOfConfig":"35"},{"size":3450,"mtime":1624909157700,"results":"56","hashOfConfig":"35"},{"size":3298,"mtime":1624898525760,"results":"57","hashOfConfig":"35"},{"size":7689,"mtime":1624891740762,"results":"58","hashOfConfig":"35"},{"size":6820,"mtime":1624897275857,"results":"59","hashOfConfig":"35"},{"size":4152,"mtime":1624019311765,"results":"60","hashOfConfig":"35"},{"size":7711,"mtime":1626099097555,"results":"61","hashOfConfig":"35"},{"size":10975,"mtime":1624871776257,"results":"62","hashOfConfig":"35"},{"size":2970,"mtime":1626101469401,"results":"63","hashOfConfig":"35"},{"size":7059,"mtime":1626099136707,"results":"64","hashOfConfig":"35"},{"size":7767,"mtime":1626099119606,"results":"65","hashOfConfig":"35"},{"size":7095,"mtime":1626099151560,"results":"66","hashOfConfig":"35"},{"size":7850,"mtime":1626099109538,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"175tmnb",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"70"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"70"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"70"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"70"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"70"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"70"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"70"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"70"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"70"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"70"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"70"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"139","messages":"140","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"145","messages":"146","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\index.js",[],["147","148"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\App.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Create.js",["149","150","151","152","153","154"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\DashBoard.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Manage.js",["155"],"import { Button, Grid, IconButton, InputBase, makeStyles, Paper, Typography } from '@material-ui/core'\r\nimport { useEffect, useState } from 'react';\r\nimport { Add, ArrowBack, ArrowForward, SearchSharp } from '@material-ui/icons';\r\nimport ListSSA from '../Components/Manage/ListSSA';\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    head: {\r\n        marginLeft: theme.spacing(1),\r\n        marginTop: theme.spacing(2),\r\n        marginBottom: theme.spacing(3)\r\n\r\n    }\r\n}))\r\n\r\n\r\nconst Manage = () => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const [POS, SetPOS] = useState([])\r\n    const [ExcelTab, SetExcelTab] = useState(false)\r\n    const [allExcel, setAllExcel] = useState([])\r\n\r\n    useEffect(() => {\r\n        document.title = \"Modify\"        \r\n        getAllPos()\r\n        GetAllExcel()\r\n        \r\n    }, [])\r\n\r\n\r\n    const GetAllExcel =() =>{\r\n            \r\n        axios.post(`http://localhost:5000/api/ConvertAll-Excel`)\r\n            .then(res =>  {setAllExcel(res.data); console.log(\"data \",res.data)})\r\n            \r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    const getAllPos = async () => {\r\n        await fetch(`${url}/AllPOS`)\r\n            .then(Response => Response.json())\r\n            .then(result => {\r\n                //console.log(result)\r\n                SetPOS(result)\r\n            })\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.head}>\r\n                <Grid container spacing={2}>\r\n                    <Grid item sm={4}>\r\n                        <Button\r\n                            startIcon={\r\n                                ExcelTab ? <ArrowBack /> : <ArrowForward />\r\n                            }\r\n                            variant=\"contained\"\r\n                            elevation={0}\r\n                            onClick={() => SetExcelTab(!ExcelTab)}\r\n\r\n                        > {!ExcelTab\r\n                            ? `Importés depuis Excel ( ${allExcel.length} )`\r\n                            : `Enregistrés ( ${POS.length} )`\r\n\r\n                            }\r\n\r\n                        </Button>\r\n                    </Grid>\r\n                    <Grid item sm={3}>\r\n                        <Paper component=\"form\" elevation={1} >\r\n                            <IconButton aria-label=\"menu\">\r\n                                <SearchSharp />\r\n                            </IconButton>\r\n                            <InputBase\r\n\r\n                                placeholder=\"Rechercher une SSA\"\r\n                            />\r\n\r\n                        </Paper>\r\n                    </Grid>\r\n                    {/*\r\n                    <Grid item sm={3}>\r\n                        \r\n                        \r\n                        \r\n                       \r\n                        <FormControl size=\"medium\" variant=\"filled\">\r\n                            <InputLabel id=\"filter\">Filter par</InputLabel>\r\n                            <Select labelId=\"filter\" value=\"filtre\" >\r\n                                <MenuItem value=\"\">\r\n                                    <em>None</em>\r\n                                </MenuItem>\r\n                                <MenuItem value=\"nom\">Nom</MenuItem>\r\n                                <MenuItem value={20}>Type</MenuItem>\r\n                                <MenuItem value={30}>état</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                        \r\n                    </Grid>\r\n                     */}\r\n                </Grid>\r\n            </div>\r\n\r\n            <div>\r\n                <Grid style={{ padding: 5 }} container direction=\"row\" className={classes.root}>\r\n                    <Grid item xs={3} md={1} sm={1} >\r\n                        <Typography>Code</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={3} sm={3}  >\r\n                        <Typography> Nom</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={1} sm={1}  >\r\n                        <Typography> Etapes</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={2} sm={2}  >\r\n                        <Typography> Auteur</Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={2} sm={2}  >\r\n                        <Typography> Date de création </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={3} md={3} sm={3} spacing={1} container justify=\"center\">\r\n                        <Typography>Actions</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                {\r\n                    ExcelTab  ?\r\n                        (\r\n                            allExcel.length > 0 ?\r\n                            (\r\n                                allExcel.map(excel => (\r\n                                <ListSSA ssa={excel} fromExcel={true} key={excel._id} />\r\n                            ))  \r\n                            )  :\r\n                            (\r\n                                <Typography>Chargement</Typography>\r\n                            )                       \r\n\r\n                        )\r\n                        :\r\n                        (\r\n                            POS.map(pos => (\r\n                                <ListSSA ssa={pos} key={pos._id} fromExcel={false}/>\r\n                            ))\r\n                        )\r\n\r\n                }\r\n\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Manage;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\ViewItem.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Modify.js",["156","157","158"],"import { makeStyles } from \"@material-ui/core\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useHistory} from 'react-router'\r\n\r\nimport ARCard from \"../Components/ARCard\";\r\nimport RightNav from \"../Components/Creation/RightNav\";\r\n\r\nconst drawerWidthRight = 260\r\n\r\nconst useStyles = makeStyles((theme) =>{\r\n    return{\r\n        root:{\r\n            width:`calc(100% - ${drawerWidthRight}px)`   \r\n        }\r\n\r\n}})\r\nconst Modify = () => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const [state, setState] = useState({})\r\n    const history = useHistory()\r\n    const classes = useStyles()\r\n\r\n    useEffect(()=>{\r\n        console.log(\"starting \",history.location.state)\r\n        document.title=history.location.state.name\r\n        setState(history.location.state)\r\n        console.log(\"state \",state)\r\n\r\n    },[])\r\n\r\n    const [servers, setServers] = useState([\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" }\r\n    ])\r\n\r\n\r\n\r\n    return ( \r\n        <div className={classes.root}>\r\n            <ARCard \r\n            name=\"Arrêt\" \r\n            type=\"stop\"  \r\n            actions={history.location.state.Arret}\r\n\r\n            />\r\n\r\n            <ARCard \r\n            name=\"Relance\" \r\n            type=\"start\" \r\n            actions={history.location.state.Relance} />\r\n            \r\n            <RightNav  ServerRow={servers}/>\r\n            \r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Modify;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\Settings.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Layout.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\ARCard.js",["159","160"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\RightNav.js",["161","162"],"import {  Box, Drawer, makeStyles,Typography } from \"@material-ui/core\";\r\nimport { useState } from \"react\";\r\nimport {DataGrid} from '@material-ui/data-grid';\r\n\r\nconst drawerWidthRight = 280\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n\r\n    return {\r\n        root: {\r\n\r\n        },\r\n        navRight: {\r\n            width: drawerWidthRight,\r\n            //display:'none'\r\n        },\r\n        drawerPaperRight: {\r\n            width: drawerWidthRight,\r\n            backgroundColor: \"#FFFFF\",\r\n            borderLeft: '0px'\r\n\r\n        }\r\n\r\n    }\r\n})\r\n\r\n\r\n\r\n\r\n\r\nconst RightNav = ({ ServerRow, saveRows }) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const columns = [\r\n        {field : 'prod', headerName: 'prod', width : 90, editable : true, sortable:false },\r\n        {field : 'hprod', headerName: 'hprod', width : 90, editable : true, sortable:false },\r\n        {field : 'dev', headerName: 'IPP2', width :90, editable : true, sortable:false }\r\n    ]\r\n\r\n    /*\r\n    useEffect(() => {\r\n      const timer = setInterval(() => {\r\n        setProgress((prevProgress) => (prevProgress >= 100 ? 0 : prevProgress + 20));\r\n      }, 400);\r\n  \r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }, []);\r\n    */\r\n\r\n    const classes = useStyles()\r\n    \r\n    const handleCellchange = (cell) => {\r\n        console.log(\"Changing the \",cell)\r\n        \r\n\r\n        const editedServers = ServerRow.map(row => {\r\n            if(row.id === cell.id){\r\n                row = {...row, [cell.field] :cell.props.value  }\r\n                return row\r\n            }\r\n            return row\r\n        })\r\n        saveRows(editedServers)\r\n        console.log(\"edited \",editedServers)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <Drawer\r\n                elevation={0}\r\n                variant=\"permanent\"\r\n                anchor='right'\r\n                classes={{ paper: classes.drawerPaperRight }}\r\n                className={classes.navRight}\r\n            >\r\n                <Box>\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            Variables\r\n                        </Typography>\r\n                    </Box>\r\n\r\n                        \r\n                    <div style={{height : 300,width:\"100%\"}}>\r\n                        <DataGrid \r\n                        rows={ServerRow}\r\n                        columns={columns}\r\n                        hideFooter\r\n                        disableColumnMenu\r\n                        rowHeight={40}\r\n                        headerHeight={40}\r\n                        onEditCellChangeCommitted={cell => handleCellchange(cell)}\r\n                        \r\n                        />\r\n                    </div>\r\n                </Box>\r\n\r\n                <Box>\r\n                    {/**\r\n                    <Box m={2} display=\"flex\" justifyContent=\"center\">\r\n                        <Typography gutterBottom>\r\n                            Vérification Active\r\n                        </Typography>\r\n                    </Box>\r\n                    \r\n                    <Grid container spacing={1} alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\">\r\n                                <Computer color=\"primary\" />\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Ping : SW11203</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Divider style={{ margin: \"10px \" }} />\r\n                    <Grid container alignItems=\"center\" >\r\n                        <Grid item md={2} >\r\n                            <Box display=\"flex\" justifyContent=\"center\" >\r\n                                <Settings color=\"primary\" />\r\n\r\n                            </Box>\r\n\r\n                        </Grid>\r\n\r\n                        <Grid item md={10}>\r\n                            <Typography variant=\"subtitle1\" display=\"block\"> Service : BITS</Typography>\r\n                            <Grid container direction=\"row\" alignItems=\"center\" >\r\n                                <Grid item md={5}>\r\n                                    <Typography variant=\"caption\">En cours</Typography>\r\n                                </Grid>\r\n                                <Grid item md={7}>\r\n                                    <LinearProgress variant=\"determinate\" value={progress} />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                     */}\r\n                </Box>\r\n            </Drawer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RightNav\r\n","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Manage\\ListSSA.js",["163"],"import { Button, CardActionArea, makeStyles } from '@material-ui/core';\r\nimport { useEffect } from 'react';\r\nimport { Avatar, Card, CardContent, Grid, Typography } from '@material-ui/core'\r\nimport { Delete } from '@material-ui/icons';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: theme.spacing(1),\r\n        flexGrow: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        padding: theme.spacing(2),\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n\r\n}))\r\nconst ListSSA = ({ ssa, fromExcel }) => {\r\n    const url = \"http://localhost:5000/api\"\r\n    const history = useHistory()\r\n\r\n    const classes = useStyles()\r\n\r\n    useEffect(() => {\r\n        //console.log(ssa)\r\n    })\r\n\r\n    const visitPOS = (ssa) => {\r\n        console.log(\"ssa \", ssa)\r\n        history.push({\r\n            pathname: '/create',\r\n            state: ssa,\r\n            fromExcel: fromExcel\r\n        })\r\n    }\r\n    const getAPOS = (id) => {\r\n        fetch(`${url}/getAPOS?id=${id}`)\r\n            .then(Response => Response.json())\r\n            .then(result => visitPOS(result))\r\n    }\r\n    const testSSA = (ssa) => {\r\n        history.push({\r\n            pathname: '/testSSA',\r\n            state: ssa\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root} elevation={0.5}>\r\n                <CardActionArea >\r\n\r\n                    <CardContent  >\r\n\r\n                        <Grid container direction=\"row\">\r\n                            <Grid item xs={1} md={1} sm={1} >\r\n                                <Avatar onClick={() => console.log(\"ssa clicked\")}>\r\n                                    {\r\n                                        ssa.name.split(\"_\").length > 1\r\n                                            ? ssa.name.split(\"_\")[1][0].toUpperCase()\r\n                                            : ssa.name[0].toUpperCase()\r\n                                    }\r\n\r\n\r\n                                </Avatar>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={3} md={3} sm={3}  >\r\n                                <Typography> {ssa.name}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={1} sm={1}  >\r\n                                <Typography> {ssa.Arret.length} - {ssa.Relance.length}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}  >\r\n                                <Typography> {ssa.auteur}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={2} sm={2}  >\r\n                                <Typography> {new Date(ssa.createdAt).toLocaleString()}</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={2} md={3} sm={2} >\r\n                                <Grid spacing={1} container justify=\"space-around\" alignContent=\"center\">\r\n                                    <Grid item md={5}>\r\n                                        <Button variant=\"outlined\" color=\"default\" onClick={() => visitPOS(ssa)}>PARPRE/POS</Button>\r\n                                    </Grid>\r\n                                    <Grid item md={4}>\r\n                                        {!fromExcel\r\n                                            ? <Button variant=\"outlined\" color=\"primary\" onClick={() => testSSA(ssa)}>Tester</Button>\r\n                                            : <Button variant=\"outlined\" color=\"primary\" onClick={() => testSSA(ssa)}>Importer</Button>\r\n\r\n                                        }\r\n                                    </Grid>\r\n                                    <Grid item md={3}>\r\n                                        <Button >\r\n                                            <Delete color=\"secondary\" />\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </CardContent>\r\n                </CardActionArea>\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListSSA;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Dashboard\\DashboardCard.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\WebAction.js",["164","165","166","167","168"],"import { Avatar, Box, Button,FormControl, Grid,  InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport {  Web } from \"@material-ui/icons\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport ClickDialog from \"../Creation/ClickDialog\"\r\nimport ConnectionDialog from \"../Creation/ConnectionDialog\"\r\nimport FormDialog from \"../Creation/FormDialog\"\r\nimport DisconnectDialog from \"../Creation/isconnectialog\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\nimport OptionDialog from \"../Creation/OptionDialog\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n    },\r\n    dropDown: {\r\n        width: \"100%\"\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst WebAction = ({ index, initialSTate }) => {\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchor] = useState(null)\r\n    const { deleteAction, duplicateAction, saveData } = useContext(ActionContext)\r\n    const [state, setState] = useState({ initialSTate })\r\n    const [actionType, setActionType] = useState(\"connection\")\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n    const [informations, setInformations] = useState({})\r\n    const [optionDialog, setOptionDialog] = useState(false)\r\n\r\n    const [options, setOptions] = useState({\r\n        block: true,\r\n        prod: true,\r\n        hprod: true,\r\n        inte: true,\r\n        dev: true,\r\n\r\n    })\r\n\r\n\r\n\r\n    const handleClick = (event) => {\r\n        setAnchor(event.currentTarget)\r\n    }\r\n    const handleClose = () => {\r\n        setAnchor(null)\r\n    }\r\n    const reduire = () => {\r\n\r\n    }\r\n    useEffect(() => {\r\n        setState(initialSTate)\r\n        if (initialSTate.informations.type) {\r\n            console.log(\"action type \", initialSTate.informations.type)\r\n            setActionType(initialSTate.informations.type)\r\n        }\r\n        setInformations(initialSTate.informations)\r\n        setOptions(initialSTate.options)\r\n\r\n\r\n    }, []\r\n    )\r\n    const formatUrl = (url) => {\r\n\r\n        if (url.startsWith(\"http\")) {\r\n\r\n            console.log('url est bonne')\r\n            return url\r\n        } else {\r\n            console.log('error url')\r\n            return \"http://\" + url\r\n        }\r\n\r\n    }\r\n\r\n    const testConnection = async (e) => {\r\n\r\n        const formatedUrl = formatUrl(e.target.value)\r\n        setState({ ...state, link: formatedUrl })\r\n\r\n        if (formatedUrl !== '') {\r\n\r\n            console.log('accessing ', formatedUrl)\r\n\r\n            setState({ ...state, url: formatedUrl })\r\n\r\n            fetch(`http://localhost:5000/api/PARPRE/link?url=${formatedUrl}`)\r\n                .then(res => res.json())\r\n                .then(result => console.log(result.result))\r\n\r\n        }\r\n\r\n    }\r\n\r\n    const showDialog = () => {\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () => {\r\n        setOpenDialog(false);\r\n    }\r\n\r\n\r\n\r\n\r\n    const saveInformations = () => {\r\n\r\n        if (state.url === undefined) { return }\r\n\r\n        saveData({\r\n            index: index,\r\n            type: \"webAction\",\r\n            url: state.url,\r\n            informations: informations,\r\n            options: options\r\n\r\n\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n\r\n                >\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\" >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Web color=\"primary\" />\r\n                        </Box>\r\n\r\n\r\n                    </Grid>\r\n                    <Grid item md={6} xl={2}>\r\n                        <TextField\r\n\r\n                            className={classes.fields}\r\n                            id='url'\r\n                            color='primary'\r\n                            label='Lien'\r\n                            value={state.url}\r\n                            onChange={(e) => setState({ ...state, url: e.target.value })}\r\n                            onBlur={(e) => { testConnection(e); saveInformations() }}\r\n                        />\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} xl={3} >\r\n                        <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={actionType} onChange={(e) => {setActionType(e.target.value);setInformations({...informations,type:e.target.value})}}>\r\n                                <MenuItem value=\"connection\" >Connexion</MenuItem>\r\n                                <MenuItem value=\"logOut\" >Déconnexion</MenuItem>\r\n                                <MenuItem value=\"click\">Click</MenuItem>\r\n                                <MenuItem value=\"form\">Remplir champ(s)</MenuItem>\r\n                                <MenuItem value=\"verify\">Vérifier un contenu</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item md={2} >\r\n\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <FormControl >\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={showDialog}>options</Button>\r\n                            </FormControl>\r\n                        </Box>\r\n\r\n                    </Grid>\r\n\r\n                    {openDialog && actionType === \"connection\" ?\r\n                        /**Dialog connexion */\r\n\r\n                        (\r\n                            <ConnectionDialog\r\n                                informations={informations}\r\n                                setInformations={setInformations}\r\n                                closeDialog={closeDialog}\r\n                                openDialog={openDialog}\r\n                                saveInformations={saveInformations}\r\n\r\n\r\n                            />\r\n                        ) : actionType === \"logOut\" ?\r\n                            /**Dialog deconnexion */\r\n                            (\r\n                                <DisconnectDialog\r\n                                    informations={informations}\r\n                                    setInformations={setInformations}\r\n                                    closeDialog={closeDialog}\r\n                                    openDialog={openDialog}\r\n                                    saveInformations={saveInformations}\r\n                                />\r\n                            ) : actionType === \"click\" ?\r\n                                /**Dialog clicke */\r\n\r\n                                (\r\n                                    <ClickDialog\r\n                                        informations={informations}\r\n                                        setInformations={setInformations}\r\n                                        closeDialog={closeDialog}\r\n                                        openDialog={openDialog}\r\n                                        saveInformations={saveInformations}\r\n                                    />\r\n                                ) :\r\n                                /**Dialog remplir */\r\n                                 actionType === \"form\" ?\r\n                                (\r\n                                    <FormDialog\r\n                                        informations={informations}\r\n                                        setInformations={setInformations}\r\n                                        closeDialog={closeDialog}\r\n                                        openDialog={openDialog}\r\n                                        saveInformations={saveInformations}\r\n                                    />\r\n                                ):(\r\n                                    <FormDialog\r\n                                        informations={informations}\r\n                                        setInformations={setInformations}\r\n                                        closeDialog={closeDialog}\r\n                                        openDialog={openDialog}\r\n                                        saveInformations={saveInformations}\r\n                                    />\r\n                                )\r\n                    }\r\n\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu\r\n                                    index={index}\r\n                                    deleteAction={deleteAction}\r\n                                    duplicateAction={duplicateAction}\r\n                                    setOpenDialog={setOpenDialog}\r\n                                />                                <OptionDialog\r\n                                    options={options}\r\n                                    saveInfos={saveInformations}\r\n                                    setOptions={setOptions}\r\n                                    openDialog={optionDialog}\r\n                                    setOpenDialog={setOptionDialog}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n                                </Box>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WebAction;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Link.js",["169"],"import { Avatar, Box, FormControl, Grid,  InputLabel,  MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport {makeStyles} from '@material-ui/core'\r\nimport {  Http } from \"@material-ui/icons\"\r\nimport { useContext,useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root:{\r\n        background:'#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields:{\r\n        width:\"100%\"\r\n    },\r\n    dropDown:{\r\n        width:\"100%\"\r\n    },\r\n    smallAvatar: {\r\n      width: theme.spacing(2.5),\r\n      height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst Link = ({index,initialSTate}) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction,saveData} = useContext(ActionContext)\r\n    const [state, setState] = useState({initialSTate})\r\n    const [urlState, setUrlState] = useState(\"UP\")\r\n    const [navigationMode, setnavigationMode] = useState(\"normal\")\r\n\r\n    useEffect(() =>{\r\n        setState(initialSTate)\r\n        setState(initialSTate)\r\n\r\n    },[]\r\n    )\r\n    const formatUrl = (url) =>{\r\n\r\n        if(url.startsWith(\"http\") || url.length < 4){\r\n\r\n            console.log('url est bonne')\r\n            return url\r\n        }else{\r\n            console.log('error url')    \r\n            return \"http://\"+url       \r\n        }\r\n        \r\n    }\r\n\r\n\r\n    const testConnection = async (e) =>{\r\n\r\n        const formatedUrl = formatUrl(e.target.value)\r\n        setState({...state,url:formatedUrl})\r\n\r\n        if(e.target.value !== ''){\r\n\r\n            console.log('accessing ',formatedUrl)\r\n\r\n            await fetch(`http://localhost:5000/api/PARPRE/link?url=${formatedUrl}`)\r\n                .then(res => res.json())\r\n                .then(result => console.log(result.result))\r\n                .then(()=>saveInformations())\r\n        }\r\n  \r\n    }\r\n\r\n    const saveInformations = () =>{\r\n\r\n        if(state.url ===undefined){return}\r\n        console.log(\"state before save : \",state)\r\n\r\n        saveData({\r\n            index:index,\r\n            type:\"link\",\r\n            url:state.url,                             \r\n            informations:\r\n            {\r\n                urlState : urlState,\r\n                navigationMode : navigationMode                                  \r\n            }})\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <Paper \r\n                elevation={0}\r\n                className= {classes.root}>\r\n                <Grid \r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\" >\r\n\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\" >\r\n                        <Box  display=\"flex\" justifyContent=\"center\">\r\n                            <Http color=\"primary\" />\r\n                        </Box>                       \r\n                        \r\n                    </Grid>\r\n                    \r\n                    <Grid item md={6} xl={2}>\r\n                        <TextField\r\n                        \r\n                        className={classes.fields} \r\n                        id='url'\r\n                        value = {state.url}\r\n                        color='primary'\r\n                        label= 'Lien'\r\n\r\n                        onChange={(e) => setState({...state, url: formatUrl(e.target.value)})}\r\n                        onBlur={(e) => {\r\n                            testConnection(e)\r\n                        }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item md={2} xl={2} >\r\n                    <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Etat du site</InputLabel>\r\n                            <Select value={urlState} onChange={(e) => (setUrlState(e.target.value))} onBlur={saveInformations}>\r\n                                <MenuItem value=\"Down\" >Down</MenuItem>\r\n                                <MenuItem value=\"UP\">UP</MenuItem>\r\n                                <MenuItem value=\"Null\">Page blanche</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                    <Grid item md={2} xl={2} >\r\n                    <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Navigation</InputLabel>\r\n                            <Select value={navigationMode} onChange={(e) => (setnavigationMode(e.target.value))} onBlur={saveInformations}>\r\n                                <MenuItem value=\"Privée\" >Privée</MenuItem>\r\n                                <MenuItem value=\"normal\">Normal</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                   \r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                    <OptionMenu index={index} deleteAction={deleteAction} duplicateAction={duplicateAction} />\r\n                            </Grid>\r\n                        \r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                    \r\n                                    <Typography>\r\n                                        {index + 1}\r\n                                    </Typography> \r\n                                    \r\n                                    \r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n                        \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Link;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\ARScript.js",["170","171"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Database.js",["172","173"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Process.js",["174","175"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Service.js",["176","177","178","179","180"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Context\\ActionContext.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionMenu.js",["181"],"import { IconButton, Menu, MenuItem } from \"@material-ui/core\";\r\nimport {  Comment, Delete, FileCopy, MoreVert } from \"@material-ui/icons\";\r\nimport {  useState } from \"react\";\r\n\r\nconst OptionMenu = ({index,deleteAction,duplicateAction, setOpenDialog}) => {\r\n\r\n    const [anchorEl, setAnchor] = useState(null)\r\n\r\n    const handleClick = (event) =>{\r\n        setAnchor(event.currentTarget)\r\n    }\r\n\r\n    const handleClose= () => {\r\n        setAnchor(null)\r\n    }\r\n\r\n    const showDialog = () =>{\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () =>{\r\n        setOpenDialog(false);\r\n    }\r\n    \r\n\r\n    return ( \r\n        <div>\r\n            <IconButton onClick={handleClick}>\r\n                <MoreVert />\r\n            </IconButton>\r\n            <Menu\r\n                id=\"menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n\r\n                <MenuItem onClick={() => {\r\n\r\n                    deleteAction(index)\r\n                    setAnchor(null)\r\n                    \r\n                    }} >\r\n                    \r\n                    <Delete />Supprimer\r\n                \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {\r\n                        \r\n                        handleClose()\r\n                        duplicateAction(index)\r\n                    }\r\n                } \r\n                >\r\n                    <FileCopy /> Dupliquer\r\n                        \r\n                </MenuItem>\r\n                <MenuItem onClick={() => {showDialog(); handleClose()}} >\r\n                    <Comment /> Options\r\n\r\n                </MenuItem>\r\n            </Menu>\r\n            \r\n\r\n        </div>\r\n      );\r\n}\r\n \r\nexport default OptionMenu;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\isconnectialog.js",["182"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, Link, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst DisconnectDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"logOut\" })\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Déconnexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser le lien de déconnection ou le sélecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Link />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOut}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"logout\"\r\n                                        label=\"lien de déconnexion\"\r\n                                        autoComplete={false}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, logOut: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.logOutSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"logOut-selector\"\r\n                                        label=\"ou sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, logOutSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default DisconnectDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\FormDialog.js",["183"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, IconButton, TextField } from \"@material-ui/core\";\r\nimport { Add } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\nconst FormDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({...informations, type:\"form\"})\r\n        console.log(\"updated de dialog form\")\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Remplir un ou des champs </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser le lien de déconnection ou le sélecteur\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.field}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        label=\"Valeur\"\r\n                                        autoComplete={true}\r\n\r\n                                        onChange={(e) => (setInformations({ ...informations, field: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.fieldSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        label=\"sélecteur\"\r\n                                        autoComplete\r\n                                        onChange={(e) => (setInformations({ ...informations, fieldSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <IconButton>\r\n                                <Add />\r\n                            </IconButton>\r\n\r\n                        </Box>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FormDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\OptionDialog.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ConnectionDialog.js",["184"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\r\nimport { AccountCircle, ArrowRight, Lock } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n\r\n\r\nconst ConnectionDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(() => {\r\n        setInformations({ ...informations, type: \"connection\" })\r\n        console.log(\"updated de dialog\")\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title' >Connexion </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\"\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <AccountCircle />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.login}\r\n                                        variant=\"outlined\"\r\n                                        autoFocus\r\n                                        margin=\"dense\"\r\n                                        id=\"login\"\r\n                                        label=\"Login\"\r\n                                        onChange={(e) => (setInformations({ ...informations, login: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.loginSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"login-selector\"\r\n                                        label=\"sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, loginSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <Lock />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        value={informations.password}\r\n                                        margin=\"dense\"\r\n                                        id=\"password\"\r\n                                        label=\"Mot de passe\"\r\n                                        type=\"password\"\r\n                                        onChange={(e) => (setInformations({ ...informations, password: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.passwordSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"password-selector\"\r\n                                        label=\"sélecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, passwordSelector: e.target.value }))}\r\n\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </Box>\r\n\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth >\r\n                                    <InputLabel>Navigateur</InputLabel>\r\n                                    <Select value={informations.navigator || \"Chrome\"} onChange={(e) => setInformations({ ...informations, navigator: e.target.value })}>\r\n                                        <MenuItem value=\"Chrome\" >Chrome</MenuItem>\r\n                                        <MenuItem value=\"Firefox\">Firefox</MenuItem>\r\n                                        <MenuItem value=\"Edge\">Edge</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n                            <Grid item md={6}>\r\n                                <FormControl fullWidth>\r\n                                    <InputLabel>Mode de Navigation</InputLabel>\r\n                                    <Select value={informations.navigatorMode || \"normal\"} onChange={(e) => (setInformations({ ...informations, navigatorMode: e.target.value }))}>\r\n                                        <MenuItem value=\"normal\" >Normal</MenuItem>\r\n                                        <MenuItem value=\"private\">privé</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ConnectionDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Creation\\ClickDialog.js",["185"],"import { Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, TextField } from \"@material-ui/core\";\r\nimport { ArrowRight } from \"@material-ui/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst ClickDialog = ({ informations, setInformations, saveInformations, openDialog, closeDialog }) => {\r\n\r\n    useEffect(()=>{\r\n        setInformations({...informations, type:\"click\"})\r\n    },[])\r\n\r\n    return (\r\n        <div>\r\n            <Dialog\r\n                open={openDialog}\r\n                onClose={closeDialog}\r\n                fullWidth\r\n                onBlur={saveInformations}\r\n            >\r\n                <DialogTitle id='dialog-title'>Effectuer un Click </DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        Le sélecteur est obtenu en faisant un click droit sur le champ à automatiser,\r\n                        Inspecter\" puis click droit sur l'élément html et \"copy selector\".\r\n                        Ici préciser les coordonnées ou le sélecteur.\r\n                    </DialogContentText>\r\n                    <div>\r\n                        <Box display=\"flex\" justifyContent=\"space-around\">\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n\r\n                                <Grid container item spacing={2}>\r\n                                    <Box display=\"flex\" justifyContent=\"inline-block\">\r\n                                        <TextField\r\n                                            value={informations.x}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-x\"\r\n                                            label=\"coordonnées X\"\r\n                                            autoComplete={false}\r\n                                            onChange={(e) => (setInformations({ ...informations, x: e.target.value }))}\r\n                                        />\r\n                                        <TextField\r\n                                            value={informations.y}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            id=\"coords-y\"\r\n                                            label=\"coordonnées Y\"\r\n                                            autoComplete={false}\r\n\r\n                                            onChange={(e) => (setInformations({ ...informations, y: e.target.value }))}\r\n                                        />\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <Grid container spacing={1} alignItems=\"center\">\r\n                                <Grid item >\r\n                                    <ArrowRight />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <TextField\r\n                                        value={informations.clickSelector}\r\n                                        variant=\"outlined\"\r\n                                        margin=\"dense\"\r\n                                        id=\"click-selector\"\r\n                                        label=\"Ou selecteur\"\r\n                                        onChange={(e) => (setInformations({ ...informations, clickSelector: e.target.value }))}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </div>\r\n\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onclick={() => { closeDialog(); saveInformations() }}>\r\n                        Confirmer\r\n                    </Button>\r\n\r\n                </DialogActions>\r\n\r\n            </Dialog>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ClickDialog;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Command.js",["186","187","188"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Pages\\TestSSA.js",["189","190","191","192"],"import { Accordion, AccordionSummary, AccordionDetails, CardHeader, Divider, Paper } from '@material-ui/core';\r\nimport { useEffect, useState } from 'react';\r\nimport { Card, CardContent, Grid, Typography } from '@material-ui/core'\r\nimport { useHistory } from 'react-router';\r\nimport { ExpandMore } from '@material-ui/icons';\r\n\r\n\r\nconst TestSSA = () => {\r\n\r\n    const history = useHistory()\r\n    const [state, setState] = useState()\r\n    const [services, setServices] = useState([])\r\n    const [databases, setDatabase] = useState([])\r\n\r\n    useEffect(() => {\r\n        setState(history.location.state)\r\n        getDatabases()\r\n        getServices()\r\n\r\n        console.log(\"state \", state, \"hstory \", history.location)\r\n    }, [])\r\n    \r\n\r\n    const getDatabases = () => {\r\n        var DBs = new Set()\r\n        history.location.state.Arret.map(action => {\r\n            action.type === \"database\" && DBs.add(action.name)\r\n        })\r\n        setDatabase(Array.from(DBs))\r\n    }\r\n    const getServices = () => {\r\n        var SVCs = new Set()\r\n        history.location.state.Arret.map(action => {\r\n            action.type === \"service\" && SVCs.add(action.name)\r\n        })\r\n        setServices(Array.from(SVCs))\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid container direction=\"row\" spacing={1} >\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"Production\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Accordion>\r\n                                                    <AccordionSummary expandIcon={<ExpandMore />}>\r\n                                                        <Typography>Server : {variable.prod}</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        <Grid container spacing={2}>\r\n                                                            {\r\n                                                                services.length > 0 && services.map(service => (\r\n                                                                    <Grid item md={12}>\r\n                                                                        <Typography color=\"primary\">\r\n                                                                            service : {service}\r\n                                                                        </Typography>\r\n                                                                    </Grid>\r\n                                                                ))\r\n                                                            }\r\n                                                            {\r\n                                                                databases.map(database => (\r\n                                                                    <Grid item md={12}>\r\n                                                                        <Typography color=\"primary\">\r\n                                                                            Base de données : {database}\r\n                                                                        </Typography>\r\n                                                                    </Grid>\r\n                                                                ))\r\n                                                            }\r\n                                                        </Grid>\r\n\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n\r\n                                            ))\r\n                                        }\r\n\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"HPROD\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Accordion>\r\n                                                    <AccordionSummary expandIcon={<ExpandMore />}>\r\n                                                        <Typography>Server : {variable.hprod}</Typography>\r\n                                                    </AccordionSummary>\r\n                                                    <AccordionDetails>\r\n                                                        {\r\n                                                            history.location.state.Arret.map(action => (\r\n                                                                <Typography color=\"primary\">{action.type} : {action.name || action.path}</Typography>\r\n                                                            ))\r\n                                                        }\r\n\r\n                                                    </AccordionDetails>\r\n                                                </Accordion>\r\n\r\n                                            ))\r\n                                        }\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n                <Grid item sm={4} md={4} xl={4}>\r\n                    <Card elevation={0}>\r\n                        <CardHeader title=\"HPROD2\" />\r\n\r\n\r\n                        <CardContent>\r\n                            <Grid container alignItems=\"center\" justify=\"center\" spacing={2}>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Master\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        <Typography>\r\n                                            Jenkins Rebond\r\n                                        </Typography>\r\n                                    </Card>\r\n                                </Grid>\r\n                                <Grid item md={12} direction=\"row\" >\r\n                                    <Card elevation={0} >\r\n                                        {\r\n                                            history.location.state.variables.servers.map(variable => (\r\n                                                <Typography gutterBottom>\r\n                                                    Server : {variable.dev}\r\n                                                    <Divider variant=\"fullWidth\" />\r\n                                                    {\r\n                                                        variable.dev && history.location.state.Arret.map(action => (\r\n                                                            <Typography color=\"primary\">{action.type} : {action.name || action.path}</Typography>\r\n                                                        ))\r\n                                                    }\r\n                                                </Typography>\r\n\r\n                                            ))\r\n                                        }\r\n                                    </Card>\r\n                                </Grid>\r\n\r\n\r\n                            </Grid>\r\n\r\n                            <Grid container alignItems=\"center\" justify=\"center\">\r\n                                <Grid item md={6} direction=\"row\" >\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                        </CardContent>\r\n\r\n\r\n                    </Card>\r\n\r\n                </Grid>\r\n\r\n\r\n\r\n            </Grid>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default TestSSA;","C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Checker.js",[],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Log.js",["193","194","195","196","197","198","199"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\IIS.js",["200","201","202"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Rename.js",["203","204","205","206","207","208","209","210"],"C:\\Users\\samba\\Desktop\\projetSFR\\AR\\client\\src\\Components\\Actions\\Disk.js",["211","212","213","214","215","216","217"],{"ruleId":"218","replacedBy":"219"},{"ruleId":"220","replacedBy":"221"},{"ruleId":"222","severity":1,"message":"223","line":36,"column":12,"nodeType":"224","messageId":"225","endLine":36,"endColumn":22},{"ruleId":"222","severity":1,"message":"226","line":36,"column":24,"nodeType":"224","messageId":"225","endLine":36,"endColumn":37},{"ruleId":"227","severity":1,"message":"228","line":85,"column":8,"nodeType":"229","endLine":85,"endColumn":10,"suggestions":"230"},{"ruleId":"231","severity":1,"message":"232","line":97,"column":32,"nodeType":"233","messageId":"234","endLine":97,"endColumn":34},{"ruleId":"231","severity":1,"message":"235","line":98,"column":72,"nodeType":"236","messageId":"237","endLine":98,"endColumn":78},{"ruleId":"231","severity":1,"message":"235","line":133,"column":31,"nodeType":"233","messageId":"238","endLine":133,"endColumn":33},{"ruleId":"222","severity":1,"message":"239","line":3,"column":10,"nodeType":"224","messageId":"225","endLine":3,"endColumn":13},{"ruleId":"222","severity":1,"message":"240","line":18,"column":11,"nodeType":"224","messageId":"225","endLine":18,"endColumn":14},{"ruleId":"227","severity":1,"message":"241","line":29,"column":7,"nodeType":"229","endLine":29,"endColumn":9,"suggestions":"242"},{"ruleId":"222","severity":1,"message":"243","line":31,"column":21,"nodeType":"224","messageId":"225","endLine":31,"endColumn":31},{"ruleId":"222","severity":1,"message":"244","line":19,"column":7,"nodeType":"224","messageId":"225","endLine":19,"endColumn":16},{"ruleId":"227","severity":1,"message":"245","line":36,"column":8,"nodeType":"229","endLine":36,"endColumn":10,"suggestions":"246"},{"ruleId":"222","severity":1,"message":"247","line":32,"column":12,"nodeType":"224","messageId":"225","endLine":32,"endColumn":20},{"ruleId":"222","severity":1,"message":"248","line":32,"column":22,"nodeType":"224","messageId":"225","endLine":32,"endColumn":33},{"ruleId":"222","severity":1,"message":"249","line":41,"column":11,"nodeType":"224","messageId":"225","endLine":41,"endColumn":18},{"ruleId":"222","severity":1,"message":"250","line":34,"column":12,"nodeType":"224","messageId":"225","endLine":34,"endColumn":20},{"ruleId":"222","severity":1,"message":"251","line":53,"column":11,"nodeType":"224","messageId":"225","endLine":53,"endColumn":22},{"ruleId":"222","severity":1,"message":"252","line":56,"column":11,"nodeType":"224","messageId":"225","endLine":56,"endColumn":22},{"ruleId":"222","severity":1,"message":"253","line":59,"column":11,"nodeType":"224","messageId":"225","endLine":59,"endColumn":18},{"ruleId":"227","severity":1,"message":"254","line":72,"column":8,"nodeType":"229","endLine":72,"endColumn":10,"suggestions":"255"},{"ruleId":"227","severity":1,"message":"254","line":37,"column":7,"nodeType":"229","endLine":37,"endColumn":9,"suggestions":"256"},{"ruleId":"222","severity":1,"message":"257","line":27,"column":54,"nodeType":"224","messageId":"225","endLine":27,"endColumn":63},{"ruleId":"227","severity":1,"message":"254","line":49,"column":8,"nodeType":"229","endLine":49,"endColumn":10,"suggestions":"258"},{"ruleId":"227","severity":1,"message":"254","line":60,"column":8,"nodeType":"229","endLine":60,"endColumn":10,"suggestions":"259"},{"ruleId":"222","severity":1,"message":"260","line":100,"column":52,"nodeType":"224","messageId":"225","endLine":100,"endColumn":58},{"ruleId":"227","severity":1,"message":"254","line":50,"column":7,"nodeType":"229","endLine":50,"endColumn":9,"suggestions":"261"},{"ruleId":"222","severity":1,"message":"257","line":53,"column":54,"nodeType":"224","messageId":"225","endLine":53,"endColumn":63},{"ruleId":"222","severity":1,"message":"262","line":30,"column":12,"nodeType":"224","messageId":"225","endLine":30,"endColumn":18},{"ruleId":"222","severity":1,"message":"263","line":30,"column":20,"nodeType":"224","messageId":"225","endLine":30,"endColumn":29},{"ruleId":"222","severity":1,"message":"264","line":34,"column":12,"nodeType":"224","messageId":"225","endLine":34,"endColumn":21},{"ruleId":"222","severity":1,"message":"265","line":34,"column":23,"nodeType":"224","messageId":"225","endLine":34,"endColumn":35},{"ruleId":"227","severity":1,"message":"266","line":63,"column":8,"nodeType":"229","endLine":63,"endColumn":10,"suggestions":"267"},{"ruleId":"222","severity":1,"message":"268","line":21,"column":11,"nodeType":"224","messageId":"225","endLine":21,"endColumn":22},{"ruleId":"227","severity":1,"message":"269","line":8,"column":8,"nodeType":"229","endLine":8,"endColumn":10,"suggestions":"270"},{"ruleId":"227","severity":1,"message":"269","line":11,"column":8,"nodeType":"229","endLine":11,"endColumn":10,"suggestions":"271"},{"ruleId":"227","severity":1,"message":"269","line":13,"column":8,"nodeType":"229","endLine":13,"endColumn":10,"suggestions":"272"},{"ruleId":"227","severity":1,"message":"269","line":9,"column":7,"nodeType":"229","endLine":9,"endColumn":9,"suggestions":"273"},{"ruleId":"222","severity":1,"message":"264","line":34,"column":12,"nodeType":"224","messageId":"225","endLine":34,"endColumn":21},{"ruleId":"222","severity":1,"message":"265","line":34,"column":23,"nodeType":"224","messageId":"225","endLine":34,"endColumn":35},{"ruleId":"227","severity":1,"message":"254","line":53,"column":8,"nodeType":"229","endLine":53,"endColumn":10,"suggestions":"274"},{"ruleId":"222","severity":1,"message":"275","line":1,"column":78,"nodeType":"224","messageId":"225","endLine":1,"endColumn":83},{"ruleId":"227","severity":1,"message":"276","line":21,"column":8,"nodeType":"229","endLine":21,"endColumn":10,"suggestions":"277"},{"ruleId":"231","severity":1,"message":"235","line":26,"column":49,"nodeType":"233","messageId":"238","endLine":26,"endColumn":51},{"ruleId":"231","severity":1,"message":"235","line":33,"column":49,"nodeType":"233","messageId":"238","endLine":33,"endColumn":51},{"ruleId":"222","severity":1,"message":"278","line":1,"column":23,"nodeType":"224","messageId":"225","endLine":1,"endColumn":34},{"ruleId":"222","severity":1,"message":"279","line":1,"column":42,"nodeType":"224","messageId":"225","endLine":1,"endColumn":52},{"ruleId":"222","severity":1,"message":"280","line":1,"column":54,"nodeType":"224","messageId":"225","endLine":1,"endColumn":62},{"ruleId":"222","severity":1,"message":"281","line":1,"column":71,"nodeType":"224","messageId":"225","endLine":1,"endColumn":77},{"ruleId":"222","severity":1,"message":"282","line":3,"column":10,"nodeType":"224","messageId":"225","endLine":3,"endColumn":19},{"ruleId":"227","severity":1,"message":"254","line":49,"column":8,"nodeType":"229","endLine":49,"endColumn":10,"suggestions":"283"},{"ruleId":"222","severity":1,"message":"257","line":52,"column":54,"nodeType":"224","messageId":"225","endLine":52,"endColumn":63},{"ruleId":"222","severity":1,"message":"284","line":38,"column":26,"nodeType":"224","messageId":"225","endLine":38,"endColumn":41},{"ruleId":"227","severity":1,"message":"254","line":58,"column":8,"nodeType":"229","endLine":58,"endColumn":10,"suggestions":"285"},{"ruleId":"222","severity":1,"message":"260","line":68,"column":52,"nodeType":"224","messageId":"225","endLine":68,"endColumn":58},{"ruleId":"222","severity":1,"message":"278","line":1,"column":23,"nodeType":"224","messageId":"225","endLine":1,"endColumn":34},{"ruleId":"222","severity":1,"message":"279","line":1,"column":42,"nodeType":"224","messageId":"225","endLine":1,"endColumn":52},{"ruleId":"222","severity":1,"message":"280","line":1,"column":54,"nodeType":"224","messageId":"225","endLine":1,"endColumn":62},{"ruleId":"222","severity":1,"message":"281","line":1,"column":71,"nodeType":"224","messageId":"225","endLine":1,"endColumn":77},{"ruleId":"222","severity":1,"message":"282","line":3,"column":10,"nodeType":"224","messageId":"225","endLine":3,"endColumn":19},{"ruleId":"222","severity":1,"message":"286","line":3,"column":21,"nodeType":"224","messageId":"225","endLine":3,"endColumn":27},{"ruleId":"227","severity":1,"message":"254","line":49,"column":8,"nodeType":"229","endLine":49,"endColumn":10,"suggestions":"287"},{"ruleId":"222","severity":1,"message":"257","line":52,"column":54,"nodeType":"224","messageId":"225","endLine":52,"endColumn":63},{"ruleId":"222","severity":1,"message":"288","line":1,"column":23,"nodeType":"224","messageId":"225","endLine":1,"endColumn":27},{"ruleId":"222","severity":1,"message":"278","line":1,"column":29,"nodeType":"224","messageId":"225","endLine":1,"endColumn":40},{"ruleId":"222","severity":1,"message":"279","line":1,"column":48,"nodeType":"224","messageId":"225","endLine":1,"endColumn":58},{"ruleId":"222","severity":1,"message":"281","line":1,"column":77,"nodeType":"224","messageId":"225","endLine":1,"endColumn":83},{"ruleId":"222","severity":1,"message":"282","line":3,"column":10,"nodeType":"224","messageId":"225","endLine":3,"endColumn":19},{"ruleId":"222","severity":1,"message":"286","line":3,"column":27,"nodeType":"224","messageId":"225","endLine":3,"endColumn":33},{"ruleId":"227","severity":1,"message":"254","line":53,"column":8,"nodeType":"229","endLine":53,"endColumn":10,"suggestions":"289"},"no-native-reassign",["290"],"no-negated-in-lhs",["291"],"no-unused-vars","'autoCreate' is assigned a value but never used.","Identifier","unusedVar","'setAutoCreate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history.location'. Either include it or remove the dependency array.","ArrayExpression",["292"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","expectedInside","'Add' is defined but never used.","'url' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history.location.state' and 'state'. Either include them or remove the dependency array.",["293"],"'setServers' is assigned a value but never used.","'cardWidth' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["294"],"'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'getAPOS' is assigned a value but never used.","'anchorEl' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'handleClose' is assigned a value but never used.","'reduire' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'initialSTate'. Either include it or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["295"],["296"],"'AddServer' is assigned a value but never used.",["297"],["298"],"'result' is assigned a value but never used.",["299"],"'action' is assigned a value but never used.","'setAction' is assigned a value but never used.","'pingState' is assigned a value but never used.","'setPingState' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'index' and 'initialSTate'. Either include them or remove the dependency array. If 'setState' needs the current value of 'initialSTate', you can also switch to useReducer instead of useState and read 'initialSTate' in the reducer.",["300"],"'closeDialog' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'informations' and 'setInformations'. Either include them or remove the dependency array. If 'setInformations' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["301"],["302"],["303"],["304"],["305"],"'Paper' is defined but never used.","React Hook useEffect has missing dependencies: 'getDatabases', 'getServices', 'history.location', and 'state'. Either include them or remove the dependency array.",["306"],"'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'Autorenew' is defined but never used.",["307"],"'setElementError' is assigned a value but never used.",["308"],"'Search' is defined but never used.",["309"],"'Chip' is defined but never used.",["310"],"no-global-assign","no-unsafe-negation",{"desc":"311","fix":"312"},{"desc":"313","fix":"314"},{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"317","fix":"319"},{"desc":"317","fix":"320"},{"desc":"317","fix":"321"},{"desc":"317","fix":"322"},{"desc":"323","fix":"324"},{"desc":"325","fix":"326"},{"desc":"325","fix":"327"},{"desc":"325","fix":"328"},{"desc":"325","fix":"329"},{"desc":"317","fix":"330"},{"desc":"331","fix":"332"},{"desc":"317","fix":"333"},{"desc":"317","fix":"334"},{"desc":"317","fix":"335"},{"desc":"317","fix":"336"},"Update the dependencies array to be: [history.location]",{"range":"337","text":"338"},"Update the dependencies array to be: [history.location.state, state]",{"range":"339","text":"340"},"Update the dependencies array to be: [actions]",{"range":"341","text":"342"},"Update the dependencies array to be: [initialSTate]",{"range":"343","text":"344"},{"range":"345","text":"344"},{"range":"346","text":"344"},{"range":"347","text":"344"},{"range":"348","text":"344"},"Update the dependencies array to be: [index, initialSTate]",{"range":"349","text":"350"},"Update the dependencies array to be: [informations, setInformations]",{"range":"351","text":"352"},{"range":"353","text":"352"},{"range":"354","text":"352"},{"range":"355","text":"352"},{"range":"356","text":"344"},"Update the dependencies array to be: [getDatabases, getServices, history.location, state]",{"range":"357","text":"358"},{"range":"359","text":"344"},{"range":"360","text":"344"},{"range":"361","text":"344"},{"range":"362","text":"344"},[3168,3170],"[history.location]",[821,823],"[history.location.state, state]",[1520,1522],"[actions]",[2263,2265],"[initialSTate]",[1173,1175],[1482,1484],[1873,1875],[1450,1452],[1966,1968],"[index, initialSTate]",[433,435],"[informations, setInformations]",[472,474],[545,547],[417,419],[1420,1422],[723,725],"[getDatabases, getServices, history.location, state]",[1403,1405],[1744,1746],[1416,1418],[1604,1606]]