{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samba\\\\Desktop\\\\projet SFR\\\\AR\\\\client\\\\src\\\\Components\\\\Actions\\\\WebAction.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, FormControl, Grid, IconButton, InputLabel, Menu, MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core';\nimport { AccountCircle, Add, ArrowRight, Comment, Delete, FileCopy, Link, Lock, MoreVert, Mouse, Web } from \"@material-ui/icons\";\nimport { useContext, useEffect, useState } from \"react\";\nimport ActionContext from \"../../Context/ActionContext\";\nimport ClickDialog from \"../Creation/ClickDialog\";\nimport ConnectionDialog from \"../Creation/ConnectionDialog\";\nimport DisconnectDialog from \"../Creation/isconnectialog\";\nimport OptionMenu from \"../Creation/OptionMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: '#F6F6FB',\n    padding: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  fields: {\n    width: \"100%\"\n  },\n  dropDown: {\n    width: \"100%\"\n  },\n  smallAvatar: {\n    width: theme.spacing(2.5),\n    height: theme.spacing(2.5)\n  }\n}));\n\nconst WebAction = ({\n  index,\n  initialSTate\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const [anchorEl, setAnchor] = useState(null);\n  const {\n    deleteAction,\n    duplicateAction,\n    saveData\n  } = useContext(ActionContext);\n  const [state, setState] = useState({\n    initialSTate\n  });\n  const [actionType, setActionType] = useState(\"Connexion\");\n  const [openDialog, setOpenDialog] = useState(false);\n  const [navigator, setNavigator] = useState(\"Chrome\");\n  const [navigatorMode, setNavigatorMode] = useState(\"normal\");\n  const [logOut, setLogOut] = useState(\"\");\n  const [logOutSelector, setLogOutSelector] = useState(\"\");\n  const [clickElement, setclickElement] = useState(\"\");\n\n  const handleClick = event => {\n    setAnchor(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchor(null);\n  };\n\n  const reduire = () => {};\n\n  useEffect(() => {\n    setState(initialSTate);\n  }, []);\n\n  const formatUrl = url => {\n    if (url.startsWith(\"http\")) {\n      console.log('url est bonne');\n      return url;\n    } else {\n      console.log('error url');\n      return \"http://\" + url;\n    }\n  };\n\n  const testConnection = async e => {\n    const formatedUrl = formatUrl(e.target.value);\n    setState({ ...state,\n      link: formatedUrl\n    });\n\n    if (formatedUrl !== '') {\n      console.log('accessing ', formatedUrl);\n      setState({ ...state,\n        url: formatedUrl\n      });\n      fetch(`http://localhost:5000/api/PARPRE/link?url=${formatedUrl}`).then(res => res.json()).then(result => console.log(result.result));\n    }\n  };\n\n  const showDialog = () => {\n    setOpenDialog(true);\n  };\n\n  const closeDialog = () => {\n    setOpenDialog(false);\n  };\n\n  const saveInformations = () => {\n    if (state.url === undefined) {\n      return;\n    }\n\n    saveData({\n      index: index,\n      type: \"webAction\",\n      url: state.url\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 0,\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 1,\n          xl: 1,\n          container: true,\n          alignContent: \"center\",\n          direction: \"column\",\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Web, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 6,\n          xl: 2,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            className: classes.fields,\n            id: \"url\",\n            color: \"primary\",\n            label: \"Lien\",\n            value: state.url,\n            onChange: e => setState({ ...state,\n              url: e.target.value\n            }),\n            onBlur: e => {\n              testConnection(e);\n              saveInformations();\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 2,\n          xl: 3,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            className: classes.dropDown,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: actionType,\n              onChange: e => setActionType(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"Connexion\",\n                children: \"Connexion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"D\\xE9connexion\",\n                children: \"D\\xE9connexion\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 143,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"Click\",\n                children: \"Click\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"Remplir\",\n                children: \"Remplir champ(s)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"Contenu\",\n                children: \"V\\xE9rifier un contenu\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 2,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            children: /*#__PURE__*/_jsxDEV(FormControl, {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                color: \"primary\",\n                onClick: showDialog,\n                children: \"options\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), actionType === \"Connexion\" ?\n        /*#__PURE__*/\n\n        /**Dialog connexion */\n        _jsxDEV(ConnectionDialog, {\n          state: state,\n          saveData: saveData,\n          setState: setState,\n          openDialog: openDialog,\n          closeDialog: closeDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 25\n        }, this) : actionType === \"DÃ©connexion\" ?\n        /*#__PURE__*/\n\n        /**Dialog deconnexion */\n        _jsxDEV(DisconnectDialog, {\n          state: state,\n          setState: setState,\n          saveData: saveData,\n          closeDialog: closeDialog,\n          openDialog: openDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 25\n        }, this) : actionType === \"Click\" ?\n        /*#__PURE__*/\n\n        /**Dialog clicke */\n        _jsxDEV(ClickDialog, {\n          saveData: saveData,\n          state: state,\n          setState: setState,\n          closeDialog: closeDialog,\n          openDialog: openDialog\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this) :\n        /*#__PURE__*/\n\n        /**Dialog remplir */\n        _jsxDEV(Dialog, {\n          open: openDialog,\n          onClose: closeDialog,\n          fullWidth: 200,\n          onBlur: () => {\n            saveData({\n              index: index,\n              type: \"webAction\",\n              url: state.url,\n              informations: {\n                type: \"field\"\n              }\n            });\n          },\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"dialog-title\",\n            children: \"Remplir un ou des champs \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n              children: \"Le s\\xE9lecteur est obtenu en faisant un click droit sur le champ \\xE0 automatiser, Inspecter\\\" puis click droit sur l'\\xE9l\\xE9ment html et \\\"copy selector\\\". Ici pr\\xE9ciser le lien de d\\xE9connection ou le s\\xE9lecteur\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                display: \"flex\",\n                justifyContent: \"space-around\",\n                children: [/*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 1,\n                  alignItems: \"center\",\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      value: state.fields,\n                      variant: \"outlined\",\n                      autoFocus: true,\n                      margin: \"dense\",\n                      label: \"champ\",\n                      autoComplete: false,\n                      onChange: e => setState({ ...state,\n                        fields: e.target.value\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 227,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 226,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 224,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  spacing: 1,\n                  alignItems: \"center\",\n                  children: /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    children: /*#__PURE__*/_jsxDEV(TextField, {\n                      value: state.fieldSelector,\n                      variant: \"outlined\",\n                      margin: \"dense\",\n                      label: \"s\\xE9lecteur\",\n                      onChange: e => setState({ ...state,\n                        fieldSelector: e.target.value\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 243,\n                      columnNumber: 45\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 242,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                  children: /*#__PURE__*/_jsxDEV(Add, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 254,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              onclick: closeDialog,\n              children: \"Confirmer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 22\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 1,\n          xl: 1,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 3,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(OptionMenu, {\n                index: index,\n                deleteAction: deleteAction,\n                duplicateAction: duplicateAction\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                my: \"auto\",\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  className: classes.smallAvatar,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    children: index + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 288,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 9\n  }, this);\n};\n\n_s(WebAction, \"tSNCCFjA3MDe8Y7cAJC150WhAMU=\", false, function () {\n  return [useStyles];\n});\n\n_c = WebAction;\nexport default WebAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebAction\");","map":{"version":3,"sources":["C:/Users/samba/Desktop/projet SFR/AR/client/src/Components/Actions/WebAction.js"],"names":["Avatar","Box","Button","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","FormControl","Grid","IconButton","InputLabel","Menu","MenuItem","Paper","Select","TextField","Typography","makeStyles","AccountCircle","Add","ArrowRight","Comment","Delete","FileCopy","Link","Lock","MoreVert","Mouse","Web","useContext","useEffect","useState","ActionContext","ClickDialog","ConnectionDialog","DisconnectDialog","OptionMenu","useStyles","theme","root","background","padding","spacing","marginBottom","fields","width","dropDown","smallAvatar","height","WebAction","index","initialSTate","classes","anchorEl","setAnchor","deleteAction","duplicateAction","saveData","state","setState","actionType","setActionType","openDialog","setOpenDialog","navigator","setNavigator","navigatorMode","setNavigatorMode","logOut","setLogOut","logOutSelector","setLogOutSelector","clickElement","setclickElement","handleClick","event","currentTarget","handleClose","reduire","formatUrl","url","startsWith","console","log","testConnection","e","formatedUrl","target","value","link","fetch","then","res","json","result","showDialog","closeDialog","saveInformations","undefined","type","informations","fieldSelector"],"mappings":"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","sourcesContent":["import { Avatar, Box, Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,  FormControl, Grid, IconButton, InputLabel, Menu, MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport {makeStyles} from '@material-ui/core'\r\nimport {  AccountCircle,  Add,  ArrowRight,  Comment, Delete, FileCopy,  Link,  Lock,  MoreVert, Mouse, Web } from \"@material-ui/icons\"\r\nimport { useContext, useEffect, useState } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport ClickDialog from \"../Creation/ClickDialog\"\r\nimport ConnectionDialog from \"../Creation/ConnectionDialog\"\r\nimport DisconnectDialog from \"../Creation/isconnectialog\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\nconst useStyles = makeStyles((theme)=>({\r\n    root:{\r\n        background:'#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields:{\r\n        width:\"100%\"\r\n    },\r\n    dropDown:{\r\n        width:\"100%\"\r\n    },\r\n    smallAvatar: {\r\n      width: theme.spacing(2.5),\r\n      height: theme.spacing(2.5)\r\n    }\r\n}))\r\nconst WebAction = ({index,initialSTate}) => {\r\n    const classes = useStyles()\r\n    const [anchorEl, setAnchor] = useState(null)\r\n    const { deleteAction, duplicateAction,saveData} = useContext(ActionContext)\r\n    const [state, setState] = useState({initialSTate})\r\n    const [actionType, setActionType] = useState(\"Connexion\")\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n    const [navigator, setNavigator] = useState(\"Chrome\")\r\n    const [navigatorMode, setNavigatorMode] = useState(\"normal\")\r\n    const [logOut, setLogOut] = useState(\"\")\r\n    const [logOutSelector, setLogOutSelector] = useState(\"\")\r\n    const [clickElement, setclickElement] = useState(\"\")\r\n\r\n\r\n    const handleClick = (event) =>{\r\n        setAnchor(event.currentTarget)\r\n    }\r\n    const handleClose= () => {\r\n        setAnchor(null)\r\n    }\r\n    const reduire = () =>{\r\n \r\n    }\r\n    useEffect(() =>{\r\n        setState(initialSTate)\r\n\r\n    },[]\r\n    )\r\n    const formatUrl = (url) =>{\r\n        \r\n        if(url.startsWith(\"http\")){\r\n\r\n            console.log('url est bonne')\r\n            return url\r\n        }else{\r\n            console.log('error url')    \r\n            return \"http://\"+url       \r\n        }\r\n        \r\n    }\r\n\r\n    const testConnection = async (e) =>{\r\n\r\n        const formatedUrl = formatUrl(e.target.value)\r\n        setState({...state,link:formatedUrl})\r\n\r\n        if(formatedUrl !== ''){\r\n\r\n            console.log('accessing ',formatedUrl)\r\n\r\n            setState({...state, url:formatedUrl})\r\n\r\n            fetch(`http://localhost:5000/api/PARPRE/link?url=${formatedUrl}`)\r\n                .then(res => res.json())\r\n                .then(result => console.log(result.result))\r\n                \r\n        }\r\n  \r\n    }\r\n    const showDialog = () =>{\r\n        setOpenDialog(true);\r\n    }\r\n\r\n    const closeDialog = () =>{\r\n        setOpenDialog(false);\r\n    }\r\n\r\n    const saveInformations = () =>{\r\n\r\n        if(state.url ===undefined){return}\r\n\r\n        saveData({\r\n            index:index,\r\n            type:\"webAction\",\r\n            url:state.url})\r\n    }\r\n    \r\n\r\n    return ( \r\n        <div>\r\n            <Paper \r\n                elevation={0}\r\n                className= {classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\" \r\n                    \r\n                    >\r\n                    <Grid item md={1} xl={1} container alignContent=\"center\" direction=\"column\" >\r\n                        <Box  display=\"flex\" justifyContent=\"center\">\r\n                        <Web color=\"primary\" />\r\n                        </Box>\r\n                        \r\n                        \r\n                    </Grid>\r\n                    <Grid item md={6} xl={2}>\r\n                        <TextField\r\n                        \r\n                        className={classes.fields} \r\n                        id='url'\r\n                        color='primary'\r\n                        label= 'Lien'\r\n                        value={state.url}                        \r\n                        onChange={(e) => setState({...state, url:e.target.value})}\r\n                        onBlur={(e) => {testConnection(e);saveInformations()}}\r\n                        />\r\n                    </Grid>\r\n                    \r\n                    <Grid item md={2} xl={3} >\r\n                        <FormControl className={classes.dropDown}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={actionType} onChange={(e) => (setActionType(e.target.value))}>\r\n                                <MenuItem value=\"Connexion\" >Connexion</MenuItem>\r\n                                <MenuItem value=\"DÃ©connexion\" >DÃ©connexion</MenuItem>\r\n                                <MenuItem value=\"Click\">Click</MenuItem>\r\n                                <MenuItem value=\"Remplir\">Remplir champ(s)</MenuItem>\r\n                                <MenuItem value=\"Contenu\">VÃ©rifier un contenu</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    \r\n                    \r\n                    <Grid item md={2} >\r\n                        \r\n                        <Box  display=\"flex\" justifyContent=\"center\">\r\n                            <FormControl >\r\n                                <Button variant=\"contained\" color=\"primary\" onClick={showDialog}>options</Button>\r\n                            </FormControl>\r\n                        </Box>\r\n                        \r\n                    </Grid>\r\n                    \r\n                    {actionType === \"Connexion\" ? \r\n                    /**Dialog connexion */\r\n                    \r\n                    (\r\n                        <ConnectionDialog\r\n                        state={state}\r\n                        saveData = {saveData}\r\n                        setState = {setState}\r\n                        openDialog = {openDialog}\r\n                        closeDialog = {closeDialog}\r\n                        \r\n                        \r\n                        />\r\n                    ): actionType === \"DÃ©connexion\" ?\r\n                    /**Dialog deconnexion */\r\n                    (\r\n                        <DisconnectDialog \r\n                        state={state}\r\n                        setState={setState}\r\n                        saveData={saveData}\r\n                        closeDialog={closeDialog}\r\n                        openDialog={openDialog}\r\n                        />\r\n                    ): actionType === \"Click\" ?\r\n                    /**Dialog clicke */\r\n\r\n                    (\r\n                        <ClickDialog \r\n                        saveData={saveData}\r\n                        state={state}\r\n                        setState={setState}\r\n                        closeDialog={closeDialog}\r\n                        openDialog={openDialog}\r\n                        />\r\n                    ):\r\n                    /**Dialog remplir */\r\n\r\n                    (<Dialog\r\n                        open={openDialog}\r\n                        onClose={closeDialog}\r\n                        fullWidth={200}\r\n                        onBlur={() => {saveData(\r\n                            {\r\n                                index:index,\r\n                                type:\"webAction\",\r\n                                url:state.url,                             \r\n                                informations:\r\n                                {\r\n                                    type : \"field\"                                    \r\n                                }\r\n                            })}\r\n                        }\r\n                        >\r\n                            <DialogTitle id='dialog-title'>Remplir un ou des champs </DialogTitle>\r\n                            <DialogContent>\r\n                                <DialogContentText>\r\n                                    Le sÃ©lecteur est obtenu en faisant un click droit sur le champ Ã  automatiser,  \r\n                                    Inspecter\" puis click droit sur l'Ã©lÃ©ment html et \"copy selector\". \r\n                                    Ici prÃ©ciser le lien de dÃ©connection ou le sÃ©lecteur\r\n                                </DialogContentText>\r\n                                <div>\r\n                                    <Box display=\"flex\" justifyContent=\"space-around\">\r\n                                        <Grid container spacing={1} alignItems=\"center\">\r\n                                            \r\n                                            <Grid item>\r\n                                            <TextField\r\n                                            value={state.fields}\r\n                                            variant=\"outlined\"\r\n                                            autoFocus\r\n                                            margin=\"dense\"\r\n                                            label=\"champ\"\r\n                                            autoComplete={false}\r\n                                            \r\n                                            onChange={(e) => (setState({...state, fields:e.target.value}))}\r\n                                            />\r\n                                            </Grid>\r\n                                        </Grid>\r\n    \r\n                                        <Grid container spacing={1} alignItems=\"center\">\r\n                                            \r\n                                            <Grid item>\r\n                                            <TextField\r\n                                            value={state.fieldSelector}\r\n                                            variant=\"outlined\"                                    \r\n                                            margin=\"dense\"\r\n                                            label=\"sÃ©lecteur\"\r\n                                            onChange={(e) => (setState({...state, fieldSelector:e.target.value}))}\r\n                                            />\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    \r\n                                        <IconButton>\r\n                                            <Add />\r\n                                        </IconButton>\r\n                                    \r\n                                    </Box>\r\n    \r\n                                    \r\n    \r\n                                    \r\n                                    \r\n                                </div>\r\n    \r\n                            </DialogContent>\r\n                            <DialogActions>\r\n                                <Button onclick = {closeDialog}>\r\n                                    Confirmer\r\n                                </Button>\r\n                                \r\n                            </DialogActions>\r\n    \r\n                        </Dialog>\r\n                    )\r\n                    }\r\n                    \r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu index={index} deleteAction={deleteAction} duplicateAction={duplicateAction} />\r\n                            </Grid>\r\n                        \r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                    \r\n                                    <Typography>\r\n                                        {index + 1}\r\n                                    </Typography> \r\n                                    \r\n                                    \r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n                        \r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default WebAction;"]},"metadata":{},"sourceType":"module"}