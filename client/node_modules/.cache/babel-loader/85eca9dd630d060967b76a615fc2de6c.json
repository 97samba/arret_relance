{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samba\\\\Desktop\\\\projet SFR\\\\AR\\\\client\\\\src\\\\Pages\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport { FormControlLabel, FormGroup, Grid, makeStyles, Switch, TextField, Typography } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport ARCard from \"../Components/ARCard\";\nimport RightNav from \"../Components/Creation/RightNav\";\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst drawerWidthRight = 260;\nconst useStyles = makeStyles(theme => {\n  return {\n    root: {\n      width: `calc(100% - ${drawerWidthRight}px)`\n    }\n  };\n});\n\nconst Create = () => {\n  _s();\n\n  const [titleOpen, setTitleOpen] = useState(false); //titre de la parpre ou de la POS\n\n  const [title, setTitle] = useState(\"APPXXXX_SSA\"); //les actions d'arrêt\n\n  const [StopActions, setStopActions] = useState([]); //les Actions de relance\n\n  const [StartActions, setStartActions] = useState([]); //creation automatique de la verification\n\n  const [autoCreate, setAutoCreate] = useState(false); //Si on fait la relance automatiquement\n\n  const [autoRelance, setAutoRelance] = useState(false); //Soit PARPRE ou POS\n\n  const [documentType, setDocumentType] = useState(\"\");\n  const history = useHistory();\n  useEffect(() => {\n    document.title = \"Création de PARPRE / POS\";\n    console.log(history.location);\n  });\n  const [servers, setServers] = useState([{\n    name: 'sw11203',\n    hprod: 'sw11213',\n    dev: \"sw11003\"\n  }, {\n    name: 'sw11203',\n    hprod: 'sw11213',\n    dev: \"sw11003\"\n  }, {\n    name: 'sw11203',\n    hprod: 'sw11213',\n    dev: \"sw11003\"\n  }]);\n\n  const saveServer = server => {\n    //console.log(\"Saving server \", server)\n    setServers([...servers, {\n      name: server\n    }]);\n  };\n\n  const classes = useStyles();\n\n  const saveStart = object => {\n    setStartActions(object);\n  };\n\n  const saveStop = object => {\n    //let newServers = []\n    //object.map(action=> newServers=[...newServers,{name : action.server}])\n    //console.log(\"all servers \",newServers)\n    setStopActions(object); //setServers(newServers)\n  };\n\n  const generateJson = () => {\n    console.log(\"name \", title);\n    const parpre = {\n      name: title,\n      auteur: \"Samba NDIAYE\",\n      date_de_creation: new Date().toLocaleString(),\n      Arret: StopActions,\n      Relance: StartActions\n    };\n    axios.post(`http://localhost:5000/api/PARPRE/create`, parpre).then(res => console.log(res));\n    console.log(JSON.stringify(parpre));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 5,\n        children: titleOpen ? /*#__PURE__*/_jsxDEV(TextField, {\n          placeholder: \"Changer le titre\",\n          onBlur: () => setTitleOpen(false),\n          margin: \"dense\",\n          onChange: e => setTitle(e.target.value),\n          autoFocus: true,\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            onClick: () => setTitleOpen(true),\n            children: [\"Nom : \", title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              onChange: () => setAutoCreate(!autoCreate)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 40\n            }, this),\n            checked: autoCreate,\n            label: \"Verification-Auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              onChange: () => setAutoRelance(!autoRelance)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 40\n            }, this),\n            checked: autoRelance,\n            label: \"Relance-Auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ARCard, {\n      name: \"Arr\\xEAt\",\n      type: \"stop\",\n      actions: StopActions,\n      SetActions: saveStop,\n      autoRelance: autoCreate,\n      AddServer: saveServer,\n      generateJson: generateJson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ARCard, {\n      name: \"Relance\",\n      type: \"start\",\n      actions: StartActions,\n      SetActions: saveStart,\n      AddServer: saveServer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(RightNav, {\n      ServerRow: servers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Create, \"knBOMFKL7F8eWN1hmTIIX2ybrRc=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["C:/Users/samba/Desktop/projet SFR/AR/client/src/Pages/Create.js"],"names":["FormControlLabel","FormGroup","Grid","makeStyles","Switch","TextField","Typography","axios","useEffect","useState","ARCard","RightNav","useHistory","drawerWidthRight","useStyles","theme","root","width","Create","titleOpen","setTitleOpen","title","setTitle","StopActions","setStopActions","StartActions","setStartActions","autoCreate","setAutoCreate","autoRelance","setAutoRelance","documentType","setDocumentType","history","document","console","log","location","servers","setServers","name","hprod","dev","saveServer","server","classes","saveStart","object","saveStop","generateJson","parpre","auteur","date_de_creation","Date","toLocaleString","Arret","Relance","post","then","res","JSON","stringify","e","target","value"],"mappings":"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","sourcesContent":["import { FormControlLabel, FormGroup, Grid, makeStyles, Switch, TextField, Typography } from \"@material-ui/core\"\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ARCard from \"../Components/ARCard\"\r\nimport RightNav from \"../Components/Creation/RightNav\";\r\nimport {useHistory} from 'react-router'\r\n\r\nconst drawerWidthRight = 260\r\n\r\nconst useStyles = makeStyles((theme) =>{\r\n    return{\r\n        root:{\r\n            width:`calc(100% - ${drawerWidthRight}px)`   \r\n        }\r\n\r\n}})\r\n\r\n\r\nconst Create = () => {\r\n\r\n    const [titleOpen, setTitleOpen] = useState(false)\r\n    //titre de la parpre ou de la POS\r\n    const [title, setTitle] = useState(\"APPXXXX_SSA\")\r\n    //les actions d'arrêt\r\n    const [StopActions, setStopActions] = useState([])\r\n    //les Actions de relance\r\n    const [StartActions, setStartActions] = useState([])\r\n    //creation automatique de la verification\r\n    const [autoCreate, setAutoCreate] = useState(false)\r\n    //Si on fait la relance automatiquement\r\n    const [autoRelance, setAutoRelance] = useState(false)\r\n    //Soit PARPRE ou POS\r\n    const [documentType, setDocumentType] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        document.title=\"Création de PARPRE / POS\"\r\n        console.log(history.location)\r\n    })\r\n\r\n    const [servers, setServers] = useState([\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" },\r\n        { name: 'sw11203', hprod: 'sw11213', dev: \"sw11003\" }\r\n    ])\r\n\r\n    const saveServer = (server) =>{\r\n       //console.log(\"Saving server \", server)\r\n        setServers([...servers,{name:server}])\r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    const saveStart = (object) =>{\r\n        setStartActions(object)\r\n\r\n    }\r\n\r\n    const saveStop = (object) =>{\r\n        \r\n        //let newServers = []\r\n\r\n        //object.map(action=> newServers=[...newServers,{name : action.server}])\r\n\r\n        //console.log(\"all servers \",newServers)\r\n\r\n        setStopActions(object)\r\n\r\n        //setServers(newServers)\r\n\r\n    }\r\n\r\n    const generateJson =  () => {\r\n        console.log(\"name \",title)\r\n        const parpre = {name : title ,auteur: \"Samba NDIAYE\", date_de_creation : new Date().toLocaleString(), Arret : StopActions, Relance:StartActions}\r\n\r\n        axios.post(`http://localhost:5000/api/PARPRE/create`, parpre)\r\n            .then(res => console.log(res))\r\n            \r\n        console.log(JSON.stringify(parpre))\r\n    }\r\n\r\n    return ( \r\n        \r\n\r\n        <div className={classes.root}>   \r\n            <Grid container>     \r\n                <Grid item md={5}>\r\n                { \r\n                    titleOpen ? \r\n                    (\r\n                        <TextField \r\n                        placeholder=\"Changer le titre\"\r\n                        onBlur={() => setTitleOpen(false)}\r\n                        margin=\"dense\"\r\n                        onChange={(e) => setTitle(e.target.value)}\r\n                        autoFocus\r\n                        value={title}\r\n                        >\r\n                            \r\n                        </TextField>\r\n                    ) \r\n                    : \r\n                    (\r\n                        <div>\r\n                            <Typography \r\n                            variant='h6'\r\n                            gutterBottom\r\n                            onClick={() => setTitleOpen(true)}\r\n                            >\r\n                                Nom : {title}\r\n\r\n                            </Typography>\r\n                        </div>\r\n                    )\r\n                }    \r\n                </Grid>   \r\n\r\n                <Grid item md={4}>\r\n                <FormGroup>\r\n                        <FormControlLabel\r\n                            control = {<Switch onChange={()=> setAutoCreate(!autoCreate)}/>}\r\n                            checked={autoCreate}\r\n                            label = \"Verification-Auto\"\r\n                        >\r\n                        \r\n\r\n                        </FormControlLabel>\r\n                        \r\n                    </FormGroup>\r\n\r\n                </Grid> \r\n\r\n                <Grid item md={3}>\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            control = {<Switch onChange={()=> setAutoRelance(!autoRelance)}/>}\r\n                            checked={autoRelance}\r\n                            label = \"Relance-Auto\"\r\n                        >\r\n                        \r\n\r\n                        </FormControlLabel>\r\n                        \r\n                    </FormGroup>\r\n                    \r\n                </Grid>  \r\n                \r\n            </Grid>\r\n            \r\n                <ARCard \r\n                    name=\"Arrêt\" \r\n                    type=\"stop\" \r\n                    actions={StopActions} \r\n                    SetActions={saveStop} \r\n                    autoRelance = {autoCreate}\r\n                    AddServer={saveServer}\r\n                    generateJson={generateJson}\r\n                      \r\n                />\r\n                <ARCard \r\n                    name=\"Relance\" \r\n                    type=\"start\"\r\n                    actions = {StartActions} \r\n                    SetActions = {saveStart} \r\n                    AddServer={saveServer} \r\n\r\n                />\r\n                <RightNav ServerRow={servers}/>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Create;"]},"metadata":{},"sourceType":"module"}