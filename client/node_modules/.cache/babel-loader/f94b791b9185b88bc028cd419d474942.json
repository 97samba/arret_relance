{"ast":null,"code":"const os = require('os');\n\nconst {\n  Writable\n} = require('stream');\n\nconst colors = require('chalk');\n\nconst isWin = os.platform() === 'win32';\nconst NPS_PREFIX = `${colors.hex('#87E752').bold('N')}${colors.blue.bold('PS')}${colors.hex('#87E752').bold('>')}`;\nconst logger = {\n  info: msg => console.log(`${NPS_PREFIX} ${colors.gray(msg)}`),\n  debug: msg => console.log(`${NPS_PREFIX} ${colors.gray(msg)}`),\n  ok: msg => console.log(`${NPS_PREFIX} ${colors.green(msg)}`),\n  warn: msg => console.log(`${NPS_PREFIX} ${colors.yellow(msg)}`),\n  error: msg => console.log(`${NPS_PREFIX} ${colors.red(msg)}`)\n};\n\nclass ShellStreamBuffer extends Writable {\n  constructor(EOI = 'EOI', options) {\n    super(options);\n    this.chunksArray = [];\n    this.EOI = Buffer.from(EOI); // END_OF_INVOCATION\n  }\n\n  _write(chunk, encoding, cb) {\n    // console.log(`${this.chunksArray.length} - ${chunk.toString()}`);\n    if (chunk.compare(this.EOI) === 0) {\n      cb();\n      return this.emit('EOI');\n    }\n\n    this.chunksArray.push(chunk);\n    return cb();\n  }\n\n  isEmpty() {\n    return this.chunksArray.length === 0;\n  }\n\n  getContents() {\n    return Buffer.concat(this.chunksArray);\n  }\n\n  getContentsAsString(encoding = 'utf8') {\n    return Buffer.concat(this.chunksArray).toString(encoding).replace(/\\0/g, '');\n  }\n\n}\n\nconst shellSafeWrite = (stdin, data) => new Promise(resolve => {\n  if (!stdin.write(data)) {\n    stdin.once('drain', resolve);\n  } else {\n    process.nextTick(resolve);\n  }\n});\n\nconst getType = obj => Object.prototype.toString.call(obj).slice(8, -1);\n\nconst isIncludesSpaces = val => /\\s/.test(val);\n\nconst isEnclosedWithQuotes = val => val.startsWith('\"') && val.endsWith('\"') || val.startsWith(\"'\") && val.endsWith(\"'\");\n\nconst isXML = val => val.includes('<') && val.includes('>');\n\nconst convertToPSParam = val => {\n  switch (getType(val)) {\n    case 'String':\n      return !isEnclosedWithQuotes(val) && (isIncludesSpaces(val) || isXML(val)) ? `\"${val}\"` : val;\n\n    case 'Number':\n      return val;\n\n    case 'Array':\n      return val;\n\n    case 'Object':\n      return `@${JSON.stringify(val).replace(/:/g, '=').replace(/,/g, ';')}`;\n\n    case 'Boolean':\n      return val ? '$True' : '$False';\n\n    case 'Date':\n      return val.toLocaleString();\n\n    case 'Undefined' || 'Null':\n      return val;\n    // param is switch\n\n    default:\n      return `\"${val}\"`;\n  }\n};\n\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\n\nconst convertToPSOption = (key, val) => {\n  if (typeof key !== 'string') {\n    throw new Error('PS option key must be string');\n  }\n\n  if (key.length > 6) {\n    key = capitalizeFirstLetter(key);\n  }\n\n  switch (getType(val)) {\n    case 'String':\n      return [`-${key}`, val];\n\n    case 'Boolean':\n      return !val ? [] : [`-${key}`];\n\n    default:\n      throw new Error('PS option val must be string or boolean');\n  }\n};\n\nconst CRITICAL_ERRORS = ['is not recognized as the name of a script file.'];\n\nconst isCriticalPSError = err => CRITICAL_ERRORS.some(cErr => err.includes(cErr));\n\nmodule.exports = {\n  isWin,\n  isCriticalPSError,\n  logger,\n  ShellStreamBuffer,\n  shellSafeWrite,\n  convertToPSParam,\n  convertToPSOption\n};","map":{"version":3,"sources":["C:/Users/samba/Desktop/projet SFR/AR/node_modules/node-powershell/lib/utils.js"],"names":["os","require","Writable","colors","isWin","platform","NPS_PREFIX","hex","bold","blue","logger","info","msg","console","log","gray","debug","ok","green","warn","yellow","error","red","ShellStreamBuffer","constructor","EOI","options","chunksArray","Buffer","from","_write","chunk","encoding","cb","compare","emit","push","isEmpty","length","getContents","concat","getContentsAsString","toString","replace","shellSafeWrite","stdin","data","Promise","resolve","write","once","process","nextTick","getType","obj","Object","prototype","call","slice","isIncludesSpaces","val","test","isEnclosedWithQuotes","startsWith","endsWith","isXML","includes","convertToPSParam","JSON","stringify","toLocaleString","capitalizeFirstLetter","string","charAt","toUpperCase","convertToPSOption","key","Error","CRITICAL_ERRORS","isCriticalPSError","err","some","cErr","module","exports"],"mappings":"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","sourcesContent":["const os = require('os');\nconst { Writable } = require('stream');\nconst colors = require('chalk');\n\nconst isWin = os.platform() === 'win32';\n\nconst NPS_PREFIX = `${colors.hex('#87E752').bold('N')}${colors.blue.bold('PS')}${colors.hex('#87E752').bold('>')}`;\nconst logger = {\n  info: msg => console.log(`${NPS_PREFIX} ${colors.gray(msg)}`),\n  debug: msg => console.log(`${NPS_PREFIX} ${colors.gray(msg)}`),\n  ok: msg => console.log(`${NPS_PREFIX} ${colors.green(msg)}`),\n  warn: msg => console.log(`${NPS_PREFIX} ${colors.yellow(msg)}`),\n  error: msg => console.log(`${NPS_PREFIX} ${colors.red(msg)}`),\n};\n\nclass ShellStreamBuffer extends Writable {\n  constructor(EOI = 'EOI', options) {\n    super(options);\n\n    this.chunksArray = [];\n    this.EOI = Buffer.from(EOI); // END_OF_INVOCATION\n  }\n  _write(chunk, encoding, cb) {\n    // console.log(`${this.chunksArray.length} - ${chunk.toString()}`);\n    if(chunk.compare(this.EOI) === 0) {\n      cb();\n      return this.emit('EOI');\n    }\n    this.chunksArray.push(chunk);\n    return cb();\n  }\n  isEmpty() {\n    return this.chunksArray.length === 0;\n  }\n  getContents() {\n    return Buffer.concat(this.chunksArray);\n  }\n  getContentsAsString(encoding = 'utf8') {\n    return Buffer.concat(this.chunksArray).toString(encoding).replace(/\\0/g, '');\n  }\n}\n\nconst shellSafeWrite = (stdin, data) => new Promise(resolve => {\n  if (!stdin.write(data)) {\n    stdin.once('drain', resolve);\n  } else {\n    process.nextTick(resolve);\n  }\n});\n\nconst getType = obj => Object.prototype.toString.call(obj).slice(8, -1);\nconst isIncludesSpaces = val => /\\s/.test(val);\nconst isEnclosedWithQuotes = val => (val.startsWith('\"') && val.endsWith('\"')) || (val.startsWith(\"'\") && val.endsWith(\"'\"));\nconst isXML = val => val.includes('<') && val.includes('>');\nconst convertToPSParam = val => {\n  switch (getType(val)) {\n    case 'String':\n      return !isEnclosedWithQuotes(val) && (isIncludesSpaces(val) || isXML(val)) ? `\"${val}\"` : val;\n    case 'Number':\n      return val;\n    case 'Array':\n      return val;\n    case 'Object':\n      return `@${JSON.stringify(val).replace(/:/g, '=').replace(/,/g, ';')}`;\n    case 'Boolean':\n      return val ? '$True' : '$False';\n    case 'Date':\n      return val.toLocaleString();\n    case 'Undefined' || 'Null':\n      return val; // param is switch\n    default:\n      return `\"${val}\"`;\n  }\n};\n\nconst capitalizeFirstLetter = string => string.charAt(0).toUpperCase() + string.slice(1);\nconst convertToPSOption = (key, val) => {\n  if(typeof key !== 'string') {\n    throw new Error('PS option key must be string');\n  }\n  if(key.length > 6) {\n    key = capitalizeFirstLetter(key);\n  }\n\n  switch (getType(val)) {\n    case 'String':\n      return [`-${key}`, val];\n    case 'Boolean':\n      return !val ? [] : [`-${key}`];\n    default:\n      throw new Error('PS option val must be string or boolean');\n  }\n};\n\nconst CRITICAL_ERRORS = [\n  'is not recognized as the name of a script file.',\n];\nconst isCriticalPSError = err => CRITICAL_ERRORS.some(cErr => err.includes(cErr));\n\nmodule.exports = {\n  isWin,\n  isCriticalPSError,\n  logger,\n  ShellStreamBuffer,\n  shellSafeWrite,\n  convertToPSParam,\n  convertToPSOption,\n};\n"]},"metadata":{},"sourceType":"script"}