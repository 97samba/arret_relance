{"ast":null,"code":"const {\n  EventEmitter\n} = require('events');\n\nconst {\n  spawn\n} = require('child_process');\n\nconst os = require('os');\n\nconst shortid = require('shortid');\n\nconst PSCommand = require('./PSCommand');\n\nconst {\n  isWin,\n  isCriticalPSError,\n  logger,\n  ShellStreamBuffer,\n  shellSafeWrite,\n  convertToPSOption\n} = require('./utils');\n\nconst {\n  PS_PROC_ERROR,\n  PS_ARG_MISS_ERROR,\n  PS_ARG_TYPE_ERROR,\n  PS_CMD_FAIL_ERROR\n} = require('./errors');\n\nclass Shell extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    this.pid = -1;\n    this.streams = [];\n    this.commands = [];\n    this.history = [];\n    this.hadErrors = false;\n    this.invocationStateInfo = 'NotStarted';\n    this.verbose = false;\n    let psProc = !isWin ? 'pwsh' : 'powershell';\n    let psOpts = ['-NoLogo', '-NoExit', '-Command', '-'];\n\n    if (options.pwsh) {\n      psProc = 'pwsh';\n    }\n\n    if (options.pwshPrev && !options.pwsh) {\n      psProc = 'pwsh-preview';\n    }\n\n    if (process.env.NPS) {\n      psProc = process.env.NPS;\n    }\n\n    if ('debugMsg' in options) {\n      logger.warn(`debugMsg will be deprecated soon. use verbose instead.\n   https://rannn505.gitbook.io/node-powershell/shell/initialize`);\n      this.verbose = options.debugMsg;\n    }\n\n    if (options.verbose) {\n      this.verbose = true;\n    } // Handle PS process options\n\n\n    Object.keys(options).filter(k => !['pwsh', 'pwshPrev', 'debugMsg', 'verbose', 'inputEncoding', 'outputEncoding'].includes(k)).forEach(k => {\n      psOpts = [...convertToPSOption(k, options[k]), ...psOpts];\n    });\n    const proc = spawn(`${psProc}${!isWin ? '' : '.exe'}`, psOpts, {\n      stdio: 'pipe'\n    });\n    this.pid = proc.pid; // make sure the PS process start successfully\n\n    if (!this.pid) {\n      this.emit('error', new PS_PROC_ERROR());\n    }\n\n    proc.once('error', () => {\n      this.emit('error', new PS_PROC_ERROR());\n    }); // set streams encoding\n\n    proc.stdin.setDefaultEncoding(options.inputEncoding || 'utf8');\n    proc.stdout.setEncoding(options.outputEncoding || 'utf8');\n    proc.stderr.setEncoding(options.outputEncoding || 'utf8'); // handle startup errors\n\n    const psErr = new ShellStreamBuffer();\n    proc.stderr.pipe(psErr);\n    proc.stdin.on('error', err => {\n      if (['ECONNRESET', 'EPIPE'].includes(err.code)) {\n        // handle epipe\n        setTimeout(() => {\n          if (psErr.isEmpty()) {\n            this.emit('error', err); // real epipe\n          }\n        });\n        return; // ignore here so proc.once('close') will handle error\n      }\n\n      this.emit('error', err); // fallback\n    });\n    proc.once('close', code => {\n      psErr.end();\n      this.emit('end', code);\n      this.verbose && logger.info(`PS process ${this.pid} exited with code ${code}`);\n\n      if (!psErr.isEmpty() && isCriticalPSError(psErr.getContents())) {\n        throw new PS_PROC_ERROR(psErr.getContentsAsString());\n      }\n    });\n    this.invoke = this.invoke.bind(this, proc);\n    this.stop = this.stop.bind(this, proc);\n    this.dispose = this.dispose.bind(this, proc);\n    this.streams = {\n      stdin: proc.stdin,\n      stdout: proc.stdout,\n      stderr: proc.stderr\n    };\n  }\n\n  addCommand(command = '', params = []) {\n    // PSCommand can throw - so wrapping all in Promise\n    return new Promise(resolve => {\n      if (!(command instanceof PSCommand)) {\n        command = new PSCommand(command);\n      }\n\n      this.commands.push(command);\n\n      if (params && params.length > 0) {\n        logger.warn(`params argument for addCommand method will be deprecated soon. use addParameter or addParameters instead.\n     https://rannn505.gitbook.io/node-powershell/shell/addCommand`);\n        return this.addParameters(params);\n      }\n\n      return resolve(this.commands);\n    });\n  }\n\n  addArgument(argument) {\n    return new Promise((resolve, reject) => {\n      if (this.commands.length === 0) {\n        return reject(new PS_ARG_MISS_ERROR('Commands array is empty. please add at least one command before you use addArgument()'));\n      }\n\n      let lastCommand = this.commands.pop();\n      lastCommand = lastCommand.addArgument(argument);\n      return resolve(this.addCommand(lastCommand));\n    });\n  }\n\n  addParameter(parameter) {\n    return new Promise((resolve, reject) => {\n      if (this.commands.length === 0) {\n        return reject(new PS_ARG_MISS_ERROR('Commands array is empty. please add at least one command before you use addParameter()'));\n      }\n\n      let lastCommand = this.commands.pop();\n      lastCommand = lastCommand.addParameter(parameter);\n      return resolve(this.addCommand(lastCommand));\n    });\n  }\n\n  addParameters(parameters = []) {\n    return new Promise((resolve, reject) => {\n      if (!Array.isArray(parameters)) {\n        return reject(new PS_ARG_TYPE_ERROR('Parameters must be an array'));\n      }\n\n      if (parameters.length === 0) {\n        return reject(new PS_ARG_MISS_ERROR('Parameters are missing'));\n      }\n\n      return resolve(Promise.all(parameters.map(this.addParameter, this)).then(() => this.commands));\n    });\n  }\n\n  clear() {\n    this.commands = [];\n    return Promise.resolve(this.commands);\n  }\n\n  invoke() {\n    this.invocationStateInfo = 'NotStarted'; // https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.psinvocationstate?view=powershellsdk-1.1.0\n\n    const EOI = `EOI_${shortid.generate()}`;\n    const invocationCommands = this.commands.map(psCommand => psCommand.command).join('; ');\n    let invocationHadErrors = false;\n    const psOut = new ShellStreamBuffer(EOI);\n    this.streams.stdout.pipe(psOut);\n    this.streams.stderr.pipe(psOut);\n    this.streams.stderr.once('data', () => {\n      invocationHadErrors = true;\n    });\n    shellSafeWrite(this.streams.stdin, invocationCommands).then(() => shellSafeWrite(this.streams.stdin, os.EOL)).then(() => {\n      this.invocationStateInfo = 'Running';\n\n      if (this.verbose) {\n        logger.info('Command invoke started');\n        logger.debug(invocationCommands);\n      }\n    }) // .then(() => shellSafeWrite(this.streams.stdin, `[Console]::Error.Write(\"${EOI}\")`))\n    // .then(() => shellSafeWrite(this.streams.stdin, os.EOL))\n    .then(() => shellSafeWrite(this.streams.stdin, `[Console]::Out.Write(\"${EOI}\")`)).then(() => shellSafeWrite(this.streams.stdin, os.EOL));\n    return new Promise((resolve, reject) => {\n      psOut.once('EOI', () => {\n        this.streams.stdout.unpipe(psOut);\n        this.streams.stderr.unpipe(psOut);\n        psOut.end();\n        const output = psOut.getContentsAsString();\n        this.history.push({\n          commands: invocationCommands,\n          hadErrors: invocationHadErrors,\n          results: psOut.getContents()\n        });\n        this.commands = [];\n\n        if (invocationHadErrors) {\n          this.invocationStateInfo = this.invocationStateInfo !== 'Stopping' ? 'Failed' : 'Stopped';\n          this.verbose && logger.error('Command invoke failed');\n          this.emit('err', new PS_CMD_FAIL_ERROR(output));\n          return reject(new PS_CMD_FAIL_ERROR(output));\n        }\n\n        this.invocationStateInfo = this.invocationStateInfo !== 'Stopping' ? 'Completed' : 'Stopped';\n        this.verbose && logger.ok('Command invoke completed');\n        this.emit('output', output);\n        return resolve(output);\n      });\n    });\n  }\n\n  stop(proc) {\n    if (this.invocationStateInfo === 'Running') {\n      proc.kill(os.constants.signals.SIGABRT);\n      this.invocationStateInfo = 'Stopping';\n    }\n\n    return Promise.resolve();\n  }\n\n  dispose() {\n    return shellSafeWrite(this.streams.stdin, 'exit').then(() => shellSafeWrite(this.streams.stdin, os.EOL)).then(() => {\n      this.streams.stdin.end();\n\n      this.dispose = () => {};\n    });\n  }\n\n}\n\nmodule.exports = Shell;","map":{"version":3,"sources":["C:/Users/samba/Desktop/projet SFR/AR/node_modules/node-powershell/lib/Shell.js"],"names":["EventEmitter","require","spawn","os","shortid","PSCommand","isWin","isCriticalPSError","logger","ShellStreamBuffer","shellSafeWrite","convertToPSOption","PS_PROC_ERROR","PS_ARG_MISS_ERROR","PS_ARG_TYPE_ERROR","PS_CMD_FAIL_ERROR","Shell","constructor","options","pid","streams","commands","history","hadErrors","invocationStateInfo","verbose","psProc","psOpts","pwsh","pwshPrev","process","env","NPS","warn","debugMsg","Object","keys","filter","k","includes","forEach","proc","stdio","emit","once","stdin","setDefaultEncoding","inputEncoding","stdout","setEncoding","outputEncoding","stderr","psErr","pipe","on","err","code","setTimeout","isEmpty","end","info","getContents","getContentsAsString","invoke","bind","stop","dispose","addCommand","command","params","Promise","resolve","push","length","addParameters","addArgument","argument","reject","lastCommand","pop","addParameter","parameter","parameters","Array","isArray","all","map","then","clear","EOI","generate","invocationCommands","psCommand","join","invocationHadErrors","psOut","EOL","debug","unpipe","output","results","error","ok","kill","constants","signals","SIGABRT","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,OAAO,CAAC,QAAD,CAAhC;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAYD,OAAO,CAAC,eAAD,CAAzB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAD,CAAvB;;AAEA,MAAMI,SAAS,GAAGJ,OAAO,CAAC,aAAD,CAAzB;;AAEA,MAAM;AACJK,EAAAA,KADI;AACGC,EAAAA,iBADH;AACsBC,EAAAA,MADtB;AAEJC,EAAAA,iBAFI;AAEeC,EAAAA,cAFf;AAGJC,EAAAA;AAHI,IAIFV,OAAO,CAAC,SAAD,CAJX;;AAMA,MAAM;AACJW,EAAAA,aADI;AAEJC,EAAAA,iBAFI;AAGJC,EAAAA,iBAHI;AAIJC,EAAAA;AAJI,IAKFd,OAAO,CAAC,UAAD,CALX;;AAOA,MAAMe,KAAN,SAAoBhB,YAApB,CAAiC;AAC/BiB,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB;AAEA,SAAKC,GAAL,GAAW,CAAC,CAAZ;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,QAAL,GAAgB,EAAhB;AACA,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,mBAAL,GAA2B,YAA3B;AACA,SAAKC,OAAL,GAAe,KAAf;AAEA,QAAIC,MAAM,GAAG,CAACpB,KAAD,GAAS,MAAT,GAAkB,YAA/B;AACA,QAAIqB,MAAM,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,UAAvB,EAAmC,GAAnC,CAAb;;AAEA,QAAGT,OAAO,CAACU,IAAX,EAAiB;AACfF,MAAAA,MAAM,GAAG,MAAT;AACD;;AAED,QAAGR,OAAO,CAACW,QAAR,IAAoB,CAACX,OAAO,CAACU,IAAhC,EAAsC;AACpCF,MAAAA,MAAM,GAAG,cAAT;AACD;;AAED,QAAGI,OAAO,CAACC,GAAR,CAAYC,GAAf,EAAoB;AAClBN,MAAAA,MAAM,GAAGI,OAAO,CAACC,GAAR,CAAYC,GAArB;AACD;;AAED,QAAG,cAAcd,OAAjB,EAA0B;AACxBV,MAAAA,MAAM,CAACyB,IAAP,CAAa;AACnB,gEADM;AAEA,WAAKR,OAAL,GAAeP,OAAO,CAACgB,QAAvB;AACD;;AAED,QAAGhB,OAAO,CAACO,OAAX,EAAoB;AAClB,WAAKA,OAAL,GAAe,IAAf;AACD,KAlCuB,CAoCxB;;;AACAU,IAAAA,MAAM,CAACC,IAAP,CAAYlB,OAAZ,EACGmB,MADH,CACUC,CAAC,IAAI,CAAC,CAAC,MAAD,EAAS,UAAT,EAAqB,UAArB,EAAiC,SAAjC,EAA4C,eAA5C,EAA6D,gBAA7D,EAA+EC,QAA/E,CAAwFD,CAAxF,CADhB,EAEGE,OAFH,CAEWF,CAAC,IAAI;AACZX,MAAAA,MAAM,GAAG,CAAC,GAAGhB,iBAAiB,CAAC2B,CAAD,EAAIpB,OAAO,CAACoB,CAAD,CAAX,CAArB,EAAsC,GAAGX,MAAzC,CAAT;AACD,KAJH;AAOA,UAAMc,IAAI,GAAGvC,KAAK,CAAE,GAAEwB,MAAO,GAAE,CAACpB,KAAD,GAAS,EAAT,GAAc,MAAO,EAAlC,EAAqCqB,MAArC,EAA6C;AAAEe,MAAAA,KAAK,EAAE;AAAT,KAA7C,CAAlB;AACA,SAAKvB,GAAL,GAAWsB,IAAI,CAACtB,GAAhB,CA7CwB,CA+CxB;;AACA,QAAG,CAAC,KAAKA,GAAT,EAAc;AACZ,WAAKwB,IAAL,CAAU,OAAV,EAAmB,IAAI/B,aAAJ,EAAnB;AACD;;AACD6B,IAAAA,IAAI,CAACG,IAAL,CAAU,OAAV,EAAmB,MAAM;AACvB,WAAKD,IAAL,CAAU,OAAV,EAAmB,IAAI/B,aAAJ,EAAnB;AACD,KAFD,EAnDwB,CAuDxB;;AACA6B,IAAAA,IAAI,CAACI,KAAL,CAAWC,kBAAX,CAA8B5B,OAAO,CAAC6B,aAAR,IAAyB,MAAvD;AACAN,IAAAA,IAAI,CAACO,MAAL,CAAYC,WAAZ,CAAwB/B,OAAO,CAACgC,cAAR,IAA0B,MAAlD;AACAT,IAAAA,IAAI,CAACU,MAAL,CAAYF,WAAZ,CAAwB/B,OAAO,CAACgC,cAAR,IAA0B,MAAlD,EA1DwB,CA4DxB;;AACA,UAAME,KAAK,GAAG,IAAI3C,iBAAJ,EAAd;AACAgC,IAAAA,IAAI,CAACU,MAAL,CAAYE,IAAZ,CAAiBD,KAAjB;AAEAX,IAAAA,IAAI,CAACI,KAAL,CAAWS,EAAX,CAAc,OAAd,EAAuBC,GAAG,IAAI;AAC5B,UAAI,CAAC,YAAD,EAAe,OAAf,EAAwBhB,QAAxB,CAAiCgB,GAAG,CAACC,IAArC,CAAJ,EAAgD;AAC9C;AACAC,QAAAA,UAAU,CAAC,MAAM;AACf,cAAGL,KAAK,CAACM,OAAN,EAAH,EAAoB;AAClB,iBAAKf,IAAL,CAAU,OAAV,EAAmBY,GAAnB,EADkB,CACO;AAC1B;AACF,SAJS,CAAV;AAKA,eAP8C,CAOtC;AACT;;AACD,WAAKZ,IAAL,CAAU,OAAV,EAAmBY,GAAnB,EAV4B,CAUH;AAC1B,KAXD;AAaAd,IAAAA,IAAI,CAACG,IAAL,CAAU,OAAV,EAAmBY,IAAI,IAAI;AACzBJ,MAAAA,KAAK,CAACO,GAAN;AACA,WAAKhB,IAAL,CAAU,KAAV,EAAiBa,IAAjB;AACA,WAAK/B,OAAL,IAAgBjB,MAAM,CAACoD,IAAP,CAAa,cAAa,KAAKzC,GAAI,qBAAoBqC,IAAK,EAA5D,CAAhB;;AAEA,UAAG,CAACJ,KAAK,CAACM,OAAN,EAAD,IAAoBnD,iBAAiB,CAAC6C,KAAK,CAACS,WAAN,EAAD,CAAxC,EAA+D;AAC7D,cAAM,IAAIjD,aAAJ,CAAkBwC,KAAK,CAACU,mBAAN,EAAlB,CAAN;AACD;AACF,KARD;AAUA,SAAKC,MAAL,GAAc,KAAKA,MAAL,CAAYC,IAAZ,CAAiB,IAAjB,EAAuBvB,IAAvB,CAAd;AACA,SAAKwB,IAAL,GAAY,KAAKA,IAAL,CAAUD,IAAV,CAAe,IAAf,EAAqBvB,IAArB,CAAZ;AACA,SAAKyB,OAAL,GAAe,KAAKA,OAAL,CAAaF,IAAb,CAAkB,IAAlB,EAAwBvB,IAAxB,CAAf;AAEA,SAAKrB,OAAL,GAAe;AACbyB,MAAAA,KAAK,EAAEJ,IAAI,CAACI,KADC;AAEbG,MAAAA,MAAM,EAAEP,IAAI,CAACO,MAFA;AAGbG,MAAAA,MAAM,EAAEV,IAAI,CAACU;AAHA,KAAf;AAKD;;AACDgB,EAAAA,UAAU,CAACC,OAAO,GAAG,EAAX,EAAeC,MAAM,GAAG,EAAxB,EAA4B;AACpC;AACA,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,UAAG,EAAEH,OAAO,YAAY/D,SAArB,CAAH,EAAoC;AAClC+D,QAAAA,OAAO,GAAG,IAAI/D,SAAJ,CAAc+D,OAAd,CAAV;AACD;;AAED,WAAK/C,QAAL,CAAcmD,IAAd,CAAmBJ,OAAnB;;AAEA,UAAGC,MAAM,IAAIA,MAAM,CAACI,MAAP,GAAgB,CAA7B,EAAgC;AAC9BjE,QAAAA,MAAM,CAACyB,IAAP,CAAa;AACrB,kEADQ;AAEA,eAAO,KAAKyC,aAAL,CAAmBL,MAAnB,CAAP;AACD;;AAED,aAAOE,OAAO,CAAC,KAAKlD,QAAN,CAAd;AACD,KAdM,CAAP;AAeD;;AACDsD,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,WAAO,IAAIN,OAAJ,CAAY,CAACC,OAAD,EAAUM,MAAV,KAAqB;AACtC,UAAG,KAAKxD,QAAL,CAAcoD,MAAd,KAAyB,CAA5B,EAA+B;AAC7B,eAAOI,MAAM,CAAC,IAAIhE,iBAAJ,CAAsB,uFAAtB,CAAD,CAAb;AACD;;AACD,UAAIiE,WAAW,GAAG,KAAKzD,QAAL,CAAc0D,GAAd,EAAlB;AACAD,MAAAA,WAAW,GAAGA,WAAW,CAACH,WAAZ,CAAwBC,QAAxB,CAAd;AACA,aAAOL,OAAO,CAAC,KAAKJ,UAAL,CAAgBW,WAAhB,CAAD,CAAd;AACD,KAPM,CAAP;AAQD;;AACDE,EAAAA,YAAY,CAACC,SAAD,EAAY;AACtB,WAAO,IAAIX,OAAJ,CAAY,CAACC,OAAD,EAAUM,MAAV,KAAqB;AACtC,UAAG,KAAKxD,QAAL,CAAcoD,MAAd,KAAyB,CAA5B,EAA+B;AAC7B,eAAOI,MAAM,CAAC,IAAIhE,iBAAJ,CAAsB,wFAAtB,CAAD,CAAb;AACD;;AACD,UAAIiE,WAAW,GAAG,KAAKzD,QAAL,CAAc0D,GAAd,EAAlB;AACAD,MAAAA,WAAW,GAAGA,WAAW,CAACE,YAAZ,CAAyBC,SAAzB,CAAd;AACA,aAAOV,OAAO,CAAC,KAAKJ,UAAL,CAAgBW,WAAhB,CAAD,CAAd;AACD,KAPM,CAAP;AAQD;;AACDJ,EAAAA,aAAa,CAACQ,UAAU,GAAG,EAAd,EAAkB;AAC7B,WAAO,IAAIZ,OAAJ,CAAY,CAACC,OAAD,EAAUM,MAAV,KAAqB;AACtC,UAAG,CAACM,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC7B,eAAOL,MAAM,CAAC,IAAI/D,iBAAJ,CAAsB,6BAAtB,CAAD,CAAb;AACD;;AACD,UAAGoE,UAAU,CAACT,MAAX,KAAsB,CAAzB,EAA4B;AAC1B,eAAOI,MAAM,CAAC,IAAIhE,iBAAJ,CAAsB,wBAAtB,CAAD,CAAb;AACD;;AAED,aAAO0D,OAAO,CAACD,OAAO,CAACe,GAAR,CAAYH,UAAU,CAACI,GAAX,CAAe,KAAKN,YAApB,EAAkC,IAAlC,CAAZ,EACZO,IADY,CACP,MAAM,KAAKlE,QADJ,CAAD,CAAd;AAED,KAVM,CAAP;AAWD;;AACDmE,EAAAA,KAAK,GAAG;AACN,SAAKnE,QAAL,GAAgB,EAAhB;AACA,WAAOiD,OAAO,CAACC,OAAR,CAAgB,KAAKlD,QAArB,CAAP;AACD;;AACD0C,EAAAA,MAAM,GAAG;AACP,SAAKvC,mBAAL,GAA2B,YAA3B,CADO,CACkC;;AACzC,UAAMiE,GAAG,GAAI,OAAMrF,OAAO,CAACsF,QAAR,EAAmB,EAAtC;AACA,UAAMC,kBAAkB,GAAG,KAAKtE,QAAL,CAAciE,GAAd,CAAkBM,SAAS,IAAIA,SAAS,CAACxB,OAAzC,EAAkDyB,IAAlD,CAAuD,IAAvD,CAA3B;AACA,QAAIC,mBAAmB,GAAG,KAA1B;AAEA,UAAMC,KAAK,GAAG,IAAItF,iBAAJ,CAAsBgF,GAAtB,CAAd;AACA,SAAKrE,OAAL,CAAa4B,MAAb,CAAoBK,IAApB,CAAyB0C,KAAzB;AACA,SAAK3E,OAAL,CAAa+B,MAAb,CAAoBE,IAApB,CAAyB0C,KAAzB;AAEA,SAAK3E,OAAL,CAAa+B,MAAb,CAAoBP,IAApB,CAAyB,MAAzB,EAAiC,MAAM;AACrCkD,MAAAA,mBAAmB,GAAG,IAAtB;AACD,KAFD;AAIApF,IAAAA,cAAc,CAAC,KAAKU,OAAL,CAAayB,KAAd,EAAqB8C,kBAArB,CAAd,CACGJ,IADH,CACQ,MAAM7E,cAAc,CAAC,KAAKU,OAAL,CAAayB,KAAd,EAAqB1C,EAAE,CAAC6F,GAAxB,CAD5B,EAEGT,IAFH,CAEQ,MAAM;AACV,WAAK/D,mBAAL,GAA2B,SAA3B;;AACA,UAAG,KAAKC,OAAR,EAAiB;AACfjB,QAAAA,MAAM,CAACoD,IAAP,CAAY,wBAAZ;AACApD,QAAAA,MAAM,CAACyF,KAAP,CAAaN,kBAAb;AACD;AACF,KARH,EASE;AACA;AAVF,KAWGJ,IAXH,CAWQ,MAAM7E,cAAc,CAAC,KAAKU,OAAL,CAAayB,KAAd,EAAsB,yBAAwB4C,GAAI,IAAlD,CAX5B,EAYGF,IAZH,CAYQ,MAAM7E,cAAc,CAAC,KAAKU,OAAL,CAAayB,KAAd,EAAqB1C,EAAE,CAAC6F,GAAxB,CAZ5B;AAcA,WAAO,IAAI1B,OAAJ,CAAY,CAACC,OAAD,EAAUM,MAAV,KAAqB;AACtCkB,MAAAA,KAAK,CAACnD,IAAN,CAAW,KAAX,EAAkB,MAAM;AACtB,aAAKxB,OAAL,CAAa4B,MAAb,CAAoBkD,MAApB,CAA2BH,KAA3B;AACA,aAAK3E,OAAL,CAAa+B,MAAb,CAAoB+C,MAApB,CAA2BH,KAA3B;AACAA,QAAAA,KAAK,CAACpC,GAAN;AAEA,cAAMwC,MAAM,GAAGJ,KAAK,CAACjC,mBAAN,EAAf;AACA,aAAKxC,OAAL,CAAakD,IAAb,CAAkB;AAChBnD,UAAAA,QAAQ,EAAEsE,kBADM;AAEhBpE,UAAAA,SAAS,EAAEuE,mBAFK;AAGhBM,UAAAA,OAAO,EAAEL,KAAK,CAAClC,WAAN;AAHO,SAAlB;AAKA,aAAKxC,QAAL,GAAgB,EAAhB;;AAEA,YAAGyE,mBAAH,EAAwB;AACtB,eAAKtE,mBAAL,GAA2B,KAAKA,mBAAL,KAA6B,UAA7B,GAA0C,QAA1C,GAAqD,SAAhF;AACA,eAAKC,OAAL,IAAgBjB,MAAM,CAAC6F,KAAP,CAAa,uBAAb,CAAhB;AACA,eAAK1D,IAAL,CAAU,KAAV,EAAiB,IAAI5B,iBAAJ,CAAsBoF,MAAtB,CAAjB;AACA,iBAAOtB,MAAM,CAAC,IAAI9D,iBAAJ,CAAsBoF,MAAtB,CAAD,CAAb;AACD;;AACD,aAAK3E,mBAAL,GAA2B,KAAKA,mBAAL,KAA6B,UAA7B,GAA0C,WAA1C,GAAwD,SAAnF;AACA,aAAKC,OAAL,IAAgBjB,MAAM,CAAC8F,EAAP,CAAU,0BAAV,CAAhB;AACA,aAAK3D,IAAL,CAAU,QAAV,EAAoBwD,MAApB;AACA,eAAO5B,OAAO,CAAC4B,MAAD,CAAd;AACD,OAvBD;AAwBD,KAzBM,CAAP;AA0BD;;AACDlC,EAAAA,IAAI,CAACxB,IAAD,EAAO;AACT,QAAG,KAAKjB,mBAAL,KAA6B,SAAhC,EAA2C;AACzCiB,MAAAA,IAAI,CAAC8D,IAAL,CAAUpG,EAAE,CAACqG,SAAH,CAAaC,OAAb,CAAqBC,OAA/B;AACA,WAAKlF,mBAAL,GAA2B,UAA3B;AACD;;AACD,WAAO8C,OAAO,CAACC,OAAR,EAAP;AACD;;AACDL,EAAAA,OAAO,GAAG;AACR,WAAOxD,cAAc,CAAC,KAAKU,OAAL,CAAayB,KAAd,EAAqB,MAArB,CAAd,CACJ0C,IADI,CACC,MAAM7E,cAAc,CAAC,KAAKU,OAAL,CAAayB,KAAd,EAAqB1C,EAAE,CAAC6F,GAAxB,CADrB,EAEJT,IAFI,CAEC,MAAM;AACV,WAAKnE,OAAL,CAAayB,KAAb,CAAmBc,GAAnB;;AACA,WAAKO,OAAL,GAAe,MAAM,CAAE,CAAvB;AACD,KALI,CAAP;AAMD;;AA9N8B;;AAiOjCyC,MAAM,CAACC,OAAP,GAAiB5F,KAAjB","sourcesContent":["const { EventEmitter } = require('events');\nconst { spawn } = require('child_process');\nconst os = require('os');\nconst shortid = require('shortid');\n\nconst PSCommand = require('./PSCommand');\n\nconst {\n  isWin, isCriticalPSError, logger,\n  ShellStreamBuffer, shellSafeWrite,\n  convertToPSOption,\n} = require('./utils');\n\nconst {\n  PS_PROC_ERROR,\n  PS_ARG_MISS_ERROR,\n  PS_ARG_TYPE_ERROR,\n  PS_CMD_FAIL_ERROR,\n} = require('./errors');\n\nclass Shell extends EventEmitter {\n  constructor(options = {}) {\n    super();\n\n    this.pid = -1;\n    this.streams = [];\n    this.commands = [];\n    this.history = [];\n    this.hadErrors = false;\n    this.invocationStateInfo = 'NotStarted';\n    this.verbose = false;\n\n    let psProc = !isWin ? 'pwsh' : 'powershell';\n    let psOpts = ['-NoLogo', '-NoExit', '-Command', '-'];\n\n    if(options.pwsh) {\n      psProc = 'pwsh';\n    }\n\n    if(options.pwshPrev && !options.pwsh) {\n      psProc = 'pwsh-preview';\n    }\n\n    if(process.env.NPS) {\n      psProc = process.env.NPS;\n    }\n\n    if('debugMsg' in options) {\n      logger.warn(`debugMsg will be deprecated soon. use verbose instead.\n   https://rannn505.gitbook.io/node-powershell/shell/initialize`);\n      this.verbose = options.debugMsg;\n    }\n\n    if(options.verbose) {\n      this.verbose = true;\n    }\n\n    // Handle PS process options\n    Object.keys(options)\n      .filter(k => !['pwsh', 'pwshPrev', 'debugMsg', 'verbose', 'inputEncoding', 'outputEncoding'].includes(k))\n      .forEach(k => {\n        psOpts = [...convertToPSOption(k, options[k]), ...psOpts];\n      });\n\n\n    const proc = spawn(`${psProc}${!isWin ? '' : '.exe'}`, psOpts, { stdio: 'pipe' });\n    this.pid = proc.pid;\n\n    // make sure the PS process start successfully\n    if(!this.pid) {\n      this.emit('error', new PS_PROC_ERROR());\n    }\n    proc.once('error', () => {\n      this.emit('error', new PS_PROC_ERROR());\n    });\n\n    // set streams encoding\n    proc.stdin.setDefaultEncoding(options.inputEncoding || 'utf8');\n    proc.stdout.setEncoding(options.outputEncoding || 'utf8');\n    proc.stderr.setEncoding(options.outputEncoding || 'utf8');\n\n    // handle startup errors\n    const psErr = new ShellStreamBuffer();\n    proc.stderr.pipe(psErr);\n\n    proc.stdin.on('error', err => {\n      if (['ECONNRESET', 'EPIPE'].includes(err.code)) {\n        // handle epipe\n        setTimeout(() => {\n          if(psErr.isEmpty()) {\n            this.emit('error', err); // real epipe\n          }\n        });\n        return; // ignore here so proc.once('close') will handle error\n      }\n      this.emit('error', err); // fallback\n    });\n\n    proc.once('close', code => {\n      psErr.end();\n      this.emit('end', code);\n      this.verbose && logger.info(`PS process ${this.pid} exited with code ${code}`);\n\n      if(!psErr.isEmpty() && isCriticalPSError(psErr.getContents())) {\n        throw new PS_PROC_ERROR(psErr.getContentsAsString());\n      }\n    });\n\n    this.invoke = this.invoke.bind(this, proc);\n    this.stop = this.stop.bind(this, proc);\n    this.dispose = this.dispose.bind(this, proc);\n\n    this.streams = {\n      stdin: proc.stdin,\n      stdout: proc.stdout,\n      stderr: proc.stderr,\n    };\n  }\n  addCommand(command = '', params = []) {\n    // PSCommand can throw - so wrapping all in Promise\n    return new Promise((resolve) => {\n      if(!(command instanceof PSCommand)) {\n        command = new PSCommand(command);\n      }\n\n      this.commands.push(command);\n\n      if(params && params.length > 0) {\n        logger.warn(`params argument for addCommand method will be deprecated soon. use addParameter or addParameters instead.\n     https://rannn505.gitbook.io/node-powershell/shell/addCommand`);\n        return this.addParameters(params);\n      }\n\n      return resolve(this.commands);\n    });\n  }\n  addArgument(argument) {\n    return new Promise((resolve, reject) => {\n      if(this.commands.length === 0) {\n        return reject(new PS_ARG_MISS_ERROR('Commands array is empty. please add at least one command before you use addArgument()'));\n      }\n      let lastCommand = this.commands.pop();\n      lastCommand = lastCommand.addArgument(argument);\n      return resolve(this.addCommand(lastCommand));\n    });\n  }\n  addParameter(parameter) {\n    return new Promise((resolve, reject) => {\n      if(this.commands.length === 0) {\n        return reject(new PS_ARG_MISS_ERROR('Commands array is empty. please add at least one command before you use addParameter()'));\n      }\n      let lastCommand = this.commands.pop();\n      lastCommand = lastCommand.addParameter(parameter);\n      return resolve(this.addCommand(lastCommand));\n    });\n  }\n  addParameters(parameters = []) {\n    return new Promise((resolve, reject) => {\n      if(!Array.isArray(parameters)) {\n        return reject(new PS_ARG_TYPE_ERROR('Parameters must be an array'));\n      }\n      if(parameters.length === 0) {\n        return reject(new PS_ARG_MISS_ERROR('Parameters are missing'));\n      }\n\n      return resolve(Promise.all(parameters.map(this.addParameter, this))\n        .then(() => this.commands));\n    });\n  }\n  clear() {\n    this.commands = [];\n    return Promise.resolve(this.commands);\n  }\n  invoke() {\n    this.invocationStateInfo = 'NotStarted'; // https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.psinvocationstate?view=powershellsdk-1.1.0\n    const EOI = `EOI_${shortid.generate()}`;\n    const invocationCommands = this.commands.map(psCommand => psCommand.command).join('; ');\n    let invocationHadErrors = false;\n\n    const psOut = new ShellStreamBuffer(EOI);\n    this.streams.stdout.pipe(psOut);\n    this.streams.stderr.pipe(psOut);\n\n    this.streams.stderr.once('data', () => {\n      invocationHadErrors = true;\n    });\n\n    shellSafeWrite(this.streams.stdin, invocationCommands)\n      .then(() => shellSafeWrite(this.streams.stdin, os.EOL))\n      .then(() => {\n        this.invocationStateInfo = 'Running';\n        if(this.verbose) {\n          logger.info('Command invoke started');\n          logger.debug(invocationCommands);\n        }\n      })\n      // .then(() => shellSafeWrite(this.streams.stdin, `[Console]::Error.Write(\"${EOI}\")`))\n      // .then(() => shellSafeWrite(this.streams.stdin, os.EOL))\n      .then(() => shellSafeWrite(this.streams.stdin, `[Console]::Out.Write(\"${EOI}\")`))\n      .then(() => shellSafeWrite(this.streams.stdin, os.EOL));\n\n    return new Promise((resolve, reject) => {\n      psOut.once('EOI', () => {\n        this.streams.stdout.unpipe(psOut);\n        this.streams.stderr.unpipe(psOut);\n        psOut.end();\n\n        const output = psOut.getContentsAsString();\n        this.history.push({\n          commands: invocationCommands,\n          hadErrors: invocationHadErrors,\n          results: psOut.getContents(),\n        });\n        this.commands = [];\n\n        if(invocationHadErrors) {\n          this.invocationStateInfo = this.invocationStateInfo !== 'Stopping' ? 'Failed' : 'Stopped';\n          this.verbose && logger.error('Command invoke failed');\n          this.emit('err', new PS_CMD_FAIL_ERROR(output));\n          return reject(new PS_CMD_FAIL_ERROR(output));\n        }\n        this.invocationStateInfo = this.invocationStateInfo !== 'Stopping' ? 'Completed' : 'Stopped';\n        this.verbose && logger.ok('Command invoke completed');\n        this.emit('output', output);\n        return resolve(output);\n      });\n    });\n  }\n  stop(proc) {\n    if(this.invocationStateInfo === 'Running') {\n      proc.kill(os.constants.signals.SIGABRT);\n      this.invocationStateInfo = 'Stopping';\n    }\n    return Promise.resolve();\n  }\n  dispose() {\n    return shellSafeWrite(this.streams.stdin, 'exit')\n      .then(() => shellSafeWrite(this.streams.stdin, os.EOL))\n      .then(() => {\n        this.streams.stdin.end();\n        this.dispose = () => {};\n      });\n  }\n}\n\nmodule.exports = Shell;\n"]},"metadata":{},"sourceType":"script"}