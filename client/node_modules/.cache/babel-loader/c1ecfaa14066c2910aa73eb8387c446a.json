{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samba\\\\Desktop\\\\projetSFR\\\\AR\\\\client\\\\src\\\\Components\\\\Actions\\\\Database.js\",\n    _s = $RefreshSig$();\n\nimport { Avatar, Box, FormControl, Grid, IconButton, InputLabel, Menu, MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\";\nimport { makeStyles } from '@material-ui/core';\nimport { Delete, FileCopy, MoreVert, Storage } from \"@material-ui/icons\";\nimport { useContext, useState, useEffect } from \"react\";\nimport ActionContext from \"../../Context/ActionContext\";\nimport OptionMenu from \"../Creation/OptionMenu\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: '#F6F6FB',\n    padding: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  fields: {\n    width: \"100%\"\n  },\n  smallAvatar: {\n    width: theme.spacing(2.5),\n    height: theme.spacing(2.5)\n  }\n}));\n\nconst Database = ({\n  index,\n  type,\n  initialSTate\n}) => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    deleteAction,\n    duplicateAction,\n    saveData,\n    AddServer\n  } = useContext(ActionContext);\n  const [state, setState] = useState({\n    initialSTate\n  });\n  const [status, setStatus] = useState(type);\n  const [databaseType, setDatabaseType] = useState(\"MSSQL\");\n  const [OS, SetOS] = useState(\"\");\n  const [options, setOptions] = useState({\n    block: true,\n    environnements: {\n      prod: true,\n      hprod: true,\n      inte: true,\n      dev: true\n    }\n  });\n  useEffect(() => {\n    setState(initialSTate);\n\n    if (initialSTate.action) {\n      setStatus(initialSTate.action.toLowerCase());\n    }\n\n    initialSTate.databaseType !== undefined ? setDatabaseType(initialSTate.databaseType.toUpperCase()) : setDatabaseType(\"MSSQL\");\n  }, []);\n\n  const saveInformations = () => {\n    if (state.name === undefined || state.server === undefined) {\n      return;\n    }\n\n    let result;\n\n    if (status === \"status\") {\n      type === \"stop\" ? result = \"stopped\" : result = \"running\";\n    }\n\n    saveData({\n      index: index,\n      type: \"database\",\n      server: state.server,\n      name: state.name,\n      action: status,\n      databaseType: databaseType,\n      os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 0,\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 1,\n          xl: 1,\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            display: \"flex\",\n            justifyContent: \"center\",\n            children: /*#__PURE__*/_jsxDEV(Storage, {\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          md: 2,\n          xl: 2,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            value: state.server,\n            className: classes.fields,\n            id: \"server\",\n            color: \"primary\",\n            label: \"Serveur\",\n            onChange: e => setState({ ...state,\n              server: e.target.value\n            }),\n            onBlur: saveInformations,\n            inputProps: {\n              style: {\n                fontSize: state.server && state.server.split(\"\").length > 20 && state.server.split(\"\").length < 65 ? 13 : state.server && state.server.split(\"\").length > 65 ? 13 : \"1rem\"\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 2,\n          md: 2,\n          xl: 2,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            className: classes.fields,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: status,\n              onChange: e => setStatus(e.target.value),\n              onBlur: saveInformations,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"stop\",\n                children: \"Stop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"start\",\n                children: \"Start\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"status\",\n                children: \"Status\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          md: 3,\n          xl: 3,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            autoComplete: \"false\",\n            className: classes.fields,\n            value: state.name,\n            id: \"DBName\",\n            color: \"primary\",\n            label: \"Instance\",\n            onChange: e => setState({ ...state,\n              name: e.target.value\n            }),\n            onBlur: saveInformations\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 3,\n          md: 3,\n          xl: 3,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            className: classes.fields,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              children: \"Type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              value: databaseType,\n              onChange: e => setDatabaseType(e.target.value),\n              onBlur: saveInformations,\n              children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"MSSQL\",\n                children: \"MSSQL\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"MONGODB\",\n                children: \"MONGODB\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: \"Oracle\",\n                children: \"Oracle\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          md: 1,\n          xl: 1,\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 3,\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(OptionMenu, {\n                index: index,\n                deleteAction: deleteAction,\n                duplicateAction: duplicateAction\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              md: 6,\n              children: /*#__PURE__*/_jsxDEV(Box, {\n                my: \"auto\",\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  className: classes.smallAvatar,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    children: index + 1\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 161,\n                    columnNumber: 41\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 160,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Database, \"7K+FbB/2Tu9s7Bvp5qpsSXYz2J4=\", false, function () {\n  return [useStyles];\n});\n\n_c = Database;\nexport default Database;\n\nvar _c;\n\n$RefreshReg$(_c, \"Database\");","map":{"version":3,"sources":["C:/Users/samba/Desktop/projetSFR/AR/client/src/Components/Actions/Database.js"],"names":["Avatar","Box","FormControl","Grid","IconButton","InputLabel","Menu","MenuItem","Paper","Select","TextField","Typography","makeStyles","Delete","FileCopy","MoreVert","Storage","useContext","useState","useEffect","ActionContext","OptionMenu","useStyles","theme","root","background","padding","spacing","marginBottom","fields","width","smallAvatar","height","Database","index","type","initialSTate","classes","deleteAction","duplicateAction","saveData","AddServer","state","setState","status","setStatus","databaseType","setDatabaseType","OS","SetOS","options","setOptions","block","environnements","prod","hprod","inte","dev","action","toLowerCase","undefined","toUpperCase","saveInformations","name","server","result","os","startsWith","e","target","value","style","fontSize","split","length"],"mappings":"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","sourcesContent":["import { Avatar, Box, FormControl, Grid, IconButton, InputLabel, Menu, MenuItem, Paper, Select, TextField, Typography } from \"@material-ui/core\"\r\nimport { makeStyles } from '@material-ui/core'\r\nimport { Delete, FileCopy, MoreVert, Storage } from \"@material-ui/icons\"\r\nimport { useContext, useState,useEffect } from \"react\"\r\nimport ActionContext from \"../../Context/ActionContext\"\r\nimport OptionMenu from \"../Creation/OptionMenu\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        background: '#F6F6FB',\r\n        padding: theme.spacing(1),\r\n        marginBottom: theme.spacing(1)\r\n\r\n    },\r\n    fields: {\r\n        width: \"100%\"\r\n\r\n    },\r\n    smallAvatar: {\r\n        width: theme.spacing(2.5),\r\n        height: theme.spacing(2.5)\r\n    }\r\n}))\r\n\r\nconst Database = ({ index, type,initialSTate }) => {\r\n    const classes = useStyles()\r\n    const { deleteAction, duplicateAction, saveData, AddServer } = useContext(ActionContext)\r\n\r\n    const [state, setState] = useState({initialSTate})\r\n    const [status, setStatus] = useState(type)\r\n    const [databaseType, setDatabaseType] = useState(\"MSSQL\")\r\n    const [OS, SetOS] = useState(\"\")\r\n    const [options, setOptions] = useState({\r\n        block:true,\r\n        environnements:{\r\n            prod:true,\r\n            hprod:true,\r\n            inte:true,\r\n            dev:true,\r\n        }\r\n    })\r\n\r\n    useEffect(() =>{\r\n        setState(initialSTate)\r\n        if(initialSTate.action){\r\n            setStatus(initialSTate.action.toLowerCase())\r\n        }            \r\n        initialSTate.databaseType !== undefined \r\n            ?   setDatabaseType(initialSTate.databaseType.toUpperCase())\r\n            :   setDatabaseType(\"MSSQL\")\r\n\r\n    },[]\r\n    )\r\n\r\n    const saveInformations = () => {\r\n\r\n        if (state.name === undefined || state.server === undefined) { return }\r\n        \r\n        let result\r\n        if(status ===\"status\"){\r\n            type === \"stop\" ?  result = \"stopped\": result = \"running\"\r\n        }\r\n\r\n        saveData(\r\n            {\r\n                index: index, \r\n                type: \"database\", \r\n                server: state.server, \r\n                name: state.name, \r\n                action: status, \r\n                databaseType: databaseType,\r\n                os: state.server.toUpperCase().startsWith(\"SW\") ? \"windows\" : \"linux\"\r\n\r\n            }\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Paper\r\n                elevation={0}\r\n                className={classes.root}>\r\n                <Grid\r\n                    container\r\n                    spacing={2}\r\n                    alignItems=\"center\"\r\n\r\n                >\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Box display=\"flex\" justifyContent=\"center\">\r\n                            <Storage color=\"primary\" />\r\n                        </Box>\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <TextField\r\n                        value={state.server}\r\n                            className={classes.fields}\r\n                            id='server'\r\n                            color='primary'\r\n                            label='Serveur'\r\n                            onChange={(e) => setState({ ...state, server: e.target.value })}\r\n                            onBlur={saveInformations}\r\n                            inputProps={{\r\n                                style: {\r\n                                    fontSize:\r\n                                        state.server && state.server.split(\"\").length > 20 && state.server.split(\"\").length < 65 ? 13 :\r\n                                        state.server && state.server.split(\"\").length > 65 ? 13 : \"1rem\"\r\n                                }\r\n                            }}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={2} md={2} xl={2}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Action</InputLabel>\r\n                            <Select value={status} \r\n                            onChange={(e) => setStatus(e.target.value)} \r\n                            onBlur={saveInformations} >\r\n                                <MenuItem value=\"stop\">Stop</MenuItem>\r\n                                <MenuItem value=\"start\">Start</MenuItem>\r\n                                <MenuItem value=\"status\" >Status</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <TextField\r\n                            autoComplete=\"false\"\r\n                            className={classes.fields}\r\n                            value={state.name}\r\n                            id='DBName'\r\n                            color='primary'\r\n                            label='Instance'\r\n                            onChange={(e) => setState({ ...state, name: e.target.value })}\r\n                            onBlur={saveInformations}\r\n\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={3} md={3} xl={3}>\r\n                        <FormControl className={classes.fields}>\r\n                            <InputLabel>Type</InputLabel>\r\n                            <Select value={databaseType} onChange={(e) => setDatabaseType(e.target.value)} onBlur={saveInformations} >\r\n                                <MenuItem value=\"MSSQL\">MSSQL</MenuItem>\r\n                                <MenuItem value=\"MONGODB\">MONGODB</MenuItem>\r\n                                <MenuItem value=\"Oracle\" >Oracle</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid item md={1} xl={1}  >\r\n                        <Grid container spacing={3} alignItems=\"center\" >\r\n                            <Grid item md={6} >\r\n                                <OptionMenu index={index} deleteAction={deleteAction} duplicateAction={duplicateAction} />\r\n                            </Grid>\r\n\r\n                            <Grid item md={6}>\r\n                                <Box my=\"auto\" >\r\n                                    <Avatar className={classes.smallAvatar} >\r\n                                        <Typography>\r\n                                            {index + 1}\r\n                                        </Typography>\r\n                                    </Avatar>\r\n\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Database;"]},"metadata":{},"sourceType":"module"}