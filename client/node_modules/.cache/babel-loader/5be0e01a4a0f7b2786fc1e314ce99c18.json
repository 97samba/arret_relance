{"ast":null,"code":"const {\n  convertToPSParam\n} = require('./utils');\n\nconst {\n  PS_ARG_MISS_ERROR,\n  PS_ARG_TYPE_ERROR\n} = require('./errors');\n\nclass PSCommand {\n  constructor(command) {\n    if (!command) {\n      throw new PS_ARG_MISS_ERROR('Command is missing');\n    }\n\n    if (typeof command !== 'string') {\n      throw new PS_ARG_TYPE_ERROR('Command must be a string');\n    }\n\n    this.command = command;\n  }\n\n  addArgument(argument) {\n    if (!argument) {\n      throw new PS_ARG_MISS_ERROR('Argument is missing');\n    }\n\n    if (typeof argument !== 'string') {\n      throw new PS_ARG_TYPE_ERROR('Argument must be a string');\n    }\n\n    return new this.constructor(`${this.command} ${argument}`);\n  }\n\n  addParameter(parameter) {\n    if (!parameter) {\n      throw new PS_ARG_MISS_ERROR('Parameter is missing');\n    }\n\n    if (typeof parameter !== 'object' || Object.keys(parameter).length === 0) {\n      throw new PS_ARG_TYPE_ERROR('Parameter must be an object containing at least one key');\n    } // calc param structure\n\n\n    const paramKeys = Object.keys(parameter);\n    let paramKey;\n    let paramValue;\n\n    if (paramKeys.length === 1) {\n      // param is {name: value}\n      [paramKey] = paramKeys;\n      paramValue = parameter[paramKey];\n    } else if (paramKeys.length === 2 && paramKeys[0] === 'name' && paramKeys[1] === 'value') {\n      // param is {name: '', value: ''}\n      paramKey = parameter.name;\n      paramValue = parameter.value;\n    } else {\n      throw new PS_ARG_TYPE_ERROR('All params must be in either {name: value} or {name: \"\", value: \"\"} structure');\n    } // cast a parameter value from JS data types to PowerShell data types.\n\n\n    paramValue = convertToPSParam(paramValue);\n    paramValue = paramValue ? ` ${paramValue}` : '';\n    return new this.constructor(`${this.command} -${paramKey}${paramValue}`);\n  }\n\n  clone() {\n    return new this.constructor(this.command);\n  }\n\n}\n\nmodule.exports = PSCommand;","map":{"version":3,"sources":["C:/Users/samba/Desktop/projet SFR/AR/node_modules/node-powershell/lib/PSCommand.js"],"names":["convertToPSParam","require","PS_ARG_MISS_ERROR","PS_ARG_TYPE_ERROR","PSCommand","constructor","command","addArgument","argument","addParameter","parameter","Object","keys","length","paramKeys","paramKey","paramValue","name","value","clone","module","exports"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAuBC,OAAO,CAAC,SAAD,CAApC;;AACA,MAAM;AACJC,EAAAA,iBADI;AAEJC,EAAAA;AAFI,IAGFF,OAAO,CAAC,UAAD,CAHX;;AAKA,MAAMG,SAAN,CAAgB;AACdC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,QAAG,CAACA,OAAJ,EAAa;AACX,YAAM,IAAIJ,iBAAJ,CAAsB,oBAAtB,CAAN;AACD;;AACD,QAAG,OAAOI,OAAP,KAAmB,QAAtB,EAAgC;AAC9B,YAAM,IAAIH,iBAAJ,CAAsB,0BAAtB,CAAN;AACD;;AAED,SAAKG,OAAL,GAAeA,OAAf;AACD;;AACDC,EAAAA,WAAW,CAACC,QAAD,EAAW;AACpB,QAAG,CAACA,QAAJ,EAAc;AACZ,YAAM,IAAIN,iBAAJ,CAAsB,qBAAtB,CAAN;AACD;;AACD,QAAG,OAAOM,QAAP,KAAoB,QAAvB,EAAiC;AAC/B,YAAM,IAAIL,iBAAJ,CAAsB,2BAAtB,CAAN;AACD;;AAED,WAAO,IAAI,KAAKE,WAAT,CAAsB,GAAE,KAAKC,OAAQ,IAAGE,QAAS,EAAjD,CAAP;AACD;;AACDC,EAAAA,YAAY,CAACC,SAAD,EAAY;AACtB,QAAG,CAACA,SAAJ,EAAe;AACb,YAAM,IAAIR,iBAAJ,CAAsB,sBAAtB,CAAN;AACD;;AACD,QAAG,OAAOQ,SAAP,KAAqB,QAArB,IAAiCC,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuBG,MAAvB,KAAkC,CAAtE,EAAyE;AACvE,YAAM,IAAIV,iBAAJ,CAAsB,yDAAtB,CAAN;AACD,KANqB,CAQtB;;;AACA,UAAMW,SAAS,GAAGH,MAAM,CAACC,IAAP,CAAYF,SAAZ,CAAlB;AACA,QAAIK,QAAJ;AACA,QAAIC,UAAJ;;AACA,QAAGF,SAAS,CAACD,MAAV,KAAqB,CAAxB,EAA2B;AACzB;AACA,OAACE,QAAD,IAAaD,SAAb;AACAE,MAAAA,UAAU,GAAGN,SAAS,CAACK,QAAD,CAAtB;AACD,KAJD,MAIO,IAAGD,SAAS,CAACD,MAAV,KAAqB,CAArB,IAA0BC,SAAS,CAAC,CAAD,CAAT,KAAiB,MAA3C,IAAqDA,SAAS,CAAC,CAAD,CAAT,KAAiB,OAAzE,EAAkF;AACvF;AACAC,MAAAA,QAAQ,GAAGL,SAAS,CAACO,IAArB;AACAD,MAAAA,UAAU,GAAGN,SAAS,CAACQ,KAAvB;AACD,KAJM,MAIA;AACL,YAAM,IAAIf,iBAAJ,CAAsB,+EAAtB,CAAN;AACD,KAtBqB,CAwBtB;;;AACAa,IAAAA,UAAU,GAAGhB,gBAAgB,CAACgB,UAAD,CAA7B;AACAA,IAAAA,UAAU,GAAGA,UAAU,GAAI,IAAGA,UAAW,EAAlB,GAAsB,EAA7C;AAEA,WAAO,IAAI,KAAKX,WAAT,CAAsB,GAAE,KAAKC,OAAQ,KAAIS,QAAS,GAAEC,UAAW,EAA/D,CAAP;AACD;;AACDG,EAAAA,KAAK,GAAG;AACN,WAAO,IAAI,KAAKd,WAAT,CAAqB,KAAKC,OAA1B,CAAP;AACD;;AArDa;;AAwDhBc,MAAM,CAACC,OAAP,GAAiBjB,SAAjB","sourcesContent":["const { convertToPSParam } = require('./utils');\nconst {\n  PS_ARG_MISS_ERROR,\n  PS_ARG_TYPE_ERROR,\n} = require('./errors');\n\nclass PSCommand {\n  constructor(command) {\n    if(!command) {\n      throw new PS_ARG_MISS_ERROR('Command is missing');\n    }\n    if(typeof command !== 'string') {\n      throw new PS_ARG_TYPE_ERROR('Command must be a string');\n    }\n\n    this.command = command;\n  }\n  addArgument(argument) {\n    if(!argument) {\n      throw new PS_ARG_MISS_ERROR('Argument is missing');\n    }\n    if(typeof argument !== 'string') {\n      throw new PS_ARG_TYPE_ERROR('Argument must be a string');\n    }\n\n    return new this.constructor(`${this.command} ${argument}`);\n  }\n  addParameter(parameter) {\n    if(!parameter) {\n      throw new PS_ARG_MISS_ERROR('Parameter is missing');\n    }\n    if(typeof parameter !== 'object' || Object.keys(parameter).length === 0) {\n      throw new PS_ARG_TYPE_ERROR('Parameter must be an object containing at least one key');\n    }\n\n    // calc param structure\n    const paramKeys = Object.keys(parameter);\n    let paramKey;\n    let paramValue;\n    if(paramKeys.length === 1) {\n      // param is {name: value}\n      [paramKey] = paramKeys;\n      paramValue = parameter[paramKey];\n    } else if(paramKeys.length === 2 && paramKeys[0] === 'name' && paramKeys[1] === 'value') {\n      // param is {name: '', value: ''}\n      paramKey = parameter.name;\n      paramValue = parameter.value;\n    } else {\n      throw new PS_ARG_TYPE_ERROR('All params must be in either {name: value} or {name: \"\", value: \"\"} structure');\n    }\n\n    // cast a parameter value from JS data types to PowerShell data types.\n    paramValue = convertToPSParam(paramValue);\n    paramValue = paramValue ? ` ${paramValue}` : '';\n\n    return new this.constructor(`${this.command} -${paramKey}${paramValue}`);\n  }\n  clone() {\n    return new this.constructor(this.command);\n  }\n}\n\nmodule.exports = PSCommand;\n"]},"metadata":{},"sourceType":"script"}