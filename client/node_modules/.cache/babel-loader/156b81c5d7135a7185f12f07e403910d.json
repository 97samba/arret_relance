{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samba\\\\Desktop\\\\projetSFR\\\\AR\\\\client\\\\src\\\\Pages\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport { FormControlLabel, FormGroup, FormLabel, Grid, makeStyles, Radio, RadioGroup, Switch, TextField, Typography } from \"@material-ui/core\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport ARCard from \"../Components/ARCard\";\nimport RightNav from \"../Components/Creation/RightNav\";\nimport { useHistory } from 'react-router';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar drawerWidthRight = 260;\nconst useStyles = makeStyles(theme => {\n  return {\n    root: {\n      width: `calc(100% - ${drawerWidthRight}px)`\n    }\n  };\n});\n\nconst Create = () => {\n  _s();\n\n  const [titleOpen, setTitleOpen] = useState(false); //titre de la parpre ou de la POS\n\n  const [title, setTitle] = useState(\"APPXXXX_SSA\"); //les actions d'arrêt\n\n  const [StopActions, setStopActions] = useState([]); //les Actions de relance\n\n  const [StartActions, setStartActions] = useState([]); //les Actions auto relance\n\n  const [AutoStartActions, setAutoStartActions] = useState([]); //les Actions POS\n\n  const [posActions, setPosActions] = useState([]); //creation automatique de la verification\n\n  const [autoCreate, setAutoCreate] = useState(false); //Si on fait la relance automatiquement\n\n  const [autoRelance, setAutoRelance] = useState(false); //Soit PARPRE ou POS\n\n  const [documentType, setDocumentType] = useState(\"PARPRE\"); //Le mode d'utilisation: creation ou modification\n\n  const [pageMode, setPageMode] = useState(\"Création\");\n  const history = useHistory();\n  const [servers, setServers] = useState([]); //La page de création et la page de modifiation sont les mêmes, la difference est assurée par pageMode\n\n  useEffect(() => {\n    if (history.location.state !== undefined) {\n      document.title = `Modification de ${history.location.state.name}`;\n      console.log(\"History \", history.location);\n      history.location.fromExcel ? setPageMode(\"Création\") : setPageMode(\"Modification\");\n      setDocumentType(history.location.state.type);\n      setStopActions(history.location.state.Arret);\n      setStartActions(history.location.state.Relance); //setDocumentType(history.location.state.type || \"PARPRE\")\n      //setPosActions(history.location.state.pos)\n\n      setTitle(history.location.state.name);\n\n      if (history.location.state.variables.servers !== undefined) {\n        const initialServers = history.location.state.variables.servers.map((variable, index) => {\n          return {\n            id: index,\n            prod: variable.prod,\n            hprod: variable.hprod,\n            dev: variable.dev,\n            name: variable.name\n          };\n        });\n        setServers(initialServers);\n      }\n    } else {\n      document.title = \"Création de PARPRE / POS\";\n      setPageMode(\"Création\");\n    }\n  }, []);\n\n  const saveServer = () => {\n    //noms des serveurs dans la lste des variables\n    var Allservers = servers.map(server => {\n      return server.prod.toUpperCase();\n    });\n    var serversInStopActions = new Set();\n    var databasesInStopActions = new Set(); //on recupere les servers dans les etapes d'arret\n\n    StopActions.map(action => {\n      if (action.server === undefined || action.server === \"\") {\n        return;\n      }\n\n      ;\n      serversInStopActions.add(action.server.toUpperCase());\n\n      if (action.type === \"database\") {\n        databasesInStopActions.add(action.name.toUpperCase());\n      }\n    }); //on rajoute les serveurs manquants\n\n    serversInStopActions.forEach(server => {\n      if (!Allservers.includes(server)) {\n        Allservers.push(server);\n        var name = \"\";\n        server.startsWith(\"sw\") ? name = server.replace(\"sw\", \"SRV_WIN_\") : name = server;\n        console.log(\"name \", name);\n        setServers([...servers, {\n          id: servers.length + 1,\n          prod: server.toUpperCase(),\n          hprod: \"definir\",\n          dev: \"definir\",\n          name: name\n        }]);\n      }\n    });\n    databasesInStopActions.forEach(database => {\n      if (!Allservers.includes(database)) {\n        Allservers.push(database);\n        var name = `BDD_${database}`;\n        setServers([...servers, {\n          id: servers.length + 1,\n          prod: database.toUpperCase(),\n          hprod: \"definir\",\n          dev: \"definir\",\n          name: name\n        }]);\n      }\n    }); //On enleve les serveurs absents dans la liste des actions\n\n    Allservers.map(server => {\n      if (!serversInStopActions.has(server) && !databasesInStopActions.has(server)) {\n        const newServerState = servers.filter(serverprod => serverprod.prod !== server);\n        setServers(newServerState);\n      }\n    });\n  };\n\n  const classes = useStyles();\n\n  const saveStart = object => {\n    setStartActions(object); //setAutoStartActions(object)\n  };\n\n  const saveStop = object => {\n    setStopActions(object); // if(autoRelance)\n    //reverseStopAction(object)\n\n    saveServer(object);\n  };\n\n  const reverseStopAction = actions => {\n    var newRelance = actions.slice(0).reverse().map(action => {\n      if (action.type === \"service\" || action.type === \"database\" || action.type === \"process\") {\n        if (action.action === \"status\") {\n          action = { ...action,\n            action: \"start\"\n          };\n        } else {\n          action = { ...action,\n            action: \"status\",\n            options: {\n              result: \"running\"\n            }\n          };\n        }\n      }\n\n      if (action.type === \"script\") {\n        action = { ...action,\n          path: \"\"\n        };\n      }\n\n      if (action.type === \"command\") {\n        action = { ...action,\n          name: \"\",\n          result: \"\"\n        };\n      }\n\n      return action;\n    }); //console.log(\"stopAction \",StopActions)\n    //console.log(\"new relance : \",newRelance)\n\n    console.log(\"input : \", actions);\n\n    for (var i = 0; i < newRelance.length; i++) {\n      if (newRelance[i]) {\n        newRelance[i].index = i;\n      }\n    }\n\n    setAutoStartActions(newRelance);\n    console.log(\"actions \", actions, \" vs \", newRelance);\n  };\n\n  const generateJson = () => {\n    console.log(\"name \", title);\n    const parpre = {\n      name: title,\n      auteur: \"Samba NDIAYE\",\n      date_de_creation: new Date().toLocaleString(),\n      type: \"PARPRE\",\n      Arret: StopActions,\n      Relance: autoRelance ? AutoStartActions : StartActions,\n      POS: posActions,\n      variables: {\n        servers: servers\n      }\n    };\n    axios.post(`http://localhost:5000/api/PARPRE/create`, {\n      data: parpre,\n      mode: pageMode\n    }).then(res => console.log(res));\n    console.log(JSON.stringify(parpre));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 2,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 6,\n        children: titleOpen ? /*#__PURE__*/_jsxDEV(TextField, {\n          placeholder: \"Changer le titre\",\n          onBlur: () => setTitleOpen(false),\n          margin: \"dense\",\n          onChange: e => setTitle(e.target.value),\n          autoFocus: true,\n          value: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            gutterBottom: true,\n            onClick: () => setTitleOpen(true),\n            children: [\"Nom : \", title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 33\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(FormGroup, {\n          children: documentType === \"PARPRE\" ? /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            control: /*#__PURE__*/_jsxDEV(Switch, {\n              onChange: () => {\n                reverseStopAction(StopActions);\n                setAutoRelance(!autoRelance);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 273,\n              columnNumber: 46\n            }, this),\n            checked: autoRelance,\n            label: \"Relance-Auto\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 33\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        md: 3,\n        children: /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: documentType,\n          onChange: e => setDocumentType(e.target.value),\n          children: /*#__PURE__*/_jsxDEV(FormGroup, {\n            row: true,\n            children: [/*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"POS\",\n              label: \"POS\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 80\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: \"PARPRE\",\n              label: \"PARPRE\",\n              control: /*#__PURE__*/_jsxDEV(Radio, {\n                color: \"primary\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 86\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 292,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this), documentType === \"POS\" ? /*#__PURE__*/_jsxDEV(ARCard, {\n      name: \"Proc\\xE9dure d'Ouverture de Service\",\n      type: \"status\",\n      actions: posActions,\n      SetActions: setPosActions,\n      generateJson: generateJson\n    }, 4, false, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 25\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ARCard, {\n        name: \"Arr\\xEAt\",\n        type: \"stop\",\n        actions: StopActions,\n        SetActions: saveStop,\n        autoRelance: autoRelance,\n        AddServer: saveServer,\n        generateJson: generateJson\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 29\n      }, this), autoRelance ? /*#__PURE__*/_jsxDEV(ARCard, {\n        name: \"Auto-Relance\",\n        type: \"start\",\n        actions: AutoStartActions,\n        SetActions: setAutoStartActions,\n        autoRelance: autoRelance,\n        AddServer: saveServer,\n        generateJson: generateJson\n      }, 2, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(ARCard, {\n        name: \"Relance\",\n        type: \"start\",\n        actions: StartActions,\n        SetActions: saveStart,\n        AddServer: saveServer\n      }, 3, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(RightNav, {\n      ServerRow: servers,\n      saveRows: setServers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Create, \"3az2F81vuPPb/vWz02wqDRpl0tk=\", false, function () {\n  return [useHistory, useStyles];\n});\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["C:/Users/samba/Desktop/projetSFR/AR/client/src/Pages/Create.js"],"names":["FormControlLabel","FormGroup","FormLabel","Grid","makeStyles","Radio","RadioGroup","Switch","TextField","Typography","axios","useEffect","useState","ARCard","RightNav","useHistory","drawerWidthRight","useStyles","theme","root","width","Create","titleOpen","setTitleOpen","title","setTitle","StopActions","setStopActions","StartActions","setStartActions","AutoStartActions","setAutoStartActions","posActions","setPosActions","autoCreate","setAutoCreate","autoRelance","setAutoRelance","documentType","setDocumentType","pageMode","setPageMode","history","servers","setServers","location","state","undefined","document","name","console","log","fromExcel","type","Arret","Relance","variables","initialServers","map","variable","index","id","prod","hprod","dev","saveServer","Allservers","server","toUpperCase","serversInStopActions","Set","databasesInStopActions","action","add","forEach","includes","push","startsWith","replace","length","database","has","newServerState","filter","serverprod","classes","saveStart","object","saveStop","reverseStopAction","actions","newRelance","slice","reverse","options","result","path","i","generateJson","parpre","auteur","date_de_creation","Date","toLocaleString","POS","post","data","mode","then","res","JSON","stringify","e","target","value"],"mappings":";;;AAAA,SAASA,gBAAT,EAA2BC,SAA3B,EAAsCC,SAAtC,EAAiDC,IAAjD,EAAuDC,UAAvD,EAAmEC,KAAnE,EAA0EC,UAA1E,EAAsFC,MAAtF,EAA8FC,SAA9F,EAAyGC,UAAzG,QAA2H,mBAA3H;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,iCAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;;AAEA,IAAIC,gBAAgB,GAAG,GAAvB;AAEA,MAAMC,SAAS,GAAGb,UAAU,CAAEc,KAAD,IAAW;AACpC,SAAO;AACHC,IAAAA,IAAI,EAAE;AACFC,MAAAA,KAAK,EAAG,eAAcJ,gBAAiB;AADrC;AADH,GAAP;AAMH,CAP2B,CAA5B;;AAUA,MAAMK,MAAM,GAAG,MAAM;AAAA;;AAEjB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C,CAFiB,CAGjB;;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,aAAD,CAAlC,CAJiB,CAKjB;;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAC,EAAD,CAA9C,CANiB,CAOjB;;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,EAAD,CAAhD,CARiB,CASjB;;AACA,QAAM,CAACkB,gBAAD,EAAmBC,mBAAnB,IAA0CnB,QAAQ,CAAC,EAAD,CAAxD,CAViB,CAWjB;;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAC,EAAD,CAA5C,CAZiB,CAajB;;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAAC,KAAD,CAA5C,CAdiB,CAejB;;AACA,QAAM,CAACwB,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,KAAD,CAA9C,CAhBiB,CAiBjB;;AACA,QAAM,CAAC0B,YAAD,EAAeC,eAAf,IAAkC3B,QAAQ,CAAC,QAAD,CAAhD,CAlBiB,CAmBjB;;AACA,QAAM,CAAC4B,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC,UAAD,CAAxC;AAEA,QAAM8B,OAAO,GAAG3B,UAAU,EAA1B;AAEA,QAAM,CAAC4B,OAAD,EAAUC,UAAV,IAAwBhC,QAAQ,CAAC,EAAD,CAAtC,CAxBiB,CA0BjB;;AACAD,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAI+B,OAAO,CAACG,QAAR,CAAiBC,KAAjB,KAA2BC,SAA/B,EAA0C;AACtCC,MAAAA,QAAQ,CAACxB,KAAT,GAAkB,mBAAkBkB,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBG,IAAK,EAAhE;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBT,OAAO,CAACG,QAAhC;AAEAH,MAAAA,OAAO,CAACG,QAAR,CAAiBO,SAAjB,GACMX,WAAW,CAAC,UAAD,CADjB,GAEMA,WAAW,CAAC,cAAD,CAFjB;AAIAF,MAAAA,eAAe,CAACG,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBO,IAAxB,CAAf;AACA1B,MAAAA,cAAc,CAACe,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBQ,KAAxB,CAAd;AACAzB,MAAAA,eAAe,CAACa,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBS,OAAxB,CAAf,CAXsC,CAYtC;AACA;;AACA9B,MAAAA,QAAQ,CAACiB,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBG,IAAxB,CAAR;;AAEA,UAAIP,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBU,SAAvB,CAAiCb,OAAjC,KAA6CI,SAAjD,EAA4D;AAExD,cAAMU,cAAc,GAAGf,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBU,SAAvB,CAAiCb,OAAjC,CAAyCe,GAAzC,CAA6C,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACrF,iBAAO;AACHC,YAAAA,EAAE,EAAED,KADD;AAEHE,YAAAA,IAAI,EAAEH,QAAQ,CAACG,IAFZ;AAGHC,YAAAA,KAAK,EAAEJ,QAAQ,CAACI,KAHb;AAIHC,YAAAA,GAAG,EAAEL,QAAQ,CAACK,GAJX;AAKHf,YAAAA,IAAI,EAAEU,QAAQ,CAACV;AALZ,WAAP;AAOH,SARsB,CAAvB;AASAL,QAAAA,UAAU,CAACa,cAAD,CAAV;AACH;AACJ,KA7BD,MA6BO;AACHT,MAAAA,QAAQ,CAACxB,KAAT,GAAiB,0BAAjB;AACAiB,MAAAA,WAAW,CAAC,UAAD,CAAX;AACH;AACJ,GAnCQ,EAmCN,EAnCM,CAAT;;AAsCA,QAAMwB,UAAU,GAAG,MAAM;AAErB;AACA,QAAIC,UAAU,GAAGvB,OAAO,CAACe,GAAR,CAAYS,MAAM,IAAI;AAAE,aAAOA,MAAM,CAACL,IAAP,CAAYM,WAAZ,EAAP;AAAkC,KAA1D,CAAjB;AAEA,QAAIC,oBAAoB,GAAG,IAAIC,GAAJ,EAA3B;AACA,QAAIC,sBAAsB,GAAG,IAAID,GAAJ,EAA7B,CANqB,CAQrB;;AACA5C,IAAAA,WAAW,CAACgC,GAAZ,CAAgBc,MAAM,IAAI;AACtB,UAAIA,MAAM,CAACL,MAAP,KAAkBpB,SAAlB,IAA+ByB,MAAM,CAACL,MAAP,KAAkB,EAArD,EAAyD;AAAE;AAAQ;;AAAA;AACnEE,MAAAA,oBAAoB,CAACI,GAArB,CAAyBD,MAAM,CAACL,MAAP,CAAcC,WAAd,EAAzB;;AAEA,UAAGI,MAAM,CAACnB,IAAP,KAAgB,UAAnB,EAA8B;AAC1BkB,QAAAA,sBAAsB,CAACE,GAAvB,CAA2BD,MAAM,CAACvB,IAAP,CAAYmB,WAAZ,EAA3B;AAEH;AAEJ,KATD,EATqB,CAoBrB;;AACAC,IAAAA,oBAAoB,CAACK,OAArB,CAA6BP,MAAM,IAAI;AAEnC,UAAI,CAACD,UAAU,CAACS,QAAX,CAAoBR,MAApB,CAAL,EAAkC;AAC9BD,QAAAA,UAAU,CAACU,IAAX,CAAgBT,MAAhB;AACA,YAAIlB,IAAI,GAAE,EAAV;AACAkB,QAAAA,MAAM,CAACU,UAAP,CAAkB,IAAlB,IACM5B,IAAI,GAAGkB,MAAM,CAACW,OAAP,CAAe,IAAf,EAAqB,UAArB,CADb,GAEM7B,IAAI,GAAGkB,MAFb;AAGAjB,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,IAApB;AACAL,QAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAa;AAAEkB,UAAAA,EAAE,EAAGlB,OAAO,CAACoC,MAAR,GAAiB,CAAxB;AAA4BjB,UAAAA,IAAI,EAAEK,MAAM,CAACC,WAAP,EAAlC;AAAwDL,UAAAA,KAAK,EAAE,SAA/D;AAA0EC,UAAAA,GAAG,EAAE,SAA/E;AAA0Ff,UAAAA,IAAI,EAACA;AAA/F,SAAb,CAAD,CAAV;AAEH;AACJ,KAZD;AAcAsB,IAAAA,sBAAsB,CAACG,OAAvB,CAA+BM,QAAQ,IAAI;AAEvC,UAAI,CAACd,UAAU,CAACS,QAAX,CAAoBK,QAApB,CAAL,EAAoC;AAChCd,QAAAA,UAAU,CAACU,IAAX,CAAgBI,QAAhB;AACA,YAAI/B,IAAI,GAAI,OAAM+B,QAAS,EAA3B;AACApC,QAAAA,UAAU,CAAC,CAAC,GAAGD,OAAJ,EAAa;AAAEkB,UAAAA,EAAE,EAAGlB,OAAO,CAACoC,MAAR,GAAiB,CAAxB;AAA4BjB,UAAAA,IAAI,EAAEkB,QAAQ,CAACZ,WAAT,EAAlC;AAA0DL,UAAAA,KAAK,EAAE,SAAjE;AAA4EC,UAAAA,GAAG,EAAE,SAAjF;AAA4Ff,UAAAA,IAAI,EAACA;AAAjG,SAAb,CAAD,CAAV;AAEH;AACJ,KARD,EAnCqB,CA6CrB;;AACAiB,IAAAA,UAAU,CAACR,GAAX,CAAeS,MAAM,IAAI;AACrB,UAAI,CAACE,oBAAoB,CAACY,GAArB,CAAyBd,MAAzB,CAAD,IAAqC,CAACI,sBAAsB,CAACU,GAAvB,CAA2Bd,MAA3B,CAA1C,EAA8E;AAC1E,cAAMe,cAAc,GAAGvC,OAAO,CAACwC,MAAR,CAAeC,UAAU,IAAIA,UAAU,CAACtB,IAAX,KAAoBK,MAAjD,CAAvB;AACAvB,QAAAA,UAAU,CAACsC,cAAD,CAAV;AAEH;AACJ,KAND;AAQH,GAtDD;;AAwDA,QAAMG,OAAO,GAAGpE,SAAS,EAAzB;;AAEA,QAAMqE,SAAS,GAAIC,MAAD,IAAY;AAC1B1D,IAAAA,eAAe,CAAC0D,MAAD,CAAf,CAD0B,CAE1B;AAEH,GAJD;;AAOA,QAAMC,QAAQ,GAAID,MAAD,IAAY;AACzB5D,IAAAA,cAAc,CAAC4D,MAAD,CAAd,CADyB,CAGzB;AACA;;AAEAtB,IAAAA,UAAU,CAACsB,MAAD,CAAV;AACH,GAPD;;AAWA,QAAME,iBAAiB,GAAIC,OAAD,IAAa;AACnC,QAAIC,UAAU,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBC,OAAjB,GAA2BnC,GAA3B,CAA+Bc,MAAM,IAAI;AACtD,UAAIA,MAAM,CAACnB,IAAP,KAAgB,SAAhB,IAA6BmB,MAAM,CAACnB,IAAP,KAAgB,UAA7C,IAA2DmB,MAAM,CAACnB,IAAP,KAAgB,SAA/E,EAA0F;AACtF,YAAImB,MAAM,CAACA,MAAP,KAAkB,QAAtB,EAAgC;AAC5BA,UAAAA,MAAM,GAAG,EAAE,GAAGA,MAAL;AAAaA,YAAAA,MAAM,EAAE;AAArB,WAAT;AACH,SAFD,MAEO;AACHA,UAAAA,MAAM,GAAG,EAAE,GAAGA,MAAL;AAAaA,YAAAA,MAAM,EAAE,QAArB;AAA+BsB,YAAAA,OAAO,EAAE;AAAEC,cAAAA,MAAM,EAAE;AAAV;AAAxC,WAAT;AACH;AAEJ;;AACD,UAAIvB,MAAM,CAACnB,IAAP,KAAgB,QAApB,EAA8B;AAC1BmB,QAAAA,MAAM,GAAG,EAAE,GAAGA,MAAL;AAAawB,UAAAA,IAAI,EAAE;AAAnB,SAAT;AAEH;;AACD,UAAIxB,MAAM,CAACnB,IAAP,KAAgB,SAApB,EAA+B;AAC3BmB,QAAAA,MAAM,GAAG,EAAE,GAAGA,MAAL;AAAavB,UAAAA,IAAI,EAAE,EAAnB;AAAuB8C,UAAAA,MAAM,EAAE;AAA/B,SAAT;AACH;;AACD,aAAOvB,MAAP;AACH,KAjBgB,CAAjB,CADmC,CAmBnC;AACA;;AACAtB,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBuC,OAAxB;;AACA,SAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAAU,CAACZ,MAA/B,EAAuCkB,CAAC,EAAxC,EAA4C;AACxC,UAAIN,UAAU,CAACM,CAAD,CAAd,EAAmB;AACfN,QAAAA,UAAU,CAACM,CAAD,CAAV,CAAcrC,KAAd,GAAsBqC,CAAtB;AACH;AAEJ;;AACDlE,IAAAA,mBAAmB,CAAC4D,UAAD,CAAnB;AACAzC,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBuC,OAAxB,EAAiC,MAAjC,EAAyCC,UAAzC;AACH,GA9BD;;AAgCA,QAAMO,YAAY,GAAG,MAAM;AAEvBhD,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqB3B,KAArB;AAEA,UAAM2E,MAAM,GAAG;AACXlD,MAAAA,IAAI,EAAEzB,KADK;AAEX4E,MAAAA,MAAM,EAAE,cAFG;AAGXC,MAAAA,gBAAgB,EAAE,IAAIC,IAAJ,GAAWC,cAAX,EAHP;AAIXlD,MAAAA,IAAI,EAAE,QAJK;AAKXC,MAAAA,KAAK,EAAE5B,WALI;AAMX6B,MAAAA,OAAO,EAAEnB,WAAW,GAAGN,gBAAH,GAAsBF,YAN/B;AAOX4E,MAAAA,GAAG,EAAExE,UAPM;AAQXwB,MAAAA,SAAS,EAAE;AACPb,QAAAA,OAAO,EAAEA;AADF;AARA,KAAf;AAaAjC,IAAAA,KAAK,CAAC+F,IAAN,CAAY,yCAAZ,EAAsD;AAAEC,MAAAA,IAAI,EAAEP,MAAR;AAAgBQ,MAAAA,IAAI,EAAEnE;AAAtB,KAAtD,EACKoE,IADL,CACUC,GAAG,IAAI3D,OAAO,CAACC,GAAR,CAAY0D,GAAZ,CADjB;AAGA3D,IAAAA,OAAO,CAACC,GAAR,CAAY2D,IAAI,CAACC,SAAL,CAAeZ,MAAf,CAAZ;AACH,GArBD;;AAuBA,sBAGI;AAAK,IAAA,SAAS,EAAEd,OAAO,CAAClE,IAAxB;AAAA,4BACI,QAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,CAAzB;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,kBAEQG,SAAS,gBAED,QAAC,SAAD;AACI,UAAA,WAAW,EAAC,kBADhB;AAEI,UAAA,MAAM,EAAE,MAAMC,YAAY,CAAC,KAAD,CAF9B;AAGI,UAAA,MAAM,EAAC,OAHX;AAII,UAAA,QAAQ,EAAGyF,CAAD,IAAOvF,QAAQ,CAACuF,CAAC,CAACC,MAAF,CAASC,KAAV,CAJ7B;AAKI,UAAA,SAAS,MALb;AAMI,UAAA,KAAK,EAAE1F;AANX;AAAA;AAAA;AAAA;AAAA,gBAFC,gBAaD;AAAA,iCACI,QAAC,UAAD;AACI,YAAA,OAAO,EAAC,IADZ;AAEI,YAAA,YAAY,MAFhB;AAGI,YAAA,OAAO,EAAE,MAAMD,YAAY,CAAC,IAAD,CAH/B;AAAA,iCAKWC,KALX;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAfhB;AAAA;AAAA;AAAA;AAAA,cADJ,eAgDI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BACI,QAAC,SAAD;AAAA,oBACKc,YAAY,KAAK,QAAjB,gBAEO,QAAC,gBAAD;AACI,YAAA,OAAO,eAAE,QAAC,MAAD;AAAQ,cAAA,QAAQ,EAAE,MAAM;AAAEmD,gBAAAA,iBAAiB,CAAC/D,WAAD,CAAjB;AAAgCW,gBAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AAA8B;AAAxF;AAAA;AAAA;AAAA;AAAA,oBADb;AAEI,YAAA,OAAO,EAAEA,WAFb;AAGI,YAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,kBAFP,GAWO;AAZZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAhDJ,eAmEI,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,EAAE,EAAE,CAAf;AAAA,+BAEI,QAAC,UAAD;AAAY,UAAA,KAAK,EAAEE,YAAnB;AAAiC,UAAA,QAAQ,EAAG0E,CAAD,IAAOzE,eAAe,CAACyE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAjE;AAAA,iCACI,QAAC,SAAD;AAAW,YAAA,GAAG,MAAd;AAAA,oCACI,QAAC,gBAAD;AAAkB,cAAA,KAAK,EAAC,KAAxB;AAA8B,cAAA,KAAK,EAAC,KAApC;AAA0C,cAAA,OAAO,eAAE,QAAC,KAAD;AAAO,gBAAA,KAAK,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAAnD;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,QAAC,gBAAD;AAAkB,cAAA,KAAK,EAAC,QAAxB;AAAiC,cAAA,KAAK,EAAC,QAAvC;AAAgD,cAAA,OAAO,eAAE,QAAC,KAAD;AAAO,gBAAA,KAAK,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA;AAAzD;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cAnEJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAkFQ5E,YAAY,KAAK,KAAjB,gBAGQ,QAAC,MAAD;AACI,MAAA,IAAI,EAAC,qCADT;AAEI,MAAA,IAAI,EAAC,QAFT;AAGI,MAAA,OAAO,EAAEN,UAHb;AAII,MAAA,UAAU,EAAEC,aAJhB;AAKI,MAAA,YAAY,EAAEiE;AALlB,OAMS,CANT;AAAA;AAAA;AAAA;AAAA,YAHR,gBAcQ;AAAA,8BACI,QAAC,MAAD;AACI,QAAA,IAAI,EAAC,UADT;AAEI,QAAA,IAAI,EAAC,MAFT;AAGI,QAAA,OAAO,EAAExE,WAHb;AAII,QAAA,UAAU,EAAE8D,QAJhB;AAKI,QAAA,WAAW,EAAEpD,WALjB;AAMI,QAAA,SAAS,EAAE6B,UANf;AAOI,QAAA,YAAY,EAAEiC;AAPlB,SAQS,CART;AAAA;AAAA;AAAA;AAAA,cADJ,EAYK9D,WAAW,gBACP,QAAC,MAAD;AACG,QAAA,IAAI,EAAC,cADR;AAEG,QAAA,IAAI,EAAC,OAFR;AAGG,QAAA,OAAO,EAAEN,gBAHZ;AAIG,QAAA,UAAU,EAAEC,mBAJf;AAKG,QAAA,WAAW,EAAEK,WALhB;AAMG,QAAA,SAAS,EAAE6B,UANd;AAOG,QAAA,YAAY,EAAEiC;AAPjB,SAQQ,CARR;AAAA;AAAA;AAAA;AAAA,cADO,gBAcP,QAAC,MAAD;AACG,QAAA,IAAI,EAAC,SADR;AAEG,QAAA,IAAI,EAAC,OAFR;AAGG,QAAA,OAAO,EAAEtE,YAHZ;AAIG,QAAA,UAAU,EAAE0D,SAJf;AAKG,QAAA,SAAS,EAAErB;AALd,SAMQ,CANR;AAAA;AAAA;AAAA;AAAA,cA1BT;AAAA;AAAA;AAAA;AAAA;AAAA,YAhGhB,eAyII,QAAC,QAAD;AAAU,MAAA,SAAS,EAAEtB,OAArB;AAA8B,MAAA,QAAQ,EAAEC;AAAxC;AAAA;AAAA;AAAA;AAAA,YAzIJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ;AA+IH,CAnVD;;GAAMvB,M;UAsBcN,U,EAmGAE,S;;;KAzHdI,M;AAqVN,eAAeA,MAAf","sourcesContent":["import { FormControlLabel, FormGroup, FormLabel, Grid, makeStyles, Radio, RadioGroup, Switch, TextField, Typography } from \"@material-ui/core\"\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport ARCard from \"../Components/ARCard\"\r\nimport RightNav from \"../Components/Creation/RightNav\";\r\nimport { useHistory } from 'react-router'\r\n\r\nvar drawerWidthRight = 260\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n    return {\r\n        root: {\r\n            width: `calc(100% - ${drawerWidthRight}px)`\r\n        }\r\n\r\n    }\r\n})\r\n\r\n\r\nconst Create = () => {\r\n\r\n    const [titleOpen, setTitleOpen] = useState(false)\r\n    //titre de la parpre ou de la POS\r\n    const [title, setTitle] = useState(\"APPXXXX_SSA\")\r\n    //les actions d'arrêt\r\n    const [StopActions, setStopActions] = useState([])\r\n    //les Actions de relance\r\n    const [StartActions, setStartActions] = useState([])\r\n    //les Actions auto relance\r\n    const [AutoStartActions, setAutoStartActions] = useState([])\r\n    //les Actions POS\r\n    const [posActions, setPosActions] = useState([])\r\n    //creation automatique de la verification\r\n    const [autoCreate, setAutoCreate] = useState(false)\r\n    //Si on fait la relance automatiquement\r\n    const [autoRelance, setAutoRelance] = useState(false)\r\n    //Soit PARPRE ou POS\r\n    const [documentType, setDocumentType] = useState(\"PARPRE\")\r\n    //Le mode d'utilisation: creation ou modification\r\n    const [pageMode, setPageMode] = useState(\"Création\")\r\n\r\n    const history = useHistory()\r\n\r\n    const [servers, setServers] = useState([])\r\n\r\n    //La page de création et la page de modifiation sont les mêmes, la difference est assurée par pageMode\r\n    useEffect(() => {\r\n\r\n        if (history.location.state !== undefined) {\r\n            document.title = `Modification de ${history.location.state.name}`\r\n\r\n            console.log(\"History \", history.location)\r\n\r\n            history.location.fromExcel\r\n                ? setPageMode(\"Création\")\r\n                : setPageMode(\"Modification\")\r\n\r\n            setDocumentType(history.location.state.type)\r\n            setStopActions(history.location.state.Arret)\r\n            setStartActions(history.location.state.Relance)\r\n            //setDocumentType(history.location.state.type || \"PARPRE\")\r\n            //setPosActions(history.location.state.pos)\r\n            setTitle(history.location.state.name)\r\n\r\n            if (history.location.state.variables.servers !== undefined) {\r\n\r\n                const initialServers = history.location.state.variables.servers.map((variable, index) => {\r\n                    return {\r\n                        id: index,\r\n                        prod: variable.prod,\r\n                        hprod: variable.hprod,\r\n                        dev: variable.dev,\r\n                        name: variable.name\r\n                    }\r\n                })\r\n                setServers(initialServers)\r\n            }\r\n        } else {\r\n            document.title = \"Création de PARPRE / POS\"\r\n            setPageMode(\"Création\")\r\n        }\r\n    }, [])\r\n\r\n\r\n    const saveServer = () => {\r\n\r\n        //noms des serveurs dans la lste des variables\r\n        var Allservers = servers.map(server => { return server.prod.toUpperCase() })\r\n\r\n        var serversInStopActions = new Set()\r\n        var databasesInStopActions = new Set()\r\n\r\n        //on recupere les servers dans les etapes d'arret\r\n        StopActions.map(action => {\r\n            if (action.server === undefined || action.server === \"\") { return };\r\n            serversInStopActions.add(action.server.toUpperCase())\r\n            \r\n            if(action.type === \"database\"){\r\n                databasesInStopActions.add(action.name.toUpperCase())\r\n\r\n            }\r\n            \r\n        })\r\n\r\n        //on rajoute les serveurs manquants\r\n        serversInStopActions.forEach(server => {\r\n\r\n            if (!Allservers.includes(server)) {\r\n                Allservers.push(server)\r\n                var name =\"\"\r\n                server.startsWith(\"sw\")\r\n                    ? name = server.replace(\"sw\", \"SRV_WIN_\")\r\n                    : name = server\r\n                console.log(\"name \",name)\r\n                setServers([...servers, { id: (servers.length + 1), prod: server.toUpperCase(), hprod: \"definir\", dev: \"definir\", name:name }])\r\n\r\n            }\r\n        })\r\n        \r\n        databasesInStopActions.forEach(database => {\r\n\r\n            if (!Allservers.includes(database)) {\r\n                Allservers.push(database)\r\n                var name = `BDD_${database}`\r\n                setServers([...servers, { id: (servers.length + 1), prod: database.toUpperCase(), hprod: \"definir\", dev: \"definir\", name:name }])\r\n\r\n            }\r\n        })\r\n\r\n        //On enleve les serveurs absents dans la liste des actions\r\n        Allservers.map(server => {\r\n            if (!serversInStopActions.has(server) && !databasesInStopActions.has(server)) {\r\n                const newServerState = servers.filter(serverprod => serverprod.prod !== server)\r\n                setServers(newServerState)\r\n\r\n            }\r\n        })\r\n        \r\n    }\r\n\r\n    const classes = useStyles()\r\n\r\n    const saveStart = (object) => {\r\n        setStartActions(object)\r\n        //setAutoStartActions(object)\r\n\r\n    }\r\n\r\n\r\n    const saveStop = (object) => {\r\n        setStopActions(object)\r\n\r\n        // if(autoRelance)\r\n        //reverseStopAction(object)\r\n\r\n        saveServer(object)\r\n    }\r\n\r\n\r\n\r\n    const reverseStopAction = (actions) => {\r\n        var newRelance = actions.slice(0).reverse().map(action => {\r\n            if (action.type === \"service\" || action.type === \"database\" || action.type === \"process\") {\r\n                if (action.action === \"status\") {\r\n                    action = { ...action, action: \"start\" }\r\n                } else {\r\n                    action = { ...action, action: \"status\", options: { result: \"running\" } }\r\n                }\r\n\r\n            }\r\n            if (action.type === \"script\") {\r\n                action = { ...action, path: \"\" }\r\n\r\n            }\r\n            if (action.type === \"command\") {\r\n                action = { ...action, name: \"\", result: \"\" }\r\n            }\r\n            return action\r\n        })\r\n        //console.log(\"stopAction \",StopActions)\r\n        //console.log(\"new relance : \",newRelance)\r\n        console.log(\"input : \", actions)\r\n        for (var i = 0; i < newRelance.length; i++) {\r\n            if (newRelance[i]) {\r\n                newRelance[i].index = i\r\n            }\r\n\r\n        }\r\n        setAutoStartActions(newRelance)\r\n        console.log(\"actions \", actions, \" vs \", newRelance)\r\n    }\r\n\r\n    const generateJson = () => {\r\n\r\n        console.log(\"name \", title)\r\n\r\n        const parpre = {\r\n            name: title,\r\n            auteur: \"Samba NDIAYE\",\r\n            date_de_creation: new Date().toLocaleString(),\r\n            type: \"PARPRE\",\r\n            Arret: StopActions,\r\n            Relance: autoRelance ? AutoStartActions : StartActions,\r\n            POS: posActions,\r\n            variables: {\r\n                servers: servers\r\n            }\r\n        }\r\n\r\n        axios.post(`http://localhost:5000/api/PARPRE/create`, { data: parpre, mode: pageMode })\r\n            .then(res => console.log(res))\r\n\r\n        console.log(JSON.stringify(parpre))\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div className={classes.root}>\r\n            <Grid container spacing={2}>\r\n                <Grid item md={6}>\r\n                    {\r\n                        titleOpen ?\r\n                            (\r\n                                <TextField\r\n                                    placeholder=\"Changer le titre\"\r\n                                    onBlur={() => setTitleOpen(false)}\r\n                                    margin=\"dense\"\r\n                                    onChange={(e) => setTitle(e.target.value)}\r\n                                    autoFocus\r\n                                    value={title}\r\n                                />\r\n                            )\r\n                            :\r\n                            (\r\n                                <div>\r\n                                    <Typography\r\n                                        variant='h6'\r\n                                        gutterBottom\r\n                                        onClick={() => setTitleOpen(true)}\r\n                                    >\r\n                                        Nom : {title}\r\n\r\n                                    </Typography>\r\n                                </div>\r\n                            )\r\n                    }\r\n                </Grid>\r\n\r\n                {/**\r\n                 <Grid item md={2}>\r\n                  <FormGroup>\r\n                        <FormControlLabel\r\n                            control = {<Switch onChange={()=> setAutoCreate(!autoCreate)}/>}\r\n                            checked={autoCreate}\r\n                            label = \"Verification-Auto\"\r\n                        >\r\n                        \r\n\r\n                        </FormControlLabel>\r\n                        \r\n                    </FormGroup>\r\n                    </Grid> \r\n                 */}\r\n\r\n\r\n\r\n                <Grid item md={3}>\r\n                    <FormGroup>\r\n                        {documentType === \"PARPRE\" ?\r\n                            (\r\n                                <FormControlLabel\r\n                                    control={<Switch onChange={() => { reverseStopAction(StopActions); setAutoRelance(!autoRelance) }} />}\r\n                                    checked={autoRelance}\r\n                                    label=\"Relance-Auto\"\r\n                                >\r\n                                </FormControlLabel>\r\n                            )\r\n                            :\r\n                            (\r\n                                null\r\n                            )\r\n                        }\r\n                    </FormGroup>\r\n\r\n                </Grid>\r\n                <Grid item md={3}>\r\n\r\n                    <RadioGroup value={documentType} onChange={(e) => setDocumentType(e.target.value)}>\r\n                        <FormGroup row >\r\n                            <FormControlLabel value=\"POS\" label=\"POS\" control={<Radio color=\"primary\" />} />\r\n                            <FormControlLabel value=\"PARPRE\" label=\"PARPRE\" control={<Radio color=\"primary\" />} />\r\n                        </FormGroup>\r\n                    </RadioGroup>\r\n\r\n                </Grid>\r\n\r\n            </Grid>\r\n\r\n            {\r\n                documentType === \"POS\" ?\r\n\r\n                    (\r\n                        <ARCard\r\n                            name=\"Procédure d'Ouverture de Service\"\r\n                            type=\"status\"\r\n                            actions={posActions}\r\n                            SetActions={setPosActions}\r\n                            generateJson={generateJson}\r\n                            key={4}\r\n                        />\r\n                    )\r\n                    :\r\n                    (\r\n                        <div>\r\n                            <ARCard\r\n                                name=\"Arrêt\"\r\n                                type=\"stop\"\r\n                                actions={StopActions}\r\n                                SetActions={saveStop}\r\n                                autoRelance={autoRelance}\r\n                                AddServer={saveServer}\r\n                                generateJson={generateJson}\r\n                                key={1}\r\n\r\n                            />\r\n                            {autoRelance ?\r\n                                (<ARCard\r\n                                    name=\"Auto-Relance\"\r\n                                    type=\"start\"\r\n                                    actions={AutoStartActions}\r\n                                    SetActions={setAutoStartActions}\r\n                                    autoRelance={autoRelance}\r\n                                    AddServer={saveServer}\r\n                                    generateJson={generateJson}\r\n                                    key={2}\r\n\r\n                                />\r\n                                )\r\n                                :\r\n                                (<ARCard\r\n                                    name=\"Relance\"\r\n                                    type=\"start\"\r\n                                    actions={StartActions}\r\n                                    SetActions={saveStart}\r\n                                    AddServer={saveServer}\r\n                                    key={3}\r\n                                />\r\n\r\n                                )\r\n                            }\r\n                        </div>\r\n                    )\r\n            }\r\n\r\n            <RightNav ServerRow={servers} saveRows={setServers} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Create;"]},"metadata":{},"sourceType":"module"}